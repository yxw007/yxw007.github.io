import{_ as s,c as i,o as a,a7 as n}from"./chunks/framework.GnyprNw9.js";const g=JSON.parse('{"title":"Nuxt 入门实战 - 04：常用操作","description":"","frontmatter":{"title":"Nuxt 入门实战 - 04：常用操作","author":"Potter","date":"2023-06-21T11:42:00.000Z","tags":["Nuxt"],"categories":["Nuxt 入门实战"]},"headers":[],"relativePath":"article/04-practic/Nuxt/Nuxt 入门实战 - 04：常用操作.md","filePath":"article/04-practic/Nuxt/Nuxt 入门实战 - 04：常用操作.md","lastUpdated":1720164171000}'),t={name:"article/04-practic/Nuxt/Nuxt 入门实战 - 04：常用操作.md"},e=n(`<h1 id="nuxt-入门实战-04-常用操作" tabindex="-1">Nuxt 入门实战 - 04：常用操作 <a class="header-anchor" href="#nuxt-入门实战-04-常用操作" aria-label="Permalink to &quot;Nuxt 入门实战 - 04：常用操作&quot;">​</a></h1><blockquote><p>注意：Nuxt Kit 仅用于Module 模块开发，运行时别用</p></blockquote><h2 id="环境变量覆盖运行时配置" tabindex="-1">环境变量覆盖运行时配置 <a class="header-anchor" href="#环境变量覆盖运行时配置" aria-label="Permalink to &quot;环境变量覆盖运行时配置&quot;">​</a></h2><blockquote><p>注意：需要覆盖的运行时变量，必须在runtimeConfig定义出来，否则无效</p></blockquote><ul><li><p>.env</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//.env</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NUXT_API_SECRET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api_secret_token</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NUXT_PUBLIC_API_BASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//nuxtjs.org</span></span></code></pre></div></li><li><p>nuxt.config.js</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//nuxt.config.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  runtimeConfig: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiSecret: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// can be overridden by NUXT_API_SECRET environment variable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    public: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      apiBase: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// can be overridden by NUXT_PUBLIC_API_BASE environment variable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul><blockquote><p>名称匹配： 环境变量中配置，需要添加NUXT前缀，然后单词大小用_分割。runtimeConfig：采用驼峰式</p></blockquote><h2 id="访问运行时配置" tabindex="-1">访问运行时配置 <a class="header-anchor" href="#访问运行时配置" aria-label="Permalink to &quot;访问运行时配置&quot;">​</a></h2><ul><li><p>使用方式</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Check developer console!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const config = useRuntimeConfig()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(&#39;Runtime config:&#39;, config)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">if (process.server) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;API secret:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, config.apiSecret)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>注意：client端只能访问public，此字段可读可写。server端放访问运行时所有配置，但是仅只读不能修改，原因：如果能修改，多个请求访问运行时配置就会导致数据不一致问题。<strong>切记：不要把apiSecret 暴露给client端，其他隐私数据也是如此。UseRuntimeConfig 仅在setup or Lifecycle Hooks 期间有效</strong></p></blockquote></li></ul><h2 id="usefetch-获取数据" tabindex="-1">useFetch 获取数据 <a class="header-anchor" href="#usefetch-获取数据" aria-label="Permalink to &quot;useFetch 获取数据&quot;">​</a></h2><blockquote><p>说明：如何使用$fetch拉取SSR数据，会导致服务端获取一遍数据，客户端在获取一遍数据的问题，采用useFetch 可避免掉</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// During SSR data is fetched twice, once on the server and once on the client.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const dataTwice = await $fetch(&#39;/api/item&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// During SSR data is fetched only on the server side and transferred to the client.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const { data } = await useAsyncData(&#39;item&#39;, () =&gt; $fetch(&#39;/api/item&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// You can also useFetch as shortcut of useAsyncData + $fetch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const { data } = await useFetch(&#39;/api/item&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></blockquote><blockquote><p>说明：如果仅在客户端调用，推荐使用$fetch</p></blockquote><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><ul><li><a href="https://nuxt.com/docs/guide/going-further/runtime-config#serialization" target="_blank" rel="noreferrer">https://nuxt.com/docs/guide/going-further/runtime-config#serialization</a></li><li><a href="https://nuxt.com/docs/api/utils/dollarfetch" target="_blank" rel="noreferrer">https://nuxt.com/docs/api/utils/dollarfetch</a></li></ul>`,13),l=[e];function p(h,k,r,E,c,d){return a(),i("div",null,l)}const u=s(t,[["render",p]]);export{g as __pageData,u as default};
