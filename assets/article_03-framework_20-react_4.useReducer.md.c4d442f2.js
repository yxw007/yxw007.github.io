import{_ as s,o as a,c as n,B as l}from"./app.27536372.js";const u=JSON.parse('{"title":"4.useReducer","description":"","frontmatter":{"title":"4.useReducer","author":"Potter","date":"2024-04-15T10:22:13.000Z","tags":["react"],"categories":["react18"]},"headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"实现原理","slug":"实现原理","link":"#实现原理","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"常见疑问","slug":"常见疑问","link":"#常见疑问","children":[]}],"relativePath":"article/03-framework/20-react/4.useReducer.md","lastUpdated":1717336974000}'),o={name:"article/03-framework/20-react/4.useReducer.md"},e=l(`<h1 id="_4-react18-usereducer" tabindex="-1">4. React18 - useReducer <a class="header-anchor" href="#_4-react18-usereducer" aria-hidden="true">#</a></h1><hr><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-hidden="true">#</a></h2><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">createRoot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react-dom/client</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">FunctionComponent</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">number</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">setNumber</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useReducer</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">state</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">action</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">add</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">action</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">payload</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setNumber</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">add</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> payload</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//update1=&gt;update2=&gt;update1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setNumber</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">add</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> payload</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//update2</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}}&gt;{</span><span style="color:#BABED8;">number</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FunctionComponent</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> root </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">createRoot</span><span style="color:#BABED8;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">(element)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-hidden="true">#</a></h2><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20240410182947.svg" alt=""></p><p>完整流程图：<a href="https://app.diagrams.net/#G16Kjv05HiqfSzPxsqYDot4-oii-eSWHQr" target="_blank" rel="noreferrer">draw.io (diagrams.net)</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>初始挂载 <ol><li>初次渲染构建fiber树，建立ReactCurrentDispatcher.current与HooksDispatcherOnMount的关联</li><li>调用Function Component 执行React.useReducer(HooksDispatcherOnMount)，直接拿reducer 的initial值</li><li>jsx 通过bebal 转义Function Component 执行结果得到vdom，此时vdom 就引用hook 的初始值，然后会把初始值放置在vdom的props上</li><li>创建button fiber 会将vdom的props 赋值给fiber.pendingProps</li><li>在完成阶段会将，创建真实button dom 并用fiber.pendingProps设置其属性</li></ol></li><li>点击button按钮，触发调用HooksDispatcherOnMount.useReducer 绑定的dispatchReducerAction 方法，然后开启重新从root 更新 <ul><li>构建新的Fiber树</li><li>建立ReactCurrentDispatcher.current与HooksDispatcherOnUpdate 的关联</li><li>调用FunctionComponent 执行React.useReducer(HooksDispatcherOnUpdate )，拿到newState 状态</li><li>jsx 通过bebal 转义Function Component 执行结果得到vdom，此时vdom 就引用hook 的newState 值，然后会把值放置在vdom的props上</li><li>复用老的button Fiber 节点，将vdom props 放置button fiber.pendingProps 上面</li><li>在完button fiber完成阶段，对比新老props 得到updatePayload 将其挂载至button fiber.updateQueue上面</li></ul></li><li>最后：在commitRoot 阶段，将button fiber.updateQueue 更新至真实Dom节点</li></ul><h2 id="常见疑问" tabindex="-1">常见疑问 <a class="header-anchor" href="#常见疑问" aria-hidden="true">#</a></h2><ul><li>每种类型的节点memoizedState，分别都是存下什么 <ul><li>HostRootFilber.memoizedState：element vdom</li><li>FunctionComponent和其他Fiber：updateQueue</li><li>Hook.memoizedState: reducer 初始值</li></ul></li><li>哪里使用hook.memoizedState，然后给元素进行真实更新的呢？ <ul><li>没并有用直接将hook.memoizedState 在哪里赋值给真实Dom 属性，而是重新通过jsx bebal 编译产生新的虚拟dom时使用了更新newState</li></ul></li></ul>`,11),p=[e];function t(r,c,F,y,D,i){return a(),n("div",null,p)}const B=s(o,[["render",t]]);export{u as __pageData,B as default};
