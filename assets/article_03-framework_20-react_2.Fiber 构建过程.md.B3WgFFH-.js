import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.TJyStape.js";const g=JSON.parse('{"title":"2.Fiber 构建过程","description":"","frontmatter":{"title":"2.Fiber 构建过程","author":"Potter","date":"2024-04-15T10:21:34.000Z","tags":["react"],"categories":["react18"]},"headers":[],"relativePath":"article/03-framework/20-react/2.Fiber 构建过程.md","filePath":"article/03-framework/20-react/2.Fiber 构建过程.md","lastUpdated":1724074693000}'),e={name:"article/03-framework/20-react/2.Fiber 构建过程.md"},l=t(`<h1 id="_2-react18-fiber-构建过程" tabindex="-1">2. React18 - Fiber 构建过程 <a class="header-anchor" href="#_2-react18-fiber-构建过程" aria-label="Permalink to &quot;2. React18 - Fiber 构建过程&quot;">​</a></h1><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createRoot } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react-dom/client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      hello&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}&gt;world&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element);</span></span></code></pre></div><h2 id="第一阶段-深度前序遍历构建fiber树" tabindex="-1"><strong>第一阶段：深度前序遍历构建Fiber树</strong> <a class="header-anchor" href="#第一阶段-深度前序遍历构建fiber树" aria-label="Permalink to &quot;**第一阶段：深度前序遍历构建Fiber树**&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20240410182614.jpeg" alt="&quot;img&quot;"></p><blockquote><p>说明：从上到下进行阅读</p></blockquote><h2 id="第二阶段-从第一阶段的最后位置开始深度后序遍历树-完成工作单元" tabindex="-1"><strong>第二阶段：从第一阶段的最后位置开始深度后序遍历树，完成工作单元</strong> <a class="header-anchor" href="#第二阶段-从第一阶段的最后位置开始深度后序遍历树-完成工作单元" aria-label="Permalink to &quot;**第二阶段：从第一阶段的最后位置开始深度后序遍历树，完成工作单元**&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20240410182626.jpeg" alt="&quot;img&quot;"></p><blockquote><p>说明：图从左到右，从上到下进行阅读</p></blockquote><h2 id="简化过程" tabindex="-1">简化过程 <a class="header-anchor" href="#简化过程" aria-label="Permalink to &quot;简化过程&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20240410182642.jpeg" alt="&quot;img&quot;"></p><p>日志输出看执行顺序</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20240410182650.png" alt="&quot;img&quot;"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li>根据序号开始构建</li><li>先构建HostRootFiber 和RootRootNode</li><li>其次构建alternate HostRootFiber</li><li>然后就是遍历Fiber树，按前序深度优先对每个节点遍历进行Process</li><li>最后从深度构建完成是workInProcess位置，进行深度后序遍历对每个节点完成工作单元</li></ol>`,15),n=[l];function h(r,p,k,o,d,E){return a(),i("div",null,n)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
