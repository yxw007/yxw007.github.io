import{_ as s,o as n,c as a,B as l}from"./app.61059bbd.js";const d=JSON.parse('{"title":"Nuxt 入门实战 - 04：常用操作","description":"","frontmatter":{"title":"Nuxt 入门实战 - 04：常用操作","author":"Potter","date":"2023-06-21T11:42:00.000Z","tags":["Nuxt"],"categories":["Nuxt 入门实战"]},"headers":[{"level":2,"title":"环境变量覆盖运行时配置","slug":"环境变量覆盖运行时配置","link":"#环境变量覆盖运行时配置","children":[]},{"level":2,"title":"访问运行时配置","slug":"访问运行时配置","link":"#访问运行时配置","children":[]},{"level":2,"title":"useFetch 获取数据","slug":"usefetch-获取数据","link":"#usefetch-获取数据","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"relativePath":"article/04-practic/Nuxt/Nuxt 入门实战 - 04：常用操作.md","lastUpdated":1717732267000}'),e={name:"article/04-practic/Nuxt/Nuxt 入门实战 - 04：常用操作.md"},p=l(`<h1 id="nuxt-入门实战-04-常用操作" tabindex="-1">Nuxt 入门实战 - 04：常用操作 <a class="header-anchor" href="#nuxt-入门实战-04-常用操作" aria-hidden="true">#</a></h1><blockquote><p>注意：Nuxt Kit 仅用于Module 模块开发，运行时别用</p></blockquote><h2 id="环境变量覆盖运行时配置" tabindex="-1">环境变量覆盖运行时配置 <a class="header-anchor" href="#环境变量覆盖运行时配置" aria-hidden="true">#</a></h2><blockquote><p>注意：需要覆盖的运行时变量，必须在runtimeConfig定义出来，否则无效</p></blockquote><ul><li><p>.env</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//.env</span></span>
<span class="line"><span style="color:#BABED8;">NUXT_API_SECRET</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">api_secret_token</span></span>
<span class="line"><span style="color:#BABED8;">NUXT_PUBLIC_API_BASE</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//nuxtjs.org</span></span>
<span class="line"></span></code></pre></div></li><li><p>nuxt.config.js</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//nuxt.config.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">defineNuxtConfig</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">runtimeConfig</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">apiSecret</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// can be overridden by NUXT_API_SECRET environment variable</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">public</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">apiBase</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// can be overridden by NUXT_PUBLIC_API_BASE environment variable</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre></div></li></ul><blockquote><p>名称匹配： 环境变量中配置，需要添加NUXT前缀，然后单词大小用_分割。runtimeConfig：采用驼峰式</p></blockquote><h2 id="访问运行时配置" tabindex="-1">访问运行时配置 <a class="header-anchor" href="#访问运行时配置" aria-hidden="true">#</a></h2><ul><li><p>使用方式</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Check developer console!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">const config = useRuntimeConfig()</span></span>
<span class="line"><span style="color:#BABED8;">console.log(&#39;Runtime config:&#39;, config)</span></span>
<span class="line"><span style="color:#BABED8;">if (process.server) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">API secret:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> config</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">apiSecret)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>注意：client端只能访问public，此字段可读可写。server端放访问运行时所有配置，但是仅只读不能修改，原因：如果能修改，多个请求访问运行时配置就会导致数据不一致问题。<strong>切记：不要把apiSecret 暴露给client端，其他隐私数据也是如此。UseRuntimeConfig 仅在setup or Lifecycle Hooks 期间有效</strong></p></blockquote></li></ul><h2 id="usefetch-获取数据" tabindex="-1">useFetch 获取数据 <a class="header-anchor" href="#usefetch-获取数据" aria-hidden="true">#</a></h2><blockquote><p>说明：如何使用$fetch拉取SSR数据，会导致服务端获取一遍数据，客户端在获取一遍数据的问题，采用useFetch 可避免掉</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">// During SSR data is fetched twice, once on the server and once on the client.</span></span>
<span class="line"><span style="color:#BABED8;">const dataTwice = await $fetch(&#39;/api/item&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">// During SSR data is fetched only on the server side and transferred to the client.</span></span>
<span class="line"><span style="color:#BABED8;">const </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> = await useAsyncData(&#39;item&#39;, () =&gt; $fetch(&#39;/api/item&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">// You can also useFetch as shortcut of useAsyncData + $fetch</span></span>
<span class="line"><span style="color:#BABED8;">const </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> = await useFetch(&#39;/api/item&#39;)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div></blockquote><blockquote><p>说明：如果仅在客户端调用，推荐使用$fetch</p></blockquote><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-hidden="true">#</a></h2><ul><li><a href="https://nuxt.com/docs/guide/going-further/runtime-config#serialization" target="_blank" rel="noreferrer">https://nuxt.com/docs/guide/going-further/runtime-config#serialization</a></li><li><a href="https://nuxt.com/docs/api/utils/dollarfetch" target="_blank" rel="noreferrer">https://nuxt.com/docs/api/utils/dollarfetch</a></li></ul>`,13),t=[p];function o(c,r,i,D,y,F){return n(),a("div",null,t)}const B=s(e,[["render",o]]);export{d as __pageData,B as default};
