import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.Dty_nV1T.js";const E=JSON.parse('{"title":"分享给明星开源项目Nuxt，提交人生的第一个PR全过程","description":"","frontmatter":{"id":"y605zk0s","title":"分享给明星开源项目Nuxt，提交人生的第一个PR全过程","author":"Potter","date":"2024-08-09 10:09","tags":["Nuxt","PR","cookie-es","github","开源"],"categories":["Nuxt"]},"headers":[],"relativePath":"article/03-framework/04-nuxt/分享给明星开源项目Nuxt，提交人生的第一个PR全过程.md","filePath":"article/03-framework/04-nuxt/分享给明星开源项目Nuxt，提交人生的第一个PR全过程.md","lastUpdated":1730970167000}'),l={name:"article/03-framework/04-nuxt/分享给明星开源项目Nuxt，提交人生的第一个PR全过程.md"};function n(p,s,h,k,r,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="分享给明星开源项目nuxt-提交人生的第一个pr全过程" tabindex="-1">分享给明星开源项目Nuxt，提交人生的第一个PR全过程 <a class="header-anchor" href="#分享给明星开源项目nuxt-提交人生的第一个pr全过程" aria-label="Permalink to &quot;分享给明星开源项目Nuxt，提交人生的第一个PR全过程&quot;">​</a></h1><p>整个过程经历了2个半月，这是非常漫长的一个过程，可能你会因此而放弃，但是我还是坚持下来了，接下来就让我来分享一下我这段PR经历吧。</p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180087602.png" alt="alt text"></p><p><strong>issue：</strong><a href="https://github.com/nuxt/nuxt/issues/27246" target="_blank" rel="noreferrer">Decode function for useCookie called for every cookie present</a></p><p>你可能会问：为什么偏偏调选解决这个问题呢？难道这个问题有什么特别之处吗？解释一下原因:</p><ol><li>问题描述清晰</li><li>有复现步骤</li><li>有最小复现代码Reproduction</li></ol><blockquote><p>tips: 大家提交issue时想要你的问题得到解决，就得学会换位思考，假如你是维护者，你会希望issue提供哪些关键信息？具备以上3点你可能才有兴趣去解决这个问题，不具备的话估计就看一下，如果你很懂这个问题，可能会去解决，不太理解也就直接跳过了，那么你的issue就可能一直会被忽略。这也就是为什么很多项目都需要提供reproduction，如果没有提供reproduction，issue直接被关闭了。</p></blockquote><p>咋们根据issue来复现一下，看看问题到底是什么?</p><ul><li>code:</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fooCookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FOO&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> barCookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BAR&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({action: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;decode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, baz: value, source: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bazCookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({action: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;decode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, baz: value, source: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({action: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;encode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, baz: value})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`All cookies: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cookie</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Coookies&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Foo: &quot;{{ fooCookie }}&quot;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Bar: &quot;{{ barCookie }}&quot;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Baz: &quot;{{ bazCookie}}&quot;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>输出结果： <img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180088999.png" alt="alt text"></li></ul><p>为什么出现了4次decode呢？foo、bar的decode分别被调用了2次。barCookie的decode和bazCookie的decode都应该只被调用了1次，也就是自己的cookie才会被调用。</p><p>这就是提交issuse的问题描述 <img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180089942.png" alt="alt text"></p><p>搞懂问题后，接下来就看思考如何解决这个问题了</p><h2 id="调试问题-查找具体原因" tabindex="-1">调试问题，查找具体原因 <a class="header-anchor" href="#调试问题-查找具体原因" aria-label="Permalink to &quot;调试问题，查找具体原因&quot;">​</a></h2><p>直接在decode的地方加个debugger，然后看调用栈，看看是谁调用的 <img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180090763.png" alt="alt text"> 此时看不出什么问题，我们往回到至readRawCookies，此时传进去就是document.cookie的值 <img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180091796.png" alt="alt text"> 看看parse如何解析的 <img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180092610.png" alt="alt text"> 由此可以看出，cookie就是有key=value然后加分号拼接起来的，那么解析也用这种方式解析，再来看下tryDecode干了什么</p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180093580.png" alt="alt text"></p><p>最后就到了barCookie的decode，此时我们就知道为什么不属于自己cookie名字的cookie也会被调用，因为压根就没有做过滤呀，所以才会导致这个问题。</p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180094442.png" alt="alt text"></p><h2 id="解决问题" tabindex="-1">解决问题 <a class="header-anchor" href="#解决问题" aria-label="Permalink to &quot;解决问题&quot;">​</a></h2><h3 id="第1次pr-关闭-5-22" tabindex="-1">第1次PR (关闭：5-22) <a class="header-anchor" href="#第1次pr-关闭-5-22" aria-label="Permalink to &quot;第1次PR (关闭：5-22)&quot;">​</a></h3><p>上面的这个问题源于cookie-es库，我想的第一个方案，将key返回给上层，然后让上层自己决定是否decode。</p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180099951.png" alt="alt text"><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180101269.png" alt="alt text"></p><p>相关PR: <a href="https://github.com/unjs/cookie-es/pull/32" target="_blank" rel="noreferrer">feat: decode callback parameter adds key</a></p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180102202.png" alt="alt text"></p><p>pi0说的比较含蓄，有点尴尬😅</p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180103454.png" alt="alt text"></p><p>这句话我是故意套他方案的，哈哈</p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180104690.png" alt="alt text"></p><p>他明确告诉我在第52行加个判断就可以了 <img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180105512.png" alt="alt text"></p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180106912.png" alt="alt text"></p><p>说明：filter最好采用行业标准的写法，这样别人看一眼就知道什么意思，而不是使用者等到报错的时候，才发现条件写反了。</p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180107698.png" alt="alt text"></p><h3 id="第2次pr-合并-5-22" tabindex="-1">第2次PR (合并: 5-22) <a class="header-anchor" href="#第2次pr-合并-5-22" aria-label="Permalink to &quot;第2次PR (合并: 5-22)&quot;">​</a></h3><p>按第1次pr的修改建议，重新提了这个PR.</p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180108700.png" alt="alt text"></p><p>相关PR: <a href="https://github.com/unjs/cookie-es/pull/35" target="_blank" rel="noreferrer">feat(parse): support filter option for key filtering</a></p><p>接下来就是漫长的等待，等待pi0发布新包，我才能把nuxt对应的那个issue改完再提PR</p><h2 id="等待cookie-es发布新包" tabindex="-1">等待cookie-es发布新包 <a class="header-anchor" href="#等待cookie-es发布新包" aria-label="Permalink to &quot;等待cookie-es发布新包&quot;">​</a></h2><h3 id="cookie-es发布新包-7-19" tabindex="-1">cookie-es发布新包 (7-19) <a class="header-anchor" href="#cookie-es发布新包-7-19" aria-label="Permalink to &quot;cookie-es发布新包 (7-19)&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180109613.png" alt="alt text"></p><p>此时：开心又郁闷，赶紧把代码修改提PR</p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180110408.png" alt="alt text"></p><p>结果测试一看，发现我的代码根本就没有，看提交记录发现pi0把我代码搞丢了，好不容易提了个PR，结果还没了，郁闷，那就再提一个吧</p><h3 id="第3次pr-合并-7-25" tabindex="-1">第3次PR (合并: 7-25) <a class="header-anchor" href="#第3次pr-合并-7-25" aria-label="Permalink to &quot;第3次PR (合并: 7-25)&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180111439.png" alt="alt text"></p><p>由于第1次提pr等待太久了，结果还把代码给搞丢了，所以这次我提完pr就留言让他发布新包，不然又不知道等待什么时候才能把Nuxt上那个bug修复。 <img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180112596.png" alt="alt text"></p><p>这次很快得到响应，pi0就更新发布了新包，这下我又可以继续修复最初的issue了</p><h2 id="给nuxt提交pr" tabindex="-1">给Nuxt提交PR <a class="header-anchor" href="#给nuxt提交pr" aria-label="Permalink to &quot;给Nuxt提交PR&quot;">​</a></h2><h3 id="第1次pr-7-22" tabindex="-1">第1次PR (7-22) <a class="header-anchor" href="#第1次pr-7-22" aria-label="Permalink to &quot;第1次PR (7-22)&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180113675.png" alt="alt text"></p><p>发现测试通过了，但是未测试新加的filter选项，所以就是一波修改测试，最终PR合并了</p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180114560.png" alt="alt text"></p><p>相关PR: <a href="https://github.com/nuxt/nuxt/pull/28215" target="_blank" rel="noreferrer">perf(nuxt): call cookie decode function only for named cookie #28215</a></p><p>相关issue： <img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180115703.png" alt="alt text"></p><h3 id="中途遇到的问题" tabindex="-1">中途遇到的问题 <a class="header-anchor" href="#中途遇到的问题" aria-label="Permalink to &quot;中途遇到的问题&quot;">​</a></h3><ol><li><p>添加的测试用例，无法用vitest测试，翻阅官方文档，执行了各种命令都无法运行测试代码</p></li><li><p>vscode vitest <img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180116595.png" alt="alt text"> 这是个非常坑爹的玩意，根本就没法用，不知道大家跟我是不是一样</p><ul><li>问题1：检测不到测试用例，我各种新安装依赖都没用</li><li>问题2：一直loading，不知道在搞什么鬼</li><li>问题3：中途检测到测试用例，结果还运行不了测试用例，特别恼火</li></ul></li></ol><p>没办法测试，我怎么测试我的代码呢？这个vitest实在用不了，就写playground里面测试，测试通过后再提交PR。 代码提交后发现CI测试未通过了，此时来个灵感，github CI能运行测试，我看一下它执行的命令，岂不是我本地就可以运行测试代码了，果然安装CI工作流执行命令，本地就可以测试了。</p><blockquote><p>tips: 如果搞不清一个项目该按什么顺序执行命令，然后翻页文档也没有搞清，此时就可以看.github/workflows文件夹下的yml文件，里面就是CI的执行命令，你可以参考这个文件来执行你的命令。</p></blockquote><h2 id="收到nuxt发布邮件" tabindex="-1">收到Nuxt发布邮件 <a class="header-anchor" href="#收到nuxt发布邮件" aria-label="Permalink to &quot;收到Nuxt发布邮件&quot;">​</a></h2><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180117735.png" alt="alt text"></p><p><img src="https://raw.githubusercontent.com/yxw007/BlogPicBed/master/img/1723180118804.png" alt="alt text"></p><p>终于看到我了，非常开心😄，这是我第一次给明星项目提交PR，还被发布了，非常开心，也是对我这段时间的努力的肯定，继续加油💪</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>提交issue时要提供最小复现代码，方便维护者快速定位问题</li><li>给明星项目提PR不容易，会有很多的限制，要求也会更高，所以要有耐心，不要放弃</li><li>有问题就要去调试，找到问题的根源，然后解决问题</li><li>解决一个问题时要思考更好、更合理的解决方法，而不是只解决当前问题</li><li>大项目无从下手时，看CI的执行过程来了解项目的执行命令（文档虽然可以，但是有时会出现更新不及时的问题）</li></ul><h2 id="更多" tabindex="-1">更多 <a class="header-anchor" href="#更多" aria-label="Permalink to &quot;更多&quot;">​</a></h2><p>最近我开源了一个文章助手<a href="https://github.com/artipub/artipub" target="_blank" rel="noreferrer">artipub</a>，可以帮你一键将markdown发布至多平台，方便大家更好的传播知识和分享你的经验。 官网地址：<a href="https://artipub.github.io/artipub/" target="_blank" rel="noreferrer">https://artipub.github.io/artipub/</a> (提示：国内访问可能有点慢，翻墙就会很快)</p><p>帮忙点个star⭐，让更多人知道这个工具，谢谢大家🙏。如果你有兴趣，欢迎加入你的加入，一起完善这个工具。</p>`,69)]))}const d=i(l,[["render",n]]);export{E as __pageData,d as default};
