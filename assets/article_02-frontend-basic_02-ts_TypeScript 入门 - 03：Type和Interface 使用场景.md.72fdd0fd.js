import{_ as e,o as t,c as a,B as i}from"./app.41d255d9.js";const f=JSON.parse('{"title":"TypeScript 入门 - 03：Type和Interface 使用场景","description":"","frontmatter":{"title":"TypeScript 入门 - 03：Type和Interface 使用场景","author":"Potter","date":"2022-05-14 21:40","tags":["TypeScript"],"categories":["TypeScript 入门"]},"headers":[{"level":2,"title":"使用类型别名的场景:","slug":"使用类型别名的场景","link":"#使用类型别名的场景","children":[]},{"level":2,"title":"使用接口的场景:","slug":"使用接口的场景","link":"#使用接口的场景","children":[]}],"relativePath":"article/02-frontend-basic/02-ts/TypeScript 入门 - 03：Type和Interface 使用场景.md","lastUpdated":1717737287000}'),r={name:"article/02-frontend-basic/02-ts/TypeScript 入门 - 03：Type和Interface 使用场景.md"},c=i('<h1 id="typescript-入门-03-type和interface-使用场景" tabindex="-1">TypeScript 入门 - 03：Type和Interface 使用场景 <a class="header-anchor" href="#typescript-入门-03-type和interface-使用场景" aria-hidden="true">#</a></h1><h2 id="使用类型别名的场景" tabindex="-1">使用类型别名的场景: <a class="header-anchor" href="#使用类型别名的场景" aria-hidden="true">#</a></h2><ul><li>定义基本类型的别名时，使用type</li><li>定义元组类型时，使用type</li><li>定义函数类型时，使用type</li><li>定义联合类型时，使用type</li><li>定义映射类型时，使用type</li></ul><h2 id="使用接口的场景" tabindex="-1">使用接口的场景: <a class="header-anchor" href="#使用接口的场景" aria-hidden="true">#</a></h2><ul><li>需要利用接口自动合并特性的时候，使用interface</li><li>定义对象类型且无需使用type 的时候，使用interface</li></ul>',5),p=[c];function l(n,_,s,d,o,h){return t(),a("div",null,p)}const T=e(r,[["render",l]]);export{f as __pageData,T as default};
