import{_ as s,c as n,o as a,A as l}from"./app.e25c173a.js";const i=JSON.parse('{"title":"响应式根基：Object.defineProperty 与 Proxy 拦截区别","description":"","frontmatter":{"title":"响应式根基：Object.defineProperty 与 Proxy 拦截区别","author":"Potter","date":"2022-05-12 18:42","tags":["Object.defineProperty","Proxy"],"categories":["响应式原理"]},"headers":[{"level":2,"title":"概要内容","slug":"概要内容","link":"#概要内容","children":[]},{"level":2,"title":"Object.defineProperty 拦截测试","slug":"object-defineproperty-拦截测试","link":"#object-defineproperty-拦截测试","children":[{"level":3,"title":"公共代码","slug":"公共代码","link":"#公共代码","children":[]},{"level":3,"title":"测试1：修改对象-string类型字段，拦截测试","slug":"测试1-修改对象-string类型字段-拦截测试","link":"#测试1-修改对象-string类型字段-拦截测试","children":[]},{"level":3,"title":"测试2：修改对象-数组类型字段，新增元素，拦截测试","slug":"测试2-修改对象-数组类型字段-新增元素-拦截测试","link":"#测试2-修改对象-数组类型字段-新增元素-拦截测试","children":[]},{"level":3,"title":"测试3：修改对象-添加字段，拦截测试","slug":"测试3-修改对象-添加字段-拦截测试","link":"#测试3-修改对象-添加字段-拦截测试","children":[]},{"level":3,"title":"测试4：修改对象-删除字段，拦截测试","slug":"测试4-修改对象-删除字段-拦截测试","link":"#测试4-修改对象-删除字段-拦截测试","children":[]},{"level":3,"title":"测试5：修改数组类型字段，新增元素，拦截测试","slug":"测试5-修改数组类型字段-新增元素-拦截测试","link":"#测试5-修改数组类型字段-新增元素-拦截测试","children":[]}]},{"level":2,"title":"Proxy拦截测试","slug":"proxy拦截测试","link":"#proxy拦截测试","children":[{"level":3,"title":"公共代码：","slug":"公共代码-1","link":"#公共代码-1","children":[]},{"level":3,"title":"测试1：修改对象string类型字段，拦截测试","slug":"测试1-修改对象string类型字段-拦截测试","link":"#测试1-修改对象string类型字段-拦截测试","children":[]},{"level":3,"title":"测试2：修改对象数组类型字段，新增元素，拦截测试","slug":"测试2-修改对象数组类型字段-新增元素-拦截测试","link":"#测试2-修改对象数组类型字段-新增元素-拦截测试","children":[]},{"level":3,"title":"测试3：修改对象-添加字段，拦截测试","slug":"测试3-修改对象-添加字段-拦截测试-1","link":"#测试3-修改对象-添加字段-拦截测试-1","children":[]},{"level":3,"title":"测试4：修改对象-删除字段，拦截测试","slug":"测试4-修改对象-删除字段-拦截测试-1","link":"#测试4-修改对象-删除字段-拦截测试-1","children":[]},{"level":3,"title":"测试5：修改：对象数组类型字段","slug":"测试5-修改-对象数组类型字段","link":"#测试5-修改-对象数组类型字段","children":[]}]},{"level":2,"title":"总结：","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"relativePath":"article/02-frontend-basic/01-js/principle-learn-01.md","lastUpdated":1679029726000}'),p={name:"article/02-frontend-basic/01-js/principle-learn-01.md"},o=l(`<h1 id="响应式根基-object-defineproperty-与-proxy-拦截区别" tabindex="-1">响应式根基：Object.defineProperty 与 Proxy 拦截区别 <a class="header-anchor" href="#响应式根基-object-defineproperty-与-proxy-拦截区别" aria-hidden="true">#</a></h1><h2 id="概要内容" tabindex="-1">概要内容 <a class="header-anchor" href="#概要内容" aria-hidden="true">#</a></h2><ul><li>Object.defineProperty 拦截测试</li><li>Proxy 拦截测试</li><li>总结</li></ul><hr><blockquote><p>假如你熟悉Vue，同时好奇心比较强，你肯定会想知道Vue是如何实现响应式的，要了解响应式原理就需要我们了解Object.defineProperty 和 Proxy 这两个API。针对这两个API编写对应的测试例子看看情况如何。</p></blockquote><h2 id="object-defineproperty-拦截测试" tabindex="-1">Object.defineProperty 拦截测试 <a class="header-anchor" href="#object-defineproperty-拦截测试" aria-hidden="true">#</a></h2><hr><h3 id="公共代码" tabindex="-1">公共代码 <a class="header-anchor" href="#公共代码" aria-hidden="true">#</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> hero </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">赵云</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">hp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">sp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">equipment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">马</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">长枪</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(hero)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">internalValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hero</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            get</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">getting key &quot;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">internalValue</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">internalValue</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">setting key &quot;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">internalValue</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> -&gt; </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">internalValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newValue</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="测试1-修改对象-string类型字段-拦截测试" tabindex="-1">测试1：修改对象-string类型字段，拦截测试 <a class="header-anchor" href="#测试1-修改对象-string类型字段-拦截测试" aria-hidden="true">#</a></h3><ul><li><p>code：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：对象-string类型字段，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">吕布</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">更改后结果：</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717175153.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717175153.png"></p></li><li><p>结论：<strong>对象-普通字段修改，可以被get set拦截</strong></p></li></ul><h3 id="测试2-修改对象-数组类型字段-新增元素-拦截测试" tabindex="-1">测试2：修改对象-数组类型字段，新增元素，拦截测试 <a class="header-anchor" href="#测试2-修改对象-数组类型字段-新增元素-拦截测试" aria-hidden="true">#</a></h3><ul><li><p>code：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：对象-数组类型字段，新增元素，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">equipment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">盔甲</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">更改后结果： </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">equipment</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181404.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181404.png"></p></li><li><p>结论：<strong>对象-数组字段新增元素,可以被get拦截，无法被set拦截</strong></p></li></ul><h3 id="测试3-修改对象-添加字段-拦截测试" tabindex="-1">测试3：修改对象-添加字段，拦截测试 <a class="header-anchor" href="#测试3-修改对象-添加字段-拦截测试" aria-hidden="true">#</a></h3><ul><li><p>code</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：对象-添加字段，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">23</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">更改后结果： </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181932.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181932.png"></p></li><li><p>结论：<strong>对象-添加字段,无法被get set拦截</strong></p></li></ul><h3 id="测试4-修改对象-删除字段-拦截测试" tabindex="-1">测试4：修改对象-删除字段，拦截测试 <a class="header-anchor" href="#测试4-修改对象-删除字段-拦截测试" aria-hidden="true">#</a></h3><ul><li><p>code</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：对象-删除字段，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">更改后结果： </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717182115.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717182115.png"></p></li><li><p>结论</p></li></ul><h3 id="测试5-修改数组类型字段-新增元素-拦截测试" tabindex="-1">测试5：修改数组类型字段，新增元素，拦截测试 <a class="header-anchor" href="#测试5-修改数组类型字段-新增元素-拦截测试" aria-hidden="true">#</a></h3><ul><li><p>code</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">equipment</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">push</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">value </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> -  </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">arguments[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">---------------第二部分：对象-数组value拦截测试-----------------------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：数组类型字段，新增元素，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">当前 equipment： </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">equipment</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">equipment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">盔甲</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">新增[盔甲]后 equipment： </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">equipment</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185253.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185253.png"></p></li><li><p>结论：<strong>可以利用value 拦截到对象-数组字段元素删减</strong></p></li></ul><h2 id="proxy拦截测试" tabindex="-1">Proxy拦截测试 <a class="header-anchor" href="#proxy拦截测试" aria-hidden="true">#</a></h2><hr><h3 id="公共代码-1" tabindex="-1">公共代码： <a class="header-anchor" href="#公共代码-1" aria-hidden="true">#</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> hero </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">赵云</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">hp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">sp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">equipment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">马</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">长枪</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">receiver</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">getting key &quot;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">receiver</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">receiver</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">setting key &quot;</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">oldValue</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> -&gt; </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">  result:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> heroProxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(hero</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="测试1-修改对象string类型字段-拦截测试" tabindex="-1">测试1：修改对象string类型字段，拦截测试 <a class="header-anchor" href="#测试1-修改对象string类型字段-拦截测试" aria-hidden="true">#</a></h3><ul><li><p>code</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：对象string类型字段，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">heroProxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">吕布</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">更改后结果：</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">heroProxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184434.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184434.png"></p></li><li><p>结论：<strong>对象-普通字段修改，可以被get set拦截</strong></p></li></ul><h3 id="测试2-修改对象数组类型字段-新增元素-拦截测试" tabindex="-1">测试2：修改对象数组类型字段，新增元素，拦截测试 <a class="header-anchor" href="#测试2-修改对象数组类型字段-新增元素-拦截测试" aria-hidden="true">#</a></h3><ul><li><p>code</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：对象数组类型字段，新增元素，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">heroProxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">equipment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">盔甲</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">更改后结果： </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">heroProxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">equipment</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184544.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184544.png"></p></li><li><p>结论：<strong>对象-数组字段新增元素,可以被get拦截，无法被set拦截</strong></p></li></ul><h3 id="测试3-修改对象-添加字段-拦截测试-1" tabindex="-1">测试3：修改对象-添加字段，拦截测试 <a class="header-anchor" href="#测试3-修改对象-添加字段-拦截测试-1" aria-hidden="true">#</a></h3><ul><li><p>code</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：对象-添加字段，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">heroProxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">23</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">更改后结果： </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">heroProxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184736.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184736.png"></p></li><li><p>结论：<strong>对象-添加字段,可以被set拦截</strong></p></li></ul><h3 id="测试4-修改对象-删除字段-拦截测试-1" tabindex="-1">测试4：修改对象-删除字段，拦截测试 <a class="header-anchor" href="#测试4-修改对象-删除字段-拦截测试-1" aria-hidden="true">#</a></h3><ul><li><p>code</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：对象-删除字段，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> heroProxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">更改后结果： </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">heroProxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185008.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185008.png"></p></li><li><p>结论：<strong>对象-删除字段,可以被get拦截</strong></p></li></ul><h3 id="测试5-修改-对象数组类型字段" tabindex="-1">测试5：修改：对象数组类型字段 <a class="header-anchor" href="#测试5-修改-对象数组类型字段" aria-hidden="true">#</a></h3><ul><li><p>code</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> heroProxyArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(hero</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">equipment</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">------修改：对象数组类型字段，新增元素，拦截测试------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">当前 equipment：</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(heroProxyArray)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">heroProxyArray</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">匕首</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">新增[匕首]后 equipment：</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(heroProxyArray)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185209.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185209.png"></p></li><li><p>结论：<strong>利用proxy 即可轻松拦截数组变化</strong></p></li></ul><hr><blockquote><p>demo 源码：<a href="https://github.com/yxw007/vue-principle-learn/tree/master/Proxy%26Reflect" target="_blank" rel="noreferrer">vue-principle-learn</a><br> 后续我会把vue原理相关的学习资料和demo都会更新到此仓库，欢迎star收藏~</p></blockquote><h2 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>Object.defineProperty <ul><li>缺点1：只能遍历对象已存在的属性，进行get set拦截，无法针对新增、删除元素进行拦截</li><li>缺点2：针对array 拦截，需要拦截push、shift、pop、unshift等，拦截操作复杂</li></ul></li><li>Proxy <ul><li>优势1：新增、删减字段都能轻松拦截</li><li>优势2：针对array 拦截，跟object 属性get set一样拦截，无需特殊处理</li></ul></li></ul><hr><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-hidden="true">#</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/60126477" target="_blank" rel="noreferrer">深入实践 ES6 Proxy &amp; Reflect</a></li><li><a href="https://stackoverflow.com/questions/5100376/how-to-watch-for-array-changes" target="_blank" rel="noreferrer">how-to-watch-for-array-changes</a></li></ul>`,40),e=[o];function t(r,c,D,y,F,A){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
