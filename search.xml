<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github + Hexo + Next 搭建个人博客网站</title>
    <url>/2022/11/13/BuildBlog/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>搭建步骤</li>
<li>安装环境</li>
<li>图床加速、集成Gitalk、集成Valine </li>
<li>绑定域名、版权配置、赞赏、站点加速等</li>
</ul>
<blockquote>
<p>搭建原因：几年前一直在CSDN写博客，经常用心写的文章，结果过一段时间文章关联的图片全部丢失，给他们反馈无果，图片丢失也找不回。后面就转用印象笔记，几年下来记录了不少笔记，但是发现还是缺少一个互动的环节，不知道自己写的笔记有没有问题，没法与他人发生碰撞。想快速产生好的想法或者更好的解决方案，看到网上不少朋友都写在自己博客网站上，于是就决定自己也搭一个，一来记录自己成长，二来与大家互动让自己的知识得到升华，而且个人博客也显的逼格更高。 呵呵~  以下是我零碎2~3天搭自己博客网站的步骤，希望能给后面的人提供帮助。</p>
</blockquote>
<span id="more"></span>
<h3 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h3><hr>
<h4 id="Github-创建博客仓库"><a href="#Github-创建博客仓库" class="headerlink" title="Github 创建博客仓库"></a>Github 创建博客仓库</h4><p>在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如：aa4790139.github.io</p>
<hr>
<h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><p>在本机安装<a href="https://nodejs.org/zh-cn/download/">Node.js</a></p>
<hr>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /d/Work/Projects/PotterBlog</span><br><span class="line">cd /d/Work/Projects/PotterBlog</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果出现以下情况报错：<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/1.png" alt=""></p>
<p>  解决办法：关闭npm 的https</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set strict-ssl false</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="编译生成-amp-本地启动"><a href="#编译生成-amp-本地启动" class="headerlink" title="编译生成&amp;本地启动"></a>编译生成&amp;本地启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>等启动完后浏览器打开<a href="http://localhost:4000">http://localhost:4000</a>，看到hello world 博客页面，说明你成功）</p>
<hr>
<h4 id="切换主题为Next"><a href="#切换主题为Next" class="headerlink" title="切换主题为Next"></a>切换主题为Next</h4><ul>
<li><p>首先：clone next 主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
</li>
<li><p>其次：修改项目根目录下的 _config.yml，找到theme字段，更改为next即可</p>
</li>
<li><p>最后：修改主题next的默认的相关配置，主题配置文件路径：themes/next/_config.yml (<br>具体怎么配置看这篇文章相关部分即可：<a href="https://www.cxyxiaowu.com/6407.html">https://www.cxyxiaowu.com/6407.html</a> </p>
</li>
</ul>
<hr>
<h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><ul>
<li><p>命令：(提示：运行如下命令后，文章会生成到source/_posts下)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new hello-world</span><br></pre></td></tr></table></figure>
</li>
<li><p>文章开头格式规范：(提示：按此格式方便编译识别标题、时间、类别等)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题 # 自动创建，如 hello-world</span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="创建Github-编写Markdown文章的图床"><a href="#创建Github-编写Markdown文章的图床" class="headerlink" title="创建Github 编写Markdown文章的图床"></a>创建Github 编写Markdown文章的图床</h4><ol>
<li>github 创建BlogPicBed 仓库</li>
<li><a href="https://docs.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token">创建个人访问令牌</a></li>
<li><a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/113965016/bc669d80-3b9c-11ea-9c36-8274348f10a9?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200923%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20200923T014847Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=64a969201f2341629756cedfb055010b0262aec31d37fddc06c9fdf6ac56618a&amp;X-Amz-SignedHeaders=host&amp;actor_id=9338717&amp;key_id=0&amp;repo_id=113965016&amp;response-content-disposition=attachment%3B%20filename%3DPicGo-Setup-2.2.2.exe&amp;response-content-type=application%2Foctet-stream">下载PicGo</a> (目的：利用此工具上传图片至Github创建的BlogPicBed仓库中)</li>
<li>PicGo 配置成Github,如下图所示<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/2.png" alt=""></li>
<li>利用PicGo 上传一张图片，然后去BlogPicBed仓库的img文件夹找到你刚刚上传的图片，然后右键复制图片链接地址</li>
<li>使用Github 图床仓库的图片地址(提示：复制的图片地址是不带raw参数的，所以需要手动在地址后面拼”?raw=true” 否则图片不会显示)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">比如：![](https://github.com/aa4790139/BlogPicBed/blob/master/img/2.png?raw=true)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用jsdelivr CDN加速图床： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：https://cdn.jsdelivr.net/gh/github账号/图床仓库名@版本/仓库图片相对路径</span><br><span class="line">比如：https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/2.png</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<hr>
<h4 id="集成Gitalk"><a href="#集成Gitalk" class="headerlink" title="集成Gitalk"></a>集成Gitalk</h4><ol>
<li>获取GitHub OAuth授权(参考文章：<a href="https://www.ruanyifeng.com/blog/2019/04/github-oauth.html">GitHub OAuth 第三方登录示例教程</a>)</li>
<li>GitHub 创建留言仓库BlogGitTalk(注意：此仓库必须为公开仓库，不能为私有仓库)</li>
<li>themes/_config.yml 找到gitalk，配置如下样子<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: github账号 # GitHub repo owner</span><br><span class="line">  repo: BlogGitTalk # Repository name to store issues</span><br><span class="line">  client_id: GitHub OAuth授权申请下来的client_id # GitHub Application Client ID</span><br><span class="line">  client_secret: GitHub OAuth授权申请下来的client_secret # GitHub Application Client Secret</span><br><span class="line">  admin_user: github账号 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h4 id="集成Valine"><a href="#集成Valine" class="headerlink" title="集成Valine"></a>集成Valine</h4><ol>
<li>注册leancloud账号<a href="https://www.leancloud.cn/"></a></li>
<li>leancloud 创建应用</li>
<li>themes/_config.yml 找到valine，配置如下样子<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: leancloud 创建的应用AppID # Your leancloud application appid</span><br><span class="line">  appkey: leancloud 创建的应用appkey # Your leancloud application appkey</span><br><span class="line">  notify: false # Mail notifier</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: Just go go # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  guest_info: nick,mail,link # Custom comment header</span><br><span class="line">  pageSize: 10 # Pagination size</span><br><span class="line">  language: zh-cn # Language, available values: en, zh-cn</span><br><span class="line">  visitor: true # Article reading statistic</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line">  recordIP: false # Whether to record the commenter IP</span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br><span class="line">  #post_meta_order: 0</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h4 id="部署至Github"><a href="#部署至Github" class="headerlink" title="部署至Github"></a>部署至Github</h4><ul>
<li>打开blog根目录下的_config.yml配置,找到Deployment, 配置参考如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:github用户名/github用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<ul>
<li><p>安装hexo-deployer-git 部署插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署</p>
<ul>
<li>在根目录新建部署脚本deploy.sh，内容如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li>
<li><p>运行部署命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><ol>
<li>阿里云购买域名: <a href="https://oss.console.aliyun.com/"></a></li>
<li>获取github上博客项目域名的ip<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping github用户名.github.io</span><br></pre></td></tr></table></figure></li>
<li>阿里云平台域名绑定博客域名ip(第2步ping出来的ip)<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/3.png" alt=""></li>
</ol>
<hr>
<h4 id="版权配置"><a href="#版权配置" class="headerlink" title="版权配置"></a>版权配置</h4><ol>
<li>next/_config.yum 找到creative_commons</li>
<li>配置成如下样子：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="QQ交流平台："><a href="#QQ交流平台：" class="headerlink" title="QQ交流平台："></a>QQ交流平台：</h3><p>hexo next主题交流：1076692090</p>
<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul>
<li><a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">Hexo博客搭建之在文章中插入图片</a></li>
<li><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/">Hexo使用攻略-添加分类及标签</a></li>
<li><a href="https://www.cnblogs.com/alex-zen/p/11203544.html#%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8E%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87">Markdown必备-本地图片快速上传至图床</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/04/github-oauth.html">GitHub OAuth 第三方登录示例教程</a></li>
<li><a href="https://poplite.xyz/post/2018/05/03/how-to-enable-https-for-custom-domain-on-github-pages.html">Github Pages 开始为自定义域名提供 HTTPS 支持</a></li>
<li><a href="https://github.com/jsdelivr/jsdelivr#usage">JSdelivr 使用说明</a></li>
<li><a href="https://www.itrhx.com/2019/02/10/A18-free-cdn/">免费CDN：jsDelivr + Github</a></li>
</ul>
<hr>
<h3 id="特别致谢："><a href="#特别致谢：" class="headerlink" title="特别致谢："></a>特别致谢：</h3><ul>
<li>cxyxiaowu ：<a href="https://www.cxyxiaowu.com/6407.html">https://www.cxyxiaowu.com/6407.html</a></li>
<li>Lining Wei ：<a href="https://weilining.github.io/">https://weilining.github.io/</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>算法与数据结构-梳理汇总</title>
    <url>/2022/11/13/Algorithm-DataStruct/Algorithm-DataStruct01/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>算法与数据结构，重学起因</li>
<li>算法与数据结构-梳理汇总导图</li>
<li>学习心得</li>
</ul>
<h3 id="算法与数据结构，重学起因"><a href="#算法与数据结构，重学起因" class="headerlink" title="算法与数据结构，重学起因"></a>算法与数据结构，重学起因</h3><blockquote>
<p>起因：虽然在大学期间学习过算法，刚开始学习基础排序算法、基础数据结构还好，但到后面学习、快速排序、二分查找、双向链表、循环链表、各种树等，就开始顶不住了，觉得太复杂、太难就学不动了，导致学得挺差，现在也基本忘得差不多了。前端时间看到昊神分享的一篇算法学习文章，就接触到了波波老师的文章，提到算法也没有传说中的难，说得挺简单的，然后我就跑到慕课网找到了波波老师的课程【<a href="https://class.imooc.com/sc/105/learn">算法与数据结构体系课：覆盖 0~5 年工作面试所需</a>】，原价：￥ 1199 折后：￥ 999，贵竟然好评率 100%。心想：投资自己是最好的投资，就狠心放次血吧~</p>
</blockquote>
<span id="more"></span>
<h3 id="算法与数据结构-梳理汇总导图"><a href="#算法与数据结构-梳理汇总导图" class="headerlink" title="算法与数据结构-梳理汇总导图"></a>算法与数据结构-梳理汇总导图</h3><p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;%E7%AE%97%E6%B3%95.png" alt=""></p>
<h3 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h3><ol>
<li>学习一个知识：需消化成自己理解后的样子，然后再输出出来</li>
<li>学习一个知识：使用思维导图绘成一幅图。一来：让自己非常直观的看到知识点间的关系，二来：方便知识点的记忆，三来：未来根据图快速全面的回顾知识点。</li>
</ol>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote>
<p>感谢波波老师出的这干货课程，讲得通俗易懂，让我收获满满。好东西，推荐大家购买学习~</p>
</blockquote>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://class.imooc.com/sc/105/learn">算法与数据结构体系课：覆盖 0~5 年工作面试所需</a></li>
<li><a href="https://www.jianshu.com/p/d5dd618014f0">各种树的复杂度</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/136183284">BFS 的使用场景：层序遍历、最短路径问题</a></li>
<li><a href="https://blog.csdn.net/Hairy_Monsters/article/details/80154391">十种常见排序算法的思想、应用场景、C++代码实现及时间效率直观对比</a></li>
<li><a href="https://www.cnblogs.com/onepixel/p/7674659.html">十大经典排序算法（动图演示）</a></li>
<li><a href="https://www.cnblogs.com/QG-whz/p/5194627.html">数据结构图文解析系列</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>常用排序</tag>
        <tag>常用数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化测试-01：了解</title>
    <url>/2022/11/13/AutoTest/AutoTest01/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>了解测试内容分类</li>
<li>了解测试框架</li>
<li>相关视频教程</li>
</ul>
<span id="more"></span>
<h3 id="测试内容分类"><a href="#测试内容分类" class="headerlink" title="测试内容分类"></a>测试内容分类</h3><ul>
<li>从软件测试的实践过程看：单元测试、集成测试、确认测试、系统测试、验收测试</li>
<li>从软件测试的方法策略看：白盒测试、黑盒测试、灰盒测试</li>
<li>从软件测试的测试视角看：功能测试、性能测试、兼容性测试、安全测试、探索性测试</li>
<li>从软件测试的技术程度看：手工测试、自动化测试、测试开发</li>
</ul>
<h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><ul>
<li>Python/PHP/Java/C#/JavaScprit/Ruby + Selenium/Appium + 单元测试框架：开源功能自动化测试方案</li>
<li>Python + Macaca：阿里巴巴  自动化测试方案</li>
<li>JavaScript + TestCafe，DevExpress： 开源功能自动化测试方案</li>
<li>Python/Java/C#/JavaScprit/Ruby + Gauge： 一款开源的功能自动化测试方案</li>
<li>JavaScript + Postman：免费的Web接口功能自动化测试</li>
<li>Groovy + SoapUI：开源的Web接口功能自动化测试方案</li>
<li>更多<ul>
<li>Selenium：<a href="http://www.selenium.org.cn/category/use">web测试工具</a></li>
<li>Appium: web、原生、混合应用都能测试</li>
<li>JMeter：软件压测工具</li>
</ul>
</li>
</ul>
<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul>
<li><a href="https://www.51zxw.net/list.aspx?page=2&amp;cid=670">Appium自动化测试视频教程</a></li>
<li><a href="https://sutune.me/2018/04/15/appium/">Appium简介</a></li>
<li><a href="https://hllgithub.github.io/2018/09/09/Appium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/">Appium自动化测试介绍和使用说明</a></li>
<li><a href="http://www.selenium.org.cn/category/use">Selenium</a></li>
<li><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">Selenium + python 中文文档</a></li>
<li><a href="https://macacajs.github.io/zh/guide/#%E9%9B%86%E6%88%90%E5%92%8C%E8%9E%8D%E5%90%88">Macaca</a></li>
<li><a href="https://yq.aliyun.com/articles/398697">Macaca-iOS入门那些事</a></li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/36896449">一分钟了解自动化测试</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化测试-02：实践</title>
    <url>/2022/11/13/AutoTest/AutoTest02/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>环境搭建: Appium 环境、Android 环境、Python 环境、夜神模拟器</li>
<li>Android APP 测试 </li>
</ul>
<span id="more"></span>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>Appium 环境<ul>
<li>安装：Appium Desktop (Server) <a href="https://github.com/appium/appium-desktop/releases">下载地址</a></li>
<li>安装：Appium-Python-Client (Client) <a href="https://pypi.org/project/Appium-Python-Client/">教程</a></li>
</ul>
</li>
<li>Android 环境：<ul>
<li>下载安装JDK <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">下载地址</a></li>
<li>下载Android SDK <a href="https://developer.android.com/studio">下载地址</a></li>
<li>配置JAVA和Android环境变量 <a href="https://www.jianshu.com/p/a9e80bb782af">教程</a></li>
</ul>
</li>
<li>Python 环境：<ul>
<li>首先：<a href="https://www.python.org/downloads/">下载安装Python</a></li>
<li>此次：安装Appium Python库, 命令: pip install -U Appium-Python-Client—python <a href="https://pypi.org/project/Appium-Python-Client/">安装教程</a></li>
<li>最后：安装Python IDE <a href="https://www.jetbrains.com/pycharm/download/#section=windows">pycharm下载</a></li>
</ul>
</li>
<li>夜神模拟器：<a href="https://www.yeshen.com/">下载安装</a></li>
</ul>
<h3 id="Android-APP-测试"><a href="#Android-APP-测试" class="headerlink" title="Android APP 测试"></a>Android APP 测试</h3><ul>
<li><p>常用命令：</p>
<ul>
<li>获取联机设备名称：adb devices</li>
<li>与设备建立连接：adb connect ip:port (提示：使用adb devices 显示设备的ip和端口)</li>
<li><p>获取APP包名和启动名：adb shell dumpsys window  windows | findstr mFocusedApp (提示：使用模拟器或手机,打印需测试的APP 保持显示在当前屏幕后，在cmd中输入此命令回车，假如输出结果如下)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  adb shell dumpsys window  windows | findstr mFocusedApp</span><br><span class="line">mFocusedApp=AppWindowToken&#123;e84eb4f token=Token&#123;1260a29 ActivityRecord&#123;16e4bb0 u0 com.guide.custom/com.anyapps.Activity.AALaunch t12&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">包名：com.guide.custom</span><br><span class="line">启动Activity名：com.anyapps.Activity.AALaunch</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>调试步骤：</p>
<ol>
<li>启动夜神模拟器，获取相关信息<ul>
<li>获取设备号IP和Port: cmd-&gt;adb devices (如果不显示请检查环境配置)</li>
<li>与设备建立连接：adb connect 127.0.0.1:62001</li>
<li>系统版本：系统应用-&gt;设置-&gt;版本</li>
</ul>
</li>
<li>打开程序包(拿系统Setting打比方)，获取包名和启动Activity名：adb shell dumpsys window  windows | findstr</li>
<li>启动Appium，创建Server&lt;-&gt;会话<ul>
<li>Start Server -&gt; 点击搜索图标 -&gt; 根据1、2获取信息，填写对应信息，我的如下<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/20201025-001.png" alt=""></li>
<li>创建会话成功后，效果图如下：(此时可以获取原生布局元素了)<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/20201025224614.png" alt=""></li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul>
<li><a href="https://www.51zxw.net/list.aspx?page=2&amp;cid=670#!fenye=2">Appium自动化测试教程</a></li>
<li><a href="http://appium.io/docs/cn/writing-running-appium/caps/index.html">Appium 参数说明</a></li>
</ul>
<blockquote>
<p>最后：其他平台APP调试应该类似，以后再尝试吧 ~</p>
</blockquote>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-03：Web自动化测试【打开Chrome百度搜索Selenium】</title>
    <url>/2022/11/13/AutoTest/AutoTest03/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>环境准备</li>
<li>案例：打开Chrome百度搜索Selenium</li>
<li>原理总结</li>
</ul>
<span id="more"></span>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol>
<li>Win10</li>
<li>Chrome 84.0.4147.135</li>
<li>ChromeDriver 84.0.4147.30<ol>
<li>关闭Chrome更新，避免不停换驱动</li>
<li>下载Chrome对应版本ChromeDriver驱动<a href="https://chromedriver.chromium.org/downloads">下载地址</a></li>
<li>将ChromeDriver 放到Python安装目录下. 比如：C:\Users\Administrator\AppData\Local\Programs\Python\Python39</li>
</ol>
</li>
<li>Python 3.9.0</li>
<li>Selenium 3.141.0<br> 安装命令：pip install selenium (提示：如果执行报错，请检查python环境变量配置)</li>
</ol>
<h3 id="案例：打开Chrome百度搜索Selenium"><a href="#案例：打开Chrome百度搜索Selenium" class="headerlink" title="案例：打开Chrome百度搜索Selenium"></a>案例：打开Chrome百度搜索Selenium</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import  webdriver</span><br><span class="line"># 使用Chrome驱动</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"># 让浏览器全屏</span><br><span class="line">driver.maximize_window()</span><br><span class="line"># 打开百度</span><br><span class="line">driver.get(&quot;https://baidu.com&quot;)</span><br><span class="line"># 找到百度搜索框元素</span><br><span class="line">input = driver.find_element_by_id(&quot;kw&quot;)</span><br><span class="line"># 往输入框中输入搜索关键词&quot;selenium&quot;</span><br><span class="line">input.send_keys(&quot;selenium&quot;)</span><br><span class="line"># 点击百度一下按钮搜索</span><br><span class="line">search = driver.find_element_by_id(&quot;su&quot;)</span><br><span class="line">search.click()</span><br></pre></td></tr></table></figure>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>其实原理就是 Python 通过Selenium 调用浏览器驱动接口，然后驱动Driver接口操作Web中元素进行交互</p>
</blockquote>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h3><ul>
<li><a href="https://selenium-python-zh.readthedocs.io/en/latest/index.html">Selenium-Python中文文档</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-04：AppWeb自动化测试【打开App切换WebView登录】</title>
    <url>/2022/11/13/AutoTest/AutoTest04/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>环境准备</li>
<li>测试步骤</li>
<li>案例代码</li>
</ul>
<span id="more"></span>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol>
<li>NodeJS v12.13.1</li>
<li>JDK 1.8.0_191</li>
<li>Android SDK </li>
<li>Appium-Python-Client </li>
</ol>
<blockquote>
<p>具体教程请看: <a href="https://yanxuewen.cn/2020/10/22/AutoTest02/">自动化测试-02：实践</a></p>
</blockquote>
<h3 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h3><ol>
<li>AppWebView开启调试模式： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setWebContentsDebuggingEnabled(true);</span><br></pre></td></tr></table></figure></li>
<li>获取Android Chrome 版本： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell am start -a android.intent.action.VIEW -d  https://liulanmi.com/labs/core.html</span><br></pre></td></tr></table></figure></li>
<li>根据Android Chrome版本，下载对应ChromeDriver驱动 <a href="https://chromedriver.chromium.org/downloads">下载地址</a></li>
<li>将下载的ChromeDriver Copy 至 Appium 目录，比如我的Appium目录： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Appium\resources\app\node_modules\appium\node_modules\appium-chromedriver\chromedriver\win</span><br></pre></td></tr></table></figure></li>
<li>启动APP后并跳转App内嵌的WebView页面，使用Chrome获取WebView中的元素 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开Chrome </span><br><span class="line">地址栏输入：chrome://inspect</span><br></pre></td></tr></table></figure>
 如下图所示：<br> <img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/20201105212810.png" alt=""></li>
</ol>
<h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 案例：自动化测试-登录</span><br><span class="line"></span><br><span class="line">from appium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">desired_caps = &#123;&#125;</span><br><span class="line">desired_caps[&quot;platformName&quot;] = &quot;android&quot;</span><br><span class="line">desired_caps[&quot;platformVersion&quot;] = &quot;7.1.2&quot;</span><br><span class="line">desired_caps[&quot;deviceName&quot;] = &quot;127.0.0.1:62001&quot;</span><br><span class="line">desired_caps[&quot;appPackage&quot;] = &quot;com.guide.custom&quot;</span><br><span class="line">desired_caps[&quot;appActivity&quot;] = &quot;com.anyapps.Activity.AALaunch&quot;</span><br><span class="line">desired_caps[&quot;noReset&quot;] = &quot;true&quot;</span><br><span class="line">desired_caps[&quot;autoGrantPermissions&quot;] = &quot;true&quot;</span><br><span class="line">desired_caps[&#x27;chromeOptions&#x27;] = &#123;&quot;w3c&quot;:False&#125;</span><br><span class="line">desired_caps[&#x27;showChromedriverLog&#x27;] = True</span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(&#x27;http://localhost:4723/wd/hub&#x27;, desired_caps)</span><br><span class="line"></span><br><span class="line">view_context = &quot;WEBVIEW_com.guide.custom&quot;</span><br><span class="line">driver.switch_to.context(view_context)</span><br><span class="line">time.sleep(5)</span><br><span class="line">print(driver.current_context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取账号和密码元素，输入账号密码</span><br><span class="line">inputAccount = driver.find_element_by_id(&quot;account&quot;)</span><br><span class="line">inputAccount.send_keys(&#x27;186xxxxxxx&#x27;)</span><br><span class="line">inputPassword = driver.find_element_by_id(&quot;password&quot;)</span><br><span class="line">inputPassword.send_keys(&#x27;123456&#x27;)</span><br><span class="line"># 获取登录元素，点击登录</span><br><span class="line">loginBtn = driver.find_element_by_class_name(&#x27;confirmDisable&#x27;)</span><br><span class="line">loginBtn.click()</span><br></pre></td></tr></table></figure>
<h3 id="Appium-调试App-原理图"><a href="#Appium-调试App-原理图" class="headerlink" title="Appium 调试App 原理图"></a>Appium 调试App 原理图</h3><p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/QQ%E6%88%AA%E5%9B%BE20201105213544.png" alt=""></p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h3><ul>
<li><a href="https://selenium-python-zh.readthedocs.io/en/latest/index.html">Selenium-Python中文文档</a></li>
<li><a href="https://github.com/appium/appium/issues/13306">Fail to locate an web element using “findElement” on Android</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Selenium</tag>
        <tag>Appnium</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Jenkins之win10环境</title>
    <url>/2022/11/13/CI&amp;CD/%E6%90%AD%E5%BB%BAJenkins%E4%B9%8Bwin10%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>由于 jenkins 是来解放我们的工作，所以我们希望他够稳定，不至于经常去折腾浪费时间，所以选择 LTS 稳定版本。我选择的版本是：<strong>Jenkins 2.361.3 LTS windows，接下来就看我下面提供的官方安装教程即可。</strong></p>
<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><ul>
<li>下载地址：<a href="https://www.jenkins.io/download/">https://www.jenkins.io/download/</a></li>
<li>官方安装教程：<a href="https://www.jenkins.io/doc/book/installing/windows/">https://www.jenkins.io/doc/book/installing/windows/</a></li>
</ul>
<h1 id="安装过程遇到的问题"><a href="#安装过程遇到的问题" class="headerlink" title="安装过程遇到的问题"></a>安装过程遇到的问题</h1><p>对于遇到这些问题的同学，希望能给你提供一份帮助，避免被麻烦苦恼，如果我遇到的问题不包含在以下内容中，请直接 Google 一般能找到解决办法</p>
<h2 id="问题-1：验证失败无法下一步"><a href="#问题-1：验证失败无法下一步" class="headerlink" title="问题 1：验证失败无法下一步"></a>问题 1：验证失败无法下一步</h2><ul>
<li>问题现状<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145532.png" alt=""></li>
<li>解决办法：<br>控制面板 → 管理工具 → 本地安全策略 → 本地策略 → 用户权限分配 → 作为服务登录<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145605.png" alt=""><br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145628.png" alt=""><br>选中它然后右键属性，弹出如下窗口：添加安装过程的填写的用户信息到列表中，最后点确定就可以继续安装了<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145644.png" alt=""></li>
</ul>
<span id="more"></span>
<h2 id="问题-2：选择-jdk-目录后弹框提示无效？"><a href="#问题-2：选择-jdk-目录后弹框提示无效？" class="headerlink" title="问题 2：选择 jdk 目录后弹框提示无效？"></a>问题 2：选择 jdk 目录后弹框提示无效？</h2><ul>
<li>解决办法：看提示 jekins 支持的 jdk 版本，选择对应的版本即可</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145700.png" alt=""></p>
<blockquote>
<p>提示：到这个界面说明你的 jenkins 安装完毕，切记别急着点进去(否则切换目录又需要安装插件搞一遍，挺久的完全是浪费时间)，Jenkins 工作目录默认是安装在 C 盘的，此时你可能跟我一样一样不想让 C 盘爆掉，那么你就跟着我把 Jenkins 的默认 workspace 切换至其他盘符。如果你无需切换 Jenkins 工作空间的话，可以跳过切换 workspace 部分内容</p>
</blockquote>
<h1 id="切换-Jenkins-默认工作空间-和-防止-job-运行控制台中文显示乱码问题"><a href="#切换-Jenkins-默认工作空间-和-防止-job-运行控制台中文显示乱码问题" class="headerlink" title="切换 Jenkins 默认工作空间 和 防止 job 运行控制台中文显示乱码问题"></a>切换 Jenkins 默认工作空间 和 防止 job 运行控制台中文显示乱码问题</h1><ul>
<li>找到安装目录下的 jenkins.xml 文件，然后修改如下内容<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145722.png" alt=""><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">env</span> <span class="attr">name</span>=<span class="string">&quot;JENKINS_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;E:\Program Files\Jenkins&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">env</span> <span class="attr">name</span>=<span class="string">&quot;JAVA_TOOL_OPTIONS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-Dsun.jnu.encoding=UTF-8 -Dfile.encoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：第一句切换工作目录，第二句：避免 job 运行控制台中文显示乱码问题，所以直接定死 UTF-8 格式</p>
</blockquote>
</li>
</ul>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>进入插件安装页面：Dashboard→Manage Jekins → 插件管理</p>
<ul>
<li><strong><a href="https://plugins.jenkins.io/publish-over-ssh">Publish Over SSH</a>：将代码传送至服务器</strong></li>
<li>Extended E-mail Notification</li>
</ul>
<h1 id="配置-Configure-System"><a href="#配置-Configure-System" class="headerlink" title="配置 Configure System"></a>配置 Configure System</h1><h2 id="配置：Location"><a href="#配置：Location" class="headerlink" title="配置：Location"></a>配置：Location</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145736.png" alt=""></p>
<h2 id="配置：全局属性"><a href="#配置：全局属性" class="headerlink" title="配置：全局属性"></a>配置：全局属性</h2><p>添加环境变量配置，方便其他地方复用信息避免重复配置，自己想配多少就点添加即可</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145745.png" alt=""></p>
<h2 id="配置：Shell"><a href="#配置：Shell" class="headerlink" title="配置：Shell"></a>配置：Shell</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145756.png" alt=""></p>
<blockquote>
<p>提示：选择 git 安装目录下的 sh.exe，方便在 job 配置执行 shell 命令</p>
</blockquote>
<h2 id="配置：Extended-E-mall-Notification"><a href="#配置：Extended-E-mall-Notification" class="headerlink" title="配置：Extended E-mall Notification"></a>配置：Extended E-mall Notification</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145826.jpg" alt=""></p>
<p>补充说明：</p>
<ul>
<li>SMTP Username：填写你的 qq 邮箱</li>
<li>SMTP Password ：填写 qq 邮箱的授权码，由于我的已开启。如果你的未开启应该就是显示已关闭，点击开启然后按提示获取授权码即可<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145808.png" alt=""></li>
</ul>
<h2 id="Publish-over-SSH"><a href="#Publish-over-SSH" class="headerlink" title="Publish over SSH"></a>Publish over SSH</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145855.png" alt=""></p>
<h1 id="配置-Global-Tool-Configuration"><a href="#配置-Global-Tool-Configuration" class="headerlink" title="配置 Global Tool Configuration"></a>配置 Global Tool Configuration</h1><h2 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145907.png" alt=""></p>
<h1 id="配置：Credentials"><a href="#配置：Credentials" class="headerlink" title="配置：Credentials"></a>配置：Credentials</h1><p>进入：Dashboard→Manage Jenkins→Credentials→System→<strong>Global credentials (unrestricted)，</strong>添加凭证</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145921.png" alt=""></p>
<p>说明：用于 Jenkins 关联 git 账号 clone 代码，private key key 中填私钥 key。如果你还没有密钥对，请使用<code>ssh-keygen</code> 工具生成。相关文章：*<strong>*<a href="https://www.ssh.com/academy/ssh/keygen#ssh-keys-and-public-key-authentication">Creating an SSH Key Pair for User Authentication</a>**</strong></p>
<h1 id="创建-Job"><a href="#创建-Job" class="headerlink" title="创建 Job"></a>创建 Job</h1><p>创建 Job：Dashboard→ 新增 Item</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145933.png" alt=""></p>
<h2 id="配置：General"><a href="#配置：General" class="headerlink" title="配置：General"></a>配置：General</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145942.png" alt=""></p>
<h2 id="配置：源码管理"><a href="#配置：源码管理" class="headerlink" title="配置：源码管理"></a>配置：源码管理</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145951.png" alt=""></p>
<h2 id="配置：Build-Steps"><a href="#配置：Build-Steps" class="headerlink" title="配置：Build Steps"></a>配置：Build Steps</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150007.png" alt=""></p>
<h2 id="配置：构建后操作"><a href="#配置：构建后操作" class="headerlink" title="配置：构建后操作"></a>配置：构建后操作</h2><ul>
<li>上传至服务器</li>
<li>发送邮件</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150117.png" alt=""></p>
<h2 id="配置：Send-build-artifacts-over-SSH"><a href="#配置：Send-build-artifacts-over-SSH" class="headerlink" title="配置：Send build artifacts over SSH"></a>配置：Send build artifacts over SSH</h2><blockquote>
<p>说明：上传打包后结果至服务器</p>
</blockquote>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150133.png" alt=""></p>
<h2 id="配置：Editable-Email-Notifacation"><a href="#配置：Editable-Email-Notifacation" class="headerlink" title="配置：Editable Email Notifacation"></a>配置：Editable Email Notifacation</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150151.jpg" alt=""></p>
<blockquote>
<p>说明：触发器规则、邮件接收人等可以根据自己的需求配置，为了方便提供一份邮件模板给大家</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var=&quot;JOB_NAME&quot;&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">topmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            本邮件由系统自动发出，无需回复！<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            各位同事，大家好，以下为$&#123;PROJECT_NAME &#125;项目构建信息<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#CC0000&quot;</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称 ： $&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号 ： 第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因： $&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建状态： $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;console&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;ws&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>报告  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;allure<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>失败用例<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line">$FAILED_TESTS<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>最近提交<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">$&#123;CHANGES_SINCE_LAST_SUCCESS, reverse=true, format=&quot;%c&quot;, changesFormat=&quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span>%d [%a] %m<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">详细提交: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;changes&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="更多问题"><a href="#更多问题" class="headerlink" title="更多问题"></a>更多问题</h1><h2 id="问题：Extended-E-mail-Notification-无-SMTP-username-和-SMTP-Passord-选项"><a href="#问题：Extended-E-mail-Notification-无-SMTP-username-和-SMTP-Passord-选项" class="headerlink" title="问题：Extended E-mail Notification 无 SMTP username 和 SMTP Passord 选项"></a>问题：Extended E-mail Notification 无 SMTP username 和 SMTP Passord 选项</h2><p>解决办法：卸载安装好的 Extended E-mail Notification 插件，替换成 2.72 版本就显示出来了。<a href="https://pan.baidu.com/s/1OkVWR09rGHUqvpiHQ0yWAQ?pwd=TXYx">2.72 下载</a>，提取码: TXYx</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150213.png" alt=""></p>
<h2 id="问题：Error-sending-to-the-following-VALID-addresses-xxx-qq-com"><a href="#问题：Error-sending-to-the-following-VALID-addresses-xxx-qq-com" class="headerlink" title="问题：Error sending to the following VALID addresses: xxx@qq.com"></a>问题：Error sending to the following VALID addresses: <a href="mailto:xxx@qq.com">xxx@qq.com</a></h2><p>SendFailedException message: 502 Invalid input from 61.140.27.8 to <a href="http://newxmesmtplogicsvrszb6.qq.com/">newxmesmtplogicsvrszb6.qq.com</a></p>
<p>解决方法：将 job 任务配置中的 Editable Email Notification 栏目中的 Project From 清空掉，然后应用保存。再次点击构建即可触发邮件了</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150226.png" alt=""></p>
<h2 id="问题：shell-执行-tar-解压操作报错，提示：无法-Remove-prefix"><a href="#问题：shell-执行-tar-解压操作报错，提示：无法-Remove-prefix" class="headerlink" title="问题：shell 执行 tar 解压操作报错，提示：无法 Remove prefix"></a>问题：shell 执行 tar 解压操作报错，提示：无法 Remove prefix</h2><p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf dist.tar.gz</span><br><span class="line"><span class="comment"># 特别注意：Remove prefix 是相对的根目录[/]与当前目录[/dist/kh]的部分，而不是打出来的dist里面的需要移除的公共前缀路径</span></span><br><span class="line"><span class="built_in">cd</span> dist/kh</span><br><span class="line">tar -zcvf dist.tar.gz *</span><br></pre></td></tr></table></figure>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150241.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>建议不要用 windows 来打 jenkins 环境，因为坑真的很多</li>
</ul>
<blockquote>
<p>由于我的 jekins 是局域网环境，所以我就没有配置 Jenkins Hook（就是 git 代码提交后 jenkins 收到推送通知后自动开始执行打包操作，网上搜索一下有很多相关教程的）</p>
</blockquote>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://www.jenkins.io/doc/book/installing/windows/#invalid-service-logon-credentials">https://www.jenkins.io/doc/book/installing/windows/#invalid-service-logon-credentials</a></li>
<li><a href="https://phoenixnap.com/kb/change-jenkins-home-directory">https://phoenixnap.com/kb/change-jenkins-home-directory</a></li>
<li>*<strong>*<a href="https://blog.csdn.net/qq_38093657/article/details/90054843">新版 Jenkins 修改默认工作空间路径 workspace，控制台乱码修复</a>**</strong></li>
<li>*<strong>*<a href="https://www.cnblogs.com/zy7y/p/13452077.html">Jenkins(Extended E-mail Notification)邮箱配置正确但是并没有发送邮件</a>**</strong></li>
<li>*<strong>*<a href="https://blog.csdn.net/qq_31442743/article/details/111639187">jenkens 配置邮件发送踩坑</a>**</strong></li>
<li>*<strong>*<a href="https://blog.csdn.net/bbsyi/article/details/112301937">Jenkins 自动部署前端项目</a>**</strong></li>
</ul>
<hr>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>CI&amp;CD</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>全栈学习-开篇-001</title>
    <url>/2022/11/13/FullStack/LearningFullStack01/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>技术栈介绍</li>
<li>环境准备</li>
</ul>
<span id="more"></span>
<blockquote>
<p>起因：在网上搜索了挺久，都没找到让我很满意的项目学习，也买了好几个付费项目，看了一部分就会发现看不下去，发现很多问题，虽然说能学到一部分东西，但感觉这些项目只是为了快速赚钱搞的，项目结构不清晰、缺少项目相关的介绍文档、前后端项目代码不分离，代码也写的非常临时和随意等等，可能我要求过高了。我如果用这种方式去做一个正式商业化的项目，用这种态度搞出来的东西肯定做不大。说实话我以前做东西也很随意，但自从我读了《程序员修炼之道》这本书后(若想成为一名真正的程序员，一定要去好好阅读这边书，去吸收点灵气)，让我受益匪浅。要想成为一个好的工程师，就要约束好自己，做事情不要太随意，得有点工匠精神，像匠人一样打造自己的武器，一段时间后你会发现自己层次上了一个阶梯。为了提升下自己全栈方便的能力，选择了我慕客上购买的一个小项目，这个小项目很适合入手，所以就拿这个项目(简版-慕客商城)开启全栈学习之旅。</p>
</blockquote>
<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ol>
<li><p>前端</p>
<ul>
<li>Vue - 2.2.6</li>
<li>vue-cookie - 1.1.4</li>
<li>vue-resource - 1.3.1</li>
<li>vue-router - 2.3.1</li>
<li>vuex - 2.3.1</li>
</ul>
</li>
<li><p>后端</p>
<ul>
<li>Node.js - 12.13.1</li>
<li>Express - 4.14.1</li>
<li>Mongoose - 5.0.1</li>
<li>Mongodb - 4.2.8</li>
</ul>
</li>
</ol>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>WebStorm - 2020.1 (方便后端调试，对比VScode、SublimeText、HBuildX 这IDE功能更强大)</li>
<li>XShell6 、XFTP6 </li>
<li>Navicat Premium 12 (低版本不支持连mongodb，所以请选择高一点的版本)</li>
</ul>
<blockquote>
<p>未完待续…</p>
</blockquote>
]]></content>
      <categories>
        <category>全栈</category>
      </categories>
      <tags>
        <tag>全栈</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>结束《皇室战争》之旅</title>
    <url>/2022/11/13/Game/Game01/</url>
    <content><![CDATA[<h3 id="一款又爱又恨的游戏"><a href="#一款又爱又恨的游戏" class="headerlink" title="一款又爱又恨的游戏"></a>一款又爱又恨的游戏</h3><ul>
<li>爱：<ol>
<li>这游戏UI和画质都做得非常精美，原画的细节做得非常逼真</li>
<li>3分钟一场战斗，游戏时间设置的完美</li>
<li>操作简单，容易上手</li>
</ol>
</li>
<li>恨:<ol>
<li>3分钟一场战斗，导致你蹲个坑都可以玩几局，有时输能让你蹲出半个多小时，最后起来酸的不行</li>
<li>部落战匹配规则做得不好，分段6K左右自己卡等只有10级，结果给你匹配满级的来对付你，你技术再好也是以卵击石</li>
<li>商店不断推出活动引诱你充值，看到你要啥卡牌、是没有金币还是没有宝石，就给你推对应的活动</li>
<li>影响与家人的关系，有时候连输好几把，家人跟我聊天，我说话很冲，导致跟对方吵起来</li>
<li>不间断活动、每天对战，让你控制不住不玩，不停想上分，影响工作和学习</li>
</ol>
</li>
</ul>
<span id="more"></span>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ol>
<li>对方出的每张卡都记住，等全部8张卡出完，再想怎么用当前的卡组对付它</li>
<li>未知对方卡组，尽量使用小费过牌，等待摸清对方卡组再出手</li>
<li>排兵布阵不能全部放到一块，要分散放，不然被对面一个法术全部打中</li>
</ol>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote>
<p>要升级的卡组已升满，没有玩下去的欲望了，本想这个赛季冲个6500+，结果没多少时间打，中午打了一个多小时，结果卡住6150上不去了，那就让他停留在6150结束这段旅程。接下来开启新的篇章，好好学习、好好工作，这样才能有好的未来</p>
</blockquote>
<p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/222.png" alt=""></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>皇室战争</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 与 JS 之间Gzip互通</title>
    <url>/2022/11/13/JS/JS01/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>JS 压缩 Gzip demo</li>
<li>JS 压缩 Gzip + base64 demo</li>
<li>JS 解压 CSharp 的 Gzip demo</li>
<li>JS 解压 CSharp 的 base64 + gzip</li>
<li>CSharp 压缩 Gzip demo</li>
<li>CSharp 压缩 Gzip + base64 demo</li>
<li>CSharp 解压 JS 的 Gzip demo</li>
<li>CSharp 解压 JS 的 base64 + gzip</li>
<li>Base64 encode 和 decode </li>
</ul>
<h3 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h3><p><a href="https://github.com/aa4790139/GzipSample">https://github.com/aa4790139/GzipSample</a></p>
<span id="more"></span>
<h3 id="GZip-文件结构图"><a href="#GZip-文件结构图" class="headerlink" title="GZip 文件结构图"></a>GZip 文件结构图</h3><p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210115204550.jpg" alt=""></p>
<!--more-->
<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul>
<li><a href="https://stackabuse.com/encoding-and-decoding-base64-strings-in-node-js/">Encoding and Decoding Base64 Strings in Node.js</a></li>
<li><a href="https://zh.wikipedia.org/wiki/DEFLATE">DEFLATE</a></li>
<li><a href="https://stackoverflow.com/questions/246801/how-can-you-encode-a-string-to-base64-in-javascript">How can you encode a string to Base64 in JavaScript?</a></li>
<li><a href="https://stackoverflow.com/questions/3195865/converting-byte-array-to-string-in-javascript">Converting byte array to string in javascript</a></li>
<li><a href="https://www.jianshu.com/p/c5df0156b229">Array.prototype.slice.call()方法详解</a></li>
<li><a href="https://stackoverflow.com/questions/7056925/how-does-array-prototype-slice-call-work">how does Array.prototype.slice.call() work?
</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators">JS按位操作符</a></li>
<li><a href="https://www.iditect.com/how-to/58717282.html">Remove trailing zeros from byte[]</a></li>
<li><a href="https://stackoverflow.com/questions/17191945/conversion-between-utf-8-arraybuffer-and-string">Conversion between UTF-8 ArrayBuffer and String</a></li>
<li><a href="https://tool.oschina.net/commons?type=4">ASCLL对照表</a></li>
<li><a href="https://blog.csdn.net/yc0188/article/details/4155168">GZIP文件格式简介</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>压缩</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Gzip</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>对称加密和非对称加密的应用</title>
    <url>/2022/11/13/JS/JS02/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>什么是对称加密</li>
<li>对称加密demo</li>
<li>什么是非对称加密</li>
<li>非对称加密demo</li>
<li>对称加密与非对称加密组合使用</li>
<li>介绍一套可行的混合加密方案，怎么应用到接口数据加密中</li>
<li>Demo源码工程</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h3 id="什么是对称加密"><a href="#什么是对称加密" class="headerlink" title="什么是对称加密"></a>什么是对称加密</h3><ul>
<li>定义：<blockquote>
<p>对称密钥算法（英语：Symmetric-key algorithm）又称为对称加密、私钥加密、共享密钥加密，是密码学中的一类加密算法。这类算法在加密和解密时使用相同的密钥，或是使用两个可以简单地相互推算的密钥</p>
</blockquote>
</li>
<li>优点：<blockquote>
<p>算法公开、计算量小、加密速度快、加密效率高，适合对大量数据进行加密的场景。 比如 HLS（HTTP Live Streaming）普通加密场景中，一般会使用 AES-128 对称加密算法对 TS 切片进行加密，以保证多媒体资源安全</p>
</blockquote>
</li>
<li><p>缺点：</p>
<blockquote>
<p>安全性不高，只要拿到秘钥就可以把数据解开</p>
</blockquote>
</li>
<li><p>对称加密的过程：</p>
<blockquote>
<p>发送方使用密钥将明文数据加密成密文，然后发送出去，接收方收到密文后，使用同一个密钥将密文解密成明文读取<br>  <img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/QQ%E5%9B%BE%E7%89%8720201227142444.png" alt=""></p>
</blockquote>
</li>
<li><p>个人理解：</p>
<blockquote>
<p>对称加密就好比一把锁的钥匙，一个密码箱存了东西，如果你有钥匙就可以把密码箱里面的宝贝取走</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="对称加密demo"><a href="#对称加密demo" class="headerlink" title="对称加密demo"></a>对称加密demo</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.key = CryptoJS.enc.Utf8.parse(&quot;0123456789abcdef&quot;);</span><br><span class="line">this.iv = CryptoJS.enc.Utf8.parse(&quot;abcdef0123456789&quot;);</span><br><span class="line">/**</span><br><span class="line">* AES 加密</span><br><span class="line">* @param iv</span><br><span class="line">* @param key</span><br><span class="line">* @param content 加密数据</span><br><span class="line">* @returns &#123;string&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__aesEncrypt(iv, key, content) &#123;</span><br><span class="line">    let text = CryptoJS.enc.Utf8.parse(JSON.stringify(content));</span><br><span class="line">    let encrypted = CryptoJS.AES.encrypt(text, key,</span><br><span class="line">        &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* AES 解密</span><br><span class="line">* @param iv</span><br><span class="line">* @param key</span><br><span class="line">* @param content  解密数据</span><br><span class="line">* @returns &#123;string&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__aesDecrypt(iv, key, content) &#123;</span><br><span class="line">    let decrypt = CryptoJS.AES.decrypt(content, key, &#123;</span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">    &#125;);</span><br><span class="line">    let decryptText = decrypt.toString(CryptoJS.enc.Utf8);</span><br><span class="line">    return decryptText.replace(/\&quot;/g, &quot;&quot;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="什么是非对称加密"><a href="#什么是非对称加密" class="headerlink" title="什么是非对称加密"></a>什么是非对称加密</h3><ul>
<li><p>定义：</p>
<blockquote>
<p>非对称加密算法需要两个密钥：公开密钥（publickey：简称公钥）和私有密钥（privatekey：简称私钥）。公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。 因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法</p>
</blockquote>
</li>
<li><p>优点：</p>
<blockquote>
<p>安全性更高，公钥是公开的，私钥是自己保存的，不需要将私钥提供给别人</p>
</blockquote>
</li>
<li><p>缺点</p>
<blockquote>
<p>加解密速度慢，只适合应对小数据加解密</p>
</blockquote>
</li>
<li><p>对称加密的过程：<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/QQ%E6%88%AA%E5%9B%BE20201227142658.png" alt=""></p>
</li>
</ul>
<ul>
<li><p>个人理解</p>
<blockquote>
<p>非对称加密：公钥就好比未锁的密码箱，只能存东西进去然后锁住。秘钥就好比密码箱的钥匙，可以打开秘密箱然后把里面的宝贝取走</p>
</blockquote>
</li>
<li><p>非对称加密demo</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.rsaEncryptor = new JSEncrypt();</span><br><span class="line">this.rsaEncryptor.setPublicKey(this.rsa_pub_key);</span><br><span class="line">this.rsaDecryptor = new JSEncrypt();</span><br><span class="line">this.rsaDecryptor.setPrivateKey(this.rsa_pri_key);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* RSA 加密</span><br><span class="line">* @param content</span><br><span class="line">* @returns &#123;CipherParams|PromiseLike&lt;ArrayBuffer&gt;&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__rsaEncrypt(content) &#123;</span><br><span class="line">    return this.rsaEncryptor.encrypt(content);</span><br><span class="line">&#125;,</span><br><span class="line">/**</span><br><span class="line">* RSA 解密</span><br><span class="line">* @param content</span><br><span class="line">* @returns &#123;WordArray|PromiseLike&lt;ArrayBuffer&gt;&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__rsaDecrypt(content) &#123;</span><br><span class="line">    return this.rsaDecryptor.decrypt(content);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="对称加密与非对称加密组合使用"><a href="#对称加密与非对称加密组合使用" class="headerlink" title="对称加密与非对称加密组合使用"></a>对称加密与非对称加密组合使用</h3><blockquote>
<p>现在对称加密和非对称加密的缺点我们都知道了，那就结合对称加密和非对称加密的优点来个demo，思路：针对小数据对称加密的iv和key，采用非对称加密；针对大数据data采用对称加密。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 混合加密</span><br><span class="line">* @param iv</span><br><span class="line">* @param key</span><br><span class="line">* @param content</span><br><span class="line">* @returns &#123;&#123;data: string, iv: (CipherParams|PromiseLike&lt;ArrayBuffer&gt;), key: (CipherParams|PromiseLike&lt;ArrayBuffer&gt;)&#125;&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__hybirdEncrypt(iv, key, content) &#123;</span><br><span class="line">    const aesEncryptData = this.__aesEncrypt(iv, key, content);</span><br><span class="line">    const rsaEncryptIv = this.__rsaEncrypt(iv);</span><br><span class="line">    const rsaEncryptKey = this.__rsaEncrypt(key);</span><br><span class="line">    return &#123;</span><br><span class="line">        iv: rsaEncryptIv,</span><br><span class="line">        key: rsaEncryptKey,</span><br><span class="line">        data: aesEncryptData,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 混合解密</span><br><span class="line">* @param encryptInfo</span><br><span class="line">* @returns &#123;string&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__hybirdDecrypt(encryptInfo) &#123;</span><br><span class="line">    const iv = this.rsaDecryptor.decrypt(encryptInfo.iv);</span><br><span class="line">    const key = this.rsaDecryptor.decrypt(encryptInfo.key);</span><br><span class="line">    const data = encryptInfo.data;</span><br><span class="line">    return this.__aesDecrypt(iv, key, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="介绍一套可行混合加密方案，怎么应用到接口数据加密中。流程图如下："><a href="#介绍一套可行混合加密方案，怎么应用到接口数据加密中。流程图如下：" class="headerlink" title="介绍一套可行混合加密方案，怎么应用到接口数据加密中。流程图如下："></a>介绍一套可行混合加密方案，怎么应用到接口数据加密中。流程图如下：</h3><ul>
<li>思路如下：<ul>
<li>第1步：创建一套RSA 公私钥，公钥前端拿着，私钥服务端拿着</li>
<li>第2步：前端为每一个网络请求生成RequestID</li>
<li>第3步：客户端生成AES Key，然后将RequestID 作为Key,AES Key 作为Value 存内存</li>
<li>第4步：客户端用生成的AES Key 加密请求数据Request Data，用RSA公钥对AES Key进行加密，同时把requestID、加密数据、加密AES Key 发送给服务端</li>
<li>第5步：服务端用RSA私钥解密被加密的AES Key，然后再用解开的AES Key 对RequestData数据进行解密</li>
<li>第6步：服务端用AES Key对响应数据ResposneData加密+RequestID、返回给前端</li>
<li>第7步：前端根据服务端返回的RequestID 取出内存的AES key, 用AES key 解密Resposne Data数据，用完后删除内存RequestID 的AES key 数据。</li>
<li>最后：前端每次发送请求都创建AES Key 去加密数据，收到服务端响应数据解密用完后，就删除掉内存中的AES Key数据，如此循环就用一套RSA公私钥解决混合加密问题</li>
</ul>
</li>
<li>流程图：<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86%E6%96%B9%E6%A1%88%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt=""></li>
</ul>
<hr>
<h3 id="Demo源码工程："><a href="#Demo源码工程：" class="headerlink" title="Demo源码工程："></a>Demo源码工程：</h3><ul>
<li>访问地址：<a href="https://github.com/aa4790139/encrypt_decrypt_sample">https://github.com/aa4790139/encrypt_decrypt_sample</a></li>
</ul>
<h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><blockquote>
<p>由于对称加密DES安全性已不太强，所以就选择了替代品AES。非常感谢阿宝哥提供的<a href="https://mp.weixin.qq.com/s/i_Clg5kmTBwcFoSUNO-naQ">玩转混合加密</a>文章，讲得通俗易懂，让我受益匪浅。最后阿宝哥提到把AES key 存放内存容易让他人搞到AES Key。所以我就去了解Web如何防调试、代<br>码怎么混淆等，下一篇：<a href="https://yanxuewen.cn/2020/12/27/Web01/">Web如何防调试</a></p>
</blockquote>
<hr>
<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/i_Clg5kmTBwcFoSUNO-naQ">阿宝哥-玩转混合加密</a></li>
</ul>
<hr>
<h3 id="更多相关资料："><a href="#更多相关资料：" class="headerlink" title="更多相关资料："></a>更多相关资料：</h3><ul>
<li><a href="https://www.jianshu.com/p/c44a8a1b7c38">DES加密算法原理</a></li>
<li><a href="https://www.cxyxiaowu.com/1478.html">算法科普：神秘的 DES 加密算法</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>加密</category>
      </categories>
      <tags>
        <tag>对称加密</tag>
        <tag>非对称加密</tag>
        <tag>AES</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS-跨域实战</title>
    <url>/2022/11/13/JS/JS03/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>前端需要做什么?</li>
<li>后端需要怎么配置?</li>
</ul>
<blockquote>
<p>由于浏览器的同源安全策略，作为前端开发你使用API调用接口必定会碰到跨域问题，网上太多的文章，大部分都是讲得不太清楚，让你看得特别懵逼，让你可能会做出以下愚蠢行为：跨域配置写到前端的header中、Nginx 跨域配置到Web节点中、瞎填Access-Control-Allow-Headers中的值等等，会导致怎么配置都不对，令你自己发狂。经验提醒：不要急着瞎改瞎试，看完理论相关文章后再尝试，然后静下心来思考流程是怎么运转的，用这样的方式很快就会配对了。以下是我成功跨域配置，希望给你提供一点帮助。</p>
</blockquote>
<span id="more"></span>
<hr>
<h3 id="前端需要做什么"><a href="#前端需要做什么" class="headerlink" title="前端需要做什么?"></a>前端需要做什么?</h3><blockquote>
<p>请求时使用到的header字段梳理并告知后端<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210126175710.png" alt=""></p>
</blockquote>
<hr>
<h3 id="后端需要怎么配置"><a href="#后端需要怎么配置" class="headerlink" title="后端需要怎么配置?"></a>后端需要怎么配置?</h3><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><blockquote>
<p>注意：针对API 服务配置跨域，而不是Web服务</p>
<ul>
<li>疑问1：为啥要配置nginx,因为请求需要转换，所以需要配置</li>
<li>注意：Access-Control-Allow-Origin <em>，必须加在Nginx层，否则请求不会转换至api server 层，所以api server 层的Access-Control-Allow-Origin </em> 可以去掉，否则会报：<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210126211841.png" alt=""></li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /secret-http-api/ &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:3001/;</span><br><span class="line">            proxy_read_timeout 240s;</span><br><span class="line">            add_header Access-Control-Allow-Origin *;</span><br><span class="line">            add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">            add_header Access-Control-Allow-Headers &#x27;Content-Type,Authorization,Content-Encoding,Accept-Encoding&#x27;;</span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                return 204;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="API-Server-Nodejs"><a href="#API-Server-Nodejs" class="headerlink" title="API Server (Nodejs)"></a>API Server (Nodejs)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        app.use(function (req, res, next) &#123;</span><br><span class="line">    if (req.path !== &#x27;/&#x27; &amp;&amp; !req.path.includes(&#x27;.&#x27;)) &#123;</span><br><span class="line">        res.set(&#123;</span><br><span class="line">            /* 允许后端发送cookie*/</span><br><span class="line">            // &#x27;Access-Control-Allow-Credentials&#x27;: true,</span><br><span class="line">            /*任意域名都可以访问,或者基于我请求头里面的域*/</span><br><span class="line">            // &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27;,</span><br><span class="line">            /*允许请求头字段*/</span><br><span class="line">            // &#x27;Access-Control-Allow-Headers&#x27;: &#x27;Accept,Content-Encoding,Content-Type,Accept-Encoding&#x27;,</span><br><span class="line">            /*允许请求方式*/</span><br><span class="line">            &#x27;Access-Control-Allow-Methods&#x27;: &#x27;POST,GET,OPTIONS&#x27;,</span><br><span class="line">            /*预检成功后相同请求无需预检的有效时间(单位：秒)*/</span><br><span class="line">            &#x27;Access-Control-Max-Age&#x27;: 3600,</span><br><span class="line">            /*默认与允许的文本格式json和编码格式*/</span><br><span class="line">            &#x27;Content-Type&#x27;: &#x27;text/plain; charset=utf-8&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    req.method === &#x27;OPTIONS&#x27; ? res.status(204).end() : next()</span><br><span class="line">&#125;);     </span><br></pre></td></tr></table></figure>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E9%9C%80%E8%A6%81_cors_%EF%BC%9F">跨源资源共享</a></li>
<li><a href="https://segmentfault.com/a/1190000022512695">Node设置cors,后端解决跨域问题</a></li>
<li><a href="https://segmentfault.com/a/1190000009971254">cors跨域之简单请求与预检请求（发送请求头带令牌token）</a></li>
<li><a href="https://blog.yiguochen.com/options-cors.html">OPTIONS 方法在跨域请求（CORS）中的应用</a></li>
<li><a href="https://segmentfault.com/a/1190000012550346">Nginx配置跨域请求 Access-Control-Allow-Origin *</a></li>
</ul>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Vue.js</tag>
        <tag>Node.js</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础-01：原型了解</title>
    <url>/2022/11/13/JS/JS_Base_01/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>原型</li>
<li>总结</li>
</ul>
<hr>
<blockquote>
<p>在接触JS之前，我工作过程中基本都是采用Java、C#、C++开发，也就是面向对象编程，对于类、继承都很熟悉，所以在构建数据结构的时候，就会下意识的采用类来定义结构，而使用JS开发的时候，创建可以通过new 方法名来创建对象，定义属性和方法放到不同位置，会出现属于类的、属于实例的还是属于原型的？这让我搞得很懵逼，面向对象结构都定义在类上，没有这么复杂，为了搞清这些概念决定仔细学习一下。</p>
</blockquote>
<span id="more"></span>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><hr>
<ul>
<li><p>示例代码</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试关系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p1.constructor === Parent:&quot;</span> + (p1.<span class="property">constructor</span> === <span class="title class_">Parent</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parent.constructor === Function:&quot;</span> + (<span class="title class_">Parent</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Function.constructor === Function:&quot;</span> + (<span class="title class_">Function</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parent.__proto__ === Function.prototype:&quot;</span> + (<span class="title class_">Parent</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parent.prototype.constructor === Parent:&quot;</span> + (<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Parent</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p1.__proto__ === Parent.prototype:&quot;</span> + (p1.<span class="property">__proto__</span> === <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parent.prototype.__proto__ === Object.prototype:&quot;</span> + (<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.prototype.__proto__:&quot;</span> + (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.prototype.constructor === Object:&quot;</span> + (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Object</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.constructor === Function:&quot;</span> + (<span class="title class_">Object</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.prototype === Object.prototype:&quot;</span> + (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.__proto__ === Function.prototype:&quot;</span> + (<span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Function.__proto__ === Function.prototype:&quot;</span> + (<span class="title class_">Function</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Function.prototype === Function.prototype:&quot;</span> + (<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Function.prototype.__proto__ === Object.prototype:&quot;</span> + (<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多测试示例：<a href="https://github.com/yxw007/H5-Learn/blob/master/js/02_Proto.js">https://github.com/yxw007/H5-Learn/blob/master/js/02_Proto.js</a></p>
</blockquote>
</li>
<li><p>图解关系：根据以上测试用例，得出一下关系图</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211107203334.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211107203334.png"></p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211105224752.jpg" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211105224752.jpg"></p>
</li>
</ul>
<ul>
<li>规则：<ul>
<li><strong><strong>proto</strong>、constructor 属性 是【对象】独有的</strong></li>
<li><strong>prototype 属性 是【函数】独有的</strong></li>
<li><strong>函数也是一种对象，所以也具有<strong>proto</strong>、constructor 属性</strong></li>
</ul>
</li>
</ul>
<h2 id="总结：数据结构定义"><a href="#总结：数据结构定义" class="headerlink" title="总结：数据结构定义"></a>总结：数据结构定义</h2><ul>
<li><p>实例属性：在构造方法中定义，通常用【this.名称 = 初始值】定义</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="comment">//方式1：推荐方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//补充</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">	material=<span class="string">&quot;材质&quot;</span>,  <span class="comment">// 说明：此种方式定义的属性material 也属于实例上的</span></span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>原型属性和方法：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">live</span>= <span class="string">&quot;地球&quot;</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">move</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">	<span class="title function_">move</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">	<span class="keyword">get</span> <span class="title function_">live</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;地球&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">- 类上的属性和方法</span><br><span class="line">    </span><br><span class="line">    ```jsx</span><br><span class="line">    class Animal &#123;</span><br><span class="line">    		//类上的属性和方法</span><br><span class="line">        static material = &quot;材质&quot;</span><br><span class="line">        static sex()&#123;</span><br><span class="line">            return &quot;未知&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<p>启发：JS 是一门动态语言，了解到原型链概念，属性和方法如果自身没有就去原型上找，如果原型上面没有就依次往上找，直到找到或者找不到。如果模块继承关系套很多层，就会产生性能问题。由此就知道为了性能，为什么前端业界大佬，都不使用面向对象编程而采用函数式编程（案例：vue2.x 的vue还采用class new出实例，vue3.x 就都采用常用函数式编程了）</p>
</blockquote>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes">对象原型</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a></li>
<li><strong><a href="https://segmentfault.com/a/1190000021232132">一张图搞定JS原型&amp;原型链</a></strong></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>原型</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础-02：继承</title>
    <url>/2022/11/13/JS/JS_Base_02/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>常用继承方式<ul>
<li>方式一：调整类型原型的 <strong>proto</strong> 、 Object.setPrototypeOf 、Object.create</li>
<li>方法二：利用自定义createObject</li>
<li>方式三：利用ES6 Class extends</li>
</ul>
</li>
<li>总结</li>
</ul>
<span id="more"></span>
<h2 id="常用继承方式"><a href="#常用继承方式" class="headerlink" title="常用继承方式"></a>常用继承方式</h2><hr>
<h3 id="方式一：调整类型原型的proto-、-Object-setPrototypeOf-、Object-create"><a href="#方式一：调整类型原型的proto-、-Object-setPrototypeOf-、Object-create" class="headerlink" title="方式一：调整类型原型的proto 、 Object.setPrototypeOf 、Object.create"></a>方式一：调整类型原型的<strong>proto</strong> 、 Object.setPrototypeOf 、Object.create</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">address</span> = &#123;<span class="attr">location</span>:<span class="string">&quot;山里&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Tiger</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">        <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">		</span><br><span class="line">    <span class="title class_">Tiger</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>; </span><br><span class="line">    <span class="comment">// 等同 es7 方法：Object.setPrototypeOf(Tiger.prototype,Animal.prototype);</span></span><br><span class="line">		<span class="comment">// or Tiger.prototype = Object.create(Animal.prototype);</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Tiger</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;说话&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tiger = <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类实例属性：<span class="subst">$&#123;tiger.arr&#125;</span>`</span>);<span class="comment">//父类实例属性：1,2,3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类原型属性：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(tiger.address)&#125;</span>`</span>);<span class="comment">//父类原型属性：&#123;&quot;location&quot;:&quot;山里&quot;&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类实例属性：<span class="subst">$&#123;tiger.age&#125;</span>`</span>);<span class="comment">//子类实例属性：10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类原型属性：<span class="subst">$&#123;tiger.say()&#125;</span>`</span>);<span class="comment">//子类原型属性：说话</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二：利用自定义createObject"><a href="#方法二：利用自定义createObject" class="headerlink" title="方法二：利用自定义createObject"></a>方法二：利用自定义createObject</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">address</span> = &#123;<span class="attr">location</span>:<span class="string">&quot;山里&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Tiger</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">        <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createObject</span>(<span class="params">parentPrototype</span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = parentPrototype;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Tiger</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title function_">createObject</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    <span class="title class_">Tiger</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;说话&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tiger = <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类实例属性：<span class="subst">$&#123;tiger.arr&#125;</span>`</span>);<span class="comment">//父类实例属性：1,2,3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类原型属性：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(tiger.address)&#125;</span>`</span>);<span class="comment">//父类原型属性：&#123;&quot;location&quot;:&quot;山里&quot;&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类实例属性：<span class="subst">$&#123;tiger.age&#125;</span>`</span>);<span class="comment">//子类实例属性：10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类原型属性：<span class="subst">$&#123;tiger.say()&#125;</span>`</span>);<span class="comment">//子类原型属性：说话</span></span><br></pre></td></tr></table></figure>
<h3 id="方式三：利用ES6-Class-extends"><a href="#方式三：利用ES6-Class-extends" class="headerlink" title="方式三：利用ES6 Class extends"></a>方式三：利用ES6 Class extends</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        address = &#123;<span class="attr">location</span>:<span class="string">&quot;山里&quot;</span>&#125;;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">           <span class="variable language_">super</span>(name);</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;说话&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tiger = <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类实例属性：<span class="subst">$&#123;tiger.arr&#125;</span>`</span>);<span class="comment">//父类实例属性：1,2,3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类原型属性：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(tiger.address)&#125;</span>`</span>);<span class="comment">//父类原型属性：&#123;&quot;location&quot;:&quot;山里&quot;&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类实例属性：<span class="subst">$&#123;tiger.age&#125;</span>`</span>);<span class="comment">//子类实例属性：10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类原型属性：<span class="subst">$&#123;tiger.say()&#125;</span>`</span>);<span class="comment">//子类原型属性：说话</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>推荐使用es6的class来进行继承（注意：继承链不宜过长，否则会导致性能问题。更多细节：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a>）</li>
<li>不推荐通过改变类型原型的<strong>proto</strong>指向的方式（兼容性不好，而且将 <code>__proto__</code> 设置为非对象的值会静默失败，不会抛出错误。更多细节：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a>）</li>
</ul>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>屏蔽：键盘按键、鼠标点击事件</title>
    <url>/2022/11/13/JS/PreventEvent/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>屏蔽-键盘按键</li>
<li>屏蔽-鼠标点击</li>
<li>屏蔽-BackSpace</li>
</ul>
<span id="more"></span>
<h3 id="屏蔽-键盘按键"><a href="#屏蔽-键盘按键" class="headerlink" title="屏蔽-键盘按键"></a>屏蔽-键盘按键</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//添加按键监听</span><br><span class="line">window.addEventListener(&#x27;keydown&#x27;, this.onKeyDown,true);</span><br><span class="line"></span><br><span class="line">//移除按键监听</span><br><span class="line">window.removeEventListener(&quot;keydown&quot;,this.onKeyDown,true);</span><br><span class="line"></span><br><span class="line">onKeyDown(val)&#123;</span><br><span class="line">    console.log(&#x27;按下&#x27; + val.key);</span><br><span class="line">    val.preventDefault();</span><br><span class="line">    val.stopPropagation();</span><br><span class="line">    val.cancelBubble = true;</span><br><span class="line">    window.event.returnValue = false;</span><br><span class="line">    window.event.preventDefault();</span><br><span class="line">    window.event.stopPropagation();</span><br><span class="line">    window.event.cancelBubble = true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="屏蔽-鼠标点击"><a href="#屏蔽-鼠标点击" class="headerlink" title="屏蔽-鼠标点击"></a>屏蔽-鼠标点击</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//添加鼠标点击监听</span><br><span class="line">window.addEventListener(&#x27;mousedown&#x27;,this.onClick,true);</span><br><span class="line"></span><br><span class="line">//移除鼠标点击监听</span><br><span class="line">window.removeEventListener(&#x27;mousedown&#x27;,this.onClick,true);</span><br><span class="line"></span><br><span class="line">//which: 1-左键 2-中键 3-右键</span><br><span class="line">onClick(val)&#123;</span><br><span class="line">    console.error(&#x27;点击&#x27; + val.which);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="屏蔽-BackSpace"><a href="#屏蔽-BackSpace" class="headerlink" title="屏蔽-BackSpace"></a>屏蔽-BackSpace</h3><p>在IE页面跳转过程中，按BackSpace退格键默认返回上此浏览页，导致路由中断引起(Vue)页面卡死，所以需要在IE中屏蔽掉BackSpce退格键，但是在输入框中则不屏蔽。</p>
<ul>
<li>preventBackSpce.js： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export const banBackSpace = (e) =&gt; &#123;</span><br><span class="line">  let ev = e || window.event</span><br><span class="line">  // 各种浏览器下获取事件对象</span><br><span class="line">  let obj = ev.relatedTarget || ev.srcElement || ev.target || ev.currentTarget</span><br><span class="line">  // 按下Backspace键</span><br><span class="line">  if (ev.keyCode === 8) &#123;</span><br><span class="line">    // 标签名称</span><br><span class="line">    let tagName = obj.nodeName.toLowerCase();</span><br><span class="line">    // 如果标签不是input或者textarea则阻止Backspace</span><br><span class="line">    if (tagName !== &#x27;input&#x27; &amp;&amp; tagName !== &#x27;textarea&#x27;) &#123;</span><br><span class="line">      return stopIt(ev)</span><br><span class="line">    &#125;</span><br><span class="line">    let tagType = obj.type.toLowerCase() // 标签类型</span><br><span class="line">    // input标签除了下面几种类型，全部阻止Backspace</span><br><span class="line">    if (tagName === &#x27;input&#x27; &amp;&amp; (tagType !== &#x27;text&#x27; &amp;&amp; tagType !== &#x27;textarea&#x27; &amp;&amp; tagType !== &#x27;password&#x27;)) &#123;</span><br><span class="line">      return stopIt(ev)</span><br><span class="line">    &#125;</span><br><span class="line">    // input或者textarea输入框如果不可编辑则阻止Backspace</span><br><span class="line">    if ((tagName === &#x27;input&#x27; || tagName === &#x27;textarea&#x27;) &amp;&amp; (obj.readOnly === true || obj.disabled === true)) &#123;</span><br><span class="line">      return stopIt(ev)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stopIt(ev) &#123;</span><br><span class="line">  if (ev.preventDefault) &#123;</span><br><span class="line">    // preventDefault()方法阻止元素发生默认的行为</span><br><span class="line">    ev.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">  if (ev.returnValue) &#123;</span><br><span class="line">    // IE浏览器下用window.event.returnValue = false;实现阻止元素发生默认的行为</span><br><span class="line">  &#125;</span><br><span class="line">  return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用方法：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 在需要使用的Vue页面引入组件(一般在main.vue中添加)</span><br><span class="line">import &#123;banBackSpace&#125; from &quot;@/util/preventBackspace&quot;;</span><br><span class="line"></span><br><span class="line">2. mounted 钩子函数挂载事件</span><br><span class="line">document.onkeypress = banBackSpace;</span><br><span class="line">document.onkeydown = banBackSpace;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>事件屏蔽</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式根基：Object.defineProperty 与 Proxy 拦截区别</title>
    <url>/2022/11/13/JS/principle-learn-01/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>Object.defineProperty 拦截测试</li>
<li>Proxy 拦截测试</li>
<li>总结</li>
</ul>
<hr>
<blockquote>
<p>假如你熟悉Vue，同时好奇心比较强，你肯定会想知道Vue是如何实现响应式的，要了解响应式原理就需要我们了解Object.defineProperty 和 Proxy 这两个API。针对这两个API编写对应的测试例子看看情况如何。</p>
</blockquote>
<span id="more"></span>
<h2 id="Object-defineProperty-拦截测试"><a href="#Object-defineProperty-拦截测试" class="headerlink" title="Object.defineProperty 拦截测试"></a>Object.defineProperty 拦截测试</h2><hr>
<h3 id="公共代码"><a href="#公共代码" class="headerlink" title="公共代码"></a>公共代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hero = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;赵云&#x27;</span>,</span><br><span class="line">        <span class="attr">hp</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">sp</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">equipment</span>: [<span class="string">&#x27;马&#x27;</span>, <span class="string">&#x27;长枪&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(hero).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> internalValue = hero[key]</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(hero, key, &#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting key &quot;<span class="subst">$&#123;key&#125;</span>&quot;: <span class="subst">$&#123;internalValue&#125;</span>`</span>)</span><br><span class="line">                <span class="keyword">return</span> internalValue</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setting key &quot;<span class="subst">$&#123;key&#125;</span>&quot;: <span class="subst">$&#123;internalValue&#125;</span> -&gt; <span class="subst">$&#123;newValue&#125;</span>`</span>)</span><br><span class="line">                internalValue = newValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="测试1：修改对象-string类型字段，拦截测试"><a href="#测试1：修改对象-string类型字段，拦截测试" class="headerlink" title="测试1：修改对象-string类型字段，拦截测试"></a>测试1：修改对象-string类型字段，拦截测试</h3><ul>
<li><p>code：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-string类型字段，拦截测试------&quot;</span>);</span><br><span class="line">hero.<span class="property">name</span> = <span class="string">&quot;吕布&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果：<span class="subst">$&#123;hero.name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果：</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717175153.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717175153.png"></p>
</li>
<li><p>结论：<strong>对象-普通字段修改，可以被get set拦截</strong></p>
</li>
</ul>
<h3 id="测试2：修改对象-数组类型字段，新增元素，拦截测试"><a href="#测试2：修改对象-数组类型字段，新增元素，拦截测试" class="headerlink" title="测试2：修改对象-数组类型字段，新增元素，拦截测试"></a>测试2：修改对象-数组类型字段，新增元素，拦截测试</h3><ul>
<li><p>code：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-数组类型字段，新增元素，拦截测试------&quot;</span>);</span><br><span class="line">hero.<span class="property">equipment</span>.<span class="title function_">push</span>(<span class="string">&quot;盔甲&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;hero.equipment&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果：</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181404.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181404.png"></p>
</li>
<li><p>结论：<strong>对象-数组字段新增元素,可以被get拦截，无法被set拦截</strong></p>
</li>
</ul>
<h3 id="测试3：修改对象-添加字段，拦截测试"><a href="#测试3：修改对象-添加字段，拦截测试" class="headerlink" title="测试3：修改对象-添加字段，拦截测试"></a>测试3：修改对象-添加字段，拦截测试</h3><ul>
<li><p>code</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-添加字段，拦截测试------&quot;</span>);</span><br><span class="line">hero.<span class="property">age</span> = <span class="number">23</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;hero.age&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181932.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181932.png"></p>
</li>
<li><p>结论：<strong>对象-添加字段,无法被get set拦截</strong></p>
</li>
</ul>
<h3 id="测试4：修改对象-删除字段，拦截测试"><a href="#测试4：修改对象-删除字段，拦截测试" class="headerlink" title="测试4：修改对象-删除字段，拦截测试"></a>测试4：修改对象-删除字段，拦截测试</h3><ul>
<li><p>code</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-删除字段，拦截测试------&quot;</span>);</span><br><span class="line"><span class="keyword">delete</span> hero.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;hero.name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717182115.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717182115.png"></p>
</li>
<li><p>结论</p>
</li>
</ul>
<h3 id="测试5：修改数组类型字段，新增元素，拦截测试"><a href="#测试5：修改数组类型字段，新增元素，拦截测试" class="headerlink" title="测试5：修改数组类型字段，新增元素，拦截测试"></a>测试5：修改数组类型字段，新增元素，拦截测试</h3><ul>
<li><p>code</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(hero.<span class="property">equipment</span>, <span class="string">&#x27;push&#x27;</span>, &#123;</span><br><span class="line">        <span class="title function_">value</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`value <span class="subst">$&#123;<span class="variable language_">this</span>&#125;</span> -  <span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>]&#125;</span>`</span>)</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">length</span>] = <span class="variable language_">arguments</span>[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;---------------第二部分：对象-数组value拦截测试-----------------------&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：数组类型字段，新增元素，拦截测试------&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前 equipment： <span class="subst">$&#123;hero.equipment&#125;</span>`</span>);</span><br><span class="line">hero.<span class="property">equipment</span>.<span class="title function_">push</span>(<span class="string">&quot;盔甲&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新增[盔甲]后 equipment： <span class="subst">$&#123;hero.equipment&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185253.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185253.png"></p>
</li>
<li><p>结论：<strong>可以利用value 拦截到对象-数组字段元素删减</strong></p>
</li>
</ul>
<h2 id="Proxy拦截测试"><a href="#Proxy拦截测试" class="headerlink" title="Proxy拦截测试"></a>Proxy拦截测试</h2><hr>
<h3 id="公共代码："><a href="#公共代码：" class="headerlink" title="公共代码："></a>公共代码：</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hero = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;赵云&#x27;</span>,</span><br><span class="line">        <span class="attr">hp</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">sp</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">equipment</span>: [<span class="string">&#x27;马&#x27;</span>, <span class="string">&#x27;长枪&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting key &quot;<span class="subst">$&#123;key&#125;</span>&quot;: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> oldValue = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line">        <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setting key &quot;<span class="subst">$&#123;key&#125;</span>&quot;: <span class="subst">$&#123;oldValue&#125;</span> -&gt; <span class="subst">$&#123;value&#125;</span>  result:<span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> heroProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(hero, handler);</span><br></pre></td></tr></table></figure>
<h3 id="测试1：修改对象string类型字段，拦截测试"><a href="#测试1：修改对象string类型字段，拦截测试" class="headerlink" title="测试1：修改对象string类型字段，拦截测试"></a>测试1：修改对象string类型字段，拦截测试</h3><ul>
<li><p>code</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象string类型字段，拦截测试------&quot;</span>);</span><br><span class="line">heroProxy.<span class="property">name</span> = <span class="string">&quot;吕布&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果：<span class="subst">$&#123;heroProxy.name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184434.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184434.png"></p>
</li>
<li><p>结论：<strong>对象-普通字段修改，可以被get set拦截</strong></p>
</li>
</ul>
<h3 id="测试2：修改对象数组类型字段，新增元素，拦截测试"><a href="#测试2：修改对象数组类型字段，新增元素，拦截测试" class="headerlink" title="测试2：修改对象数组类型字段，新增元素，拦截测试"></a>测试2：修改对象数组类型字段，新增元素，拦截测试</h3><ul>
<li><p>code</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象数组类型字段，新增元素，拦截测试------&quot;</span>);</span><br><span class="line">heroProxy.<span class="property">equipment</span>.<span class="title function_">push</span>(<span class="string">&quot;盔甲&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;heroProxy.equipment&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184544.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184544.png"></p>
</li>
<li><p>结论：<strong>对象-数组字段新增元素,可以被get拦截，无法被set拦截</strong></p>
</li>
</ul>
<h3 id="测试3：修改对象-添加字段，拦截测试-1"><a href="#测试3：修改对象-添加字段，拦截测试-1" class="headerlink" title="测试3：修改对象-添加字段，拦截测试"></a>测试3：修改对象-添加字段，拦截测试</h3><ul>
<li><p>code</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-添加字段，拦截测试------&quot;</span>);</span><br><span class="line">heroProxy.<span class="property">age</span> = <span class="number">23</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;heroProxy.age&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184736.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184736.png"></p>
</li>
<li><p>结论：<strong>对象-添加字段,可以被set拦截</strong></p>
</li>
</ul>
<h3 id="测试4：修改对象-删除字段，拦截测试-1"><a href="#测试4：修改对象-删除字段，拦截测试-1" class="headerlink" title="测试4：修改对象-删除字段，拦截测试"></a>测试4：修改对象-删除字段，拦截测试</h3><ul>
<li><p>code</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-删除字段，拦截测试------&quot;</span>);</span><br><span class="line"><span class="keyword">delete</span> heroProxy.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;heroProxy.name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185008.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185008.png"></p>
</li>
<li><p>结论：<strong>对象-删除字段,可以被get拦截</strong></p>
</li>
</ul>
<h3 id="测试5：修改：对象数组类型字段"><a href="#测试5：修改：对象数组类型字段" class="headerlink" title="测试5：修改：对象数组类型字段"></a>测试5：修改：对象数组类型字段</h3><ul>
<li><p>code</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> heroProxyArray = <span class="keyword">new</span> <span class="title class_">Proxy</span>(hero.<span class="property">equipment</span>, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象数组类型字段，新增元素，拦截测试------&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前 equipment：`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heroProxyArray);</span><br><span class="line"></span><br><span class="line">heroProxyArray.<span class="title function_">push</span>(<span class="string">&quot;匕首&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新增[匕首]后 equipment：`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heroProxyArray);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185209.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185209.png"></p>
</li>
<li><p>结论：<strong>利用proxy 即可轻松拦截数组变化</strong></p>
</li>
</ul>
<hr>
<blockquote>
<p>demo 源码：<a href="https://github.com/yxw007/vue-principle-learn/tree/master/Proxy%26Reflect">vue-principle-learn</a><br>后续我会把vue原理相关的学习资料和demo都会更新到此仓库，欢迎star收藏~</p>
</blockquote>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul>
<li>Object.defineProperty<ul>
<li>缺点1：只能遍历对象已存在的属性，进行get set拦截，无法针对新增、删除元素进行拦截</li>
<li>缺点2：针对array 拦截，需要拦截push、shift、pop、unshift等，拦截操作复杂</li>
</ul>
</li>
<li>Proxy<ul>
<li>优势1：新增、删减字段都能轻松拦截</li>
<li>优势2：针对array 拦截，跟object 属性get set一样拦截，无需特殊处理</li>
</ul>
</li>
</ul>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/60126477">深入实践 ES6 Proxy &amp; Reflect</a></li>
<li><a href="https://stackoverflow.com/questions/5100376/how-to-watch-for-array-changes">how-to-watch-for-array-changes</a></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>响应式原理</category>
      </categories>
      <tags>
        <tag>Object.defineProperty</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式核心原理</title>
    <url>/2022/11/13/JS/principle-learn-02/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>核心原理：流转图</li>
<li>流转步骤：讲解&amp;疑问解答</li>
</ul>
<hr>
<blockquote>
<p>由于Vue3 Reactive源码涉及的代码较多，给初学者学习带来一定的门槛，所以尤大讲解的最核心的响应式demo来讲解响应式核心原理实现</p>
</blockquote>
<span id="more"></span>
<h2 id="核心原理-流转图"><a href="#核心原理-流转图" class="headerlink" title="核心原理-流转图"></a>核心原理-流转图</h2><hr>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210726223603.jpg" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210726223603.jpg"></p>
<h3 id="流转步骤讲解"><a href="#流转步骤讲解" class="headerlink" title="流转步骤讲解"></a>流转步骤讲解</h3><ul>
<li>第1步：利用Proxy 封装代理响应式对象</li>
<li>第2步：巧妙利用Javascript是单线程执行特性，用watchEffect包装一层调用，让activeUpdate暂存匿名函数。</li>
<li>第3步：执行匿名函数，让匿名函数访问到的对象属性，触发对象的get 拦截</li>
<li>第4、5、6步：get拦截到的属性访问，创建依赖跟踪对象dep，然后利用dep搜集依赖匿名函数</li>
<li>第7、8步：set拦截到属性设置，获取属性对应的依赖对象dep，然后调用之前搜集的依赖匿名函数</li>
</ul>
<hr>
<h3 id="疑问解答："><a href="#疑问解答：" class="headerlink" title="疑问解答："></a>疑问解答：</h3><ul>
<li>为啥要用proxy拦截? ( 请阅读：<a href="https://yanxuewen.cn/2021/07/17/principle-learn-01/">响应式根基：Object.defineProperty 与 Proxy 拦截区别</a> )</li>
<li>为啥要用WeakMap？<ul>
<li>原因：可被垃圾回收器自动回收，而Map不会被垃圾回收器自动回收，需要手动清理。否则会造成内存泄漏</li>
</ul>
</li>
<li>为啥要用Reflect获取对象属性和设置对象属性？<ul>
<li>原因1：保证不管存不存在原型链继承，都能保存操作正确。</li>
<li>原因2：语义更明确，避免异常抛出等</li>
</ul>
</li>
</ul>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>watchEffect : 暂存当前匿名函数</li>
<li>proxy：对象访问拦截</li>
<li>dep：依赖收集</li>
</ul>
<blockquote>
<p>demo 源码：<a href="https://github.com/yxw007/vue-principle-learn/blob/master/vue-3-min/reactivity/reactivity.html">vue-principle-learn</a></p>
<p>为了方便记牢响应式原理，记住这3个角色便于以后快速回忆起响应式原理。</p>
</blockquote>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.bilibili.com/video/BV1rC4y187Vw">【课程】Vue 3 Deep Dive with Evan You 【中英字幕】- Vue Mastery</a></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>响应式原理</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>watchEffect</tag>
        <tag>dep</tag>
        <tag>Reflect</tag>
      </tags>
  </entry>
  <entry>
    <title>创建通用JS公共模块并发布至npm</title>
    <url>/2022/11/13/Library/Web04/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>创建：JS公共模块</li>
<li>打包：使用rollup 打包公共模块</li>
<li>发布：js公共模块至verdaccio平台</li>
<li>发布：js公共模块至npm平台</li>
</ul>
<span id="more"></span>
<hr>
<h3 id="如何创建JS公共模块"><a href="#如何创建JS公共模块" class="headerlink" title="如何创建JS公共模块"></a>如何创建JS公共模块</h3><blockquote>
<p>由于代码有点多就不贴代码了，直接去代码仓库看吧  <a href="https://github.com/aa4790139/JSCommonUtils">传输门</a></p>
</blockquote>
<hr>
<h3 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h3><ul>
<li>简介：<blockquote>
<p>Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。</p>
</blockquote>
</li>
<li>使用起因：<blockquote>
<p>公共相关的js文件想弄成单独的一个模块，方便后续开发使用，而不是不停的copy 和paste，所以就去了解怎么样把js公共相关js 打包成一个模块。</p>
</blockquote>
</li>
<li>安装  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm install -g rollup</span><br></pre></td></tr></table></figure></li>
<li>创建配置文件  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// rollup.config.js</span><br><span class="line">import json from &#x27;rollup-plugin-json&#x27;;</span><br><span class="line">import babel from &#x27;rollup-plugin-babel&#x27;;</span><br><span class="line">import &#123;uglify&#125; from &#x27;rollup-plugin-uglify&#x27;;</span><br><span class="line">import &#123;version&#125; from &#x27;../package.json&#x27;;</span><br><span class="line">import multiEntry from &quot;rollup-plugin-multi-entry&quot;;</span><br><span class="line">import &#123;terser&#125; from &quot;rollup-plugin-terser&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    input: &#x27;src/*.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        /*输出公共库路径*/</span><br><span class="line">        file: &#x27;lib/index.js&#x27;,</span><br><span class="line">        /*配置：UMD 通用定义模块，支持前端端跨平台模块化*/</span><br><span class="line">        format: &#x27;umd&#x27;,</span><br><span class="line">        name: &#x27;JSCommonUtils&#x27;,</span><br><span class="line">        /*压缩和混淆js*/</span><br><span class="line">        plugins: [terser(), uglify()],</span><br><span class="line">        /*JS前缀: 添加库相关信息*/</span><br><span class="line">        banner: &#x27;/* JSCommonUtils version &#x27; + version + &#x27; */&#x27;,</span><br><span class="line">        /*JS尾部: 添加个人相关信息*/</span><br><span class="line">        footer: &#x27;/* follow me on github aa4790139 */&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        json(),</span><br><span class="line">        babel(&#123;</span><br><span class="line">            /*过滤node_modules编译*/</span><br><span class="line">            exclude: &#x27;node_modules/**&#x27;</span><br><span class="line">        &#125;),</span><br><span class="line">        /*允许多输入源*/</span><br><span class="line">        multiEntry()</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="verdaccio"><a href="#verdaccio" class="headerlink" title="verdaccio"></a>verdaccio</h3><ul>
<li>简介： 开源轻量的npm私服包管理平台</li>
<li>使用起因：<blockquote>
<p>创建好自己的js公共模块时，我们需要在浏览器和Node.js 环境中测试，有了verdaccio 就非常方便我们测试了。而不是去不停npm本地公共模块搞得非常蛋疼，而且很容易出问题，所以为了简单和方便我们使用verdaccio 搞个私有仓库，方便我们模拟安装使用。</p>
</blockquote>
</li>
<li>安装   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm install -g verdaccio</span><br></pre></td></tr></table></figure></li>
<li>启动  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">verdaccio</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="发布至verdaccio平台"><a href="#发布至verdaccio平台" class="headerlink" title="发布至verdaccio平台"></a>发布至verdaccio平台</h3><ul>
<li>常用命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1. 添加用户</span><br><span class="line">npm adduser --registry http://localhost:4873</span><br><span class="line">//2. 发布至私有仓库位置</span><br><span class="line">npm publish --registry http://localhost:4873</span><br><span class="line">// 撤回发布刚发布包</span><br><span class="line">npm unpublish --force --registry http://localhost:4873 </span><br><span class="line">// 撤回发布的指定包</span><br><span class="line">npm unpublish package_name  --force --registry http://localhost:4873</span><br></pre></td></tr></table></figure></li>
<li>效果图<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210303144737.png" alt=""></li>
</ul>
<h3 id="发布至npm平台"><a href="#发布至npm平台" class="headerlink" title="发布至npm平台"></a>发布至npm平台</h3><ul>
<li><p>创建.npmignore 文件，过滤掉无需上传的文件和目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_modules/*</span><br><span class="line">src/</span><br><span class="line">build/</span><br><span class="line">.babelrc</span><br><span class="line">.gitignore</span><br><span class="line">package-lock.json</span><br><span class="line">pnpm-lock.yaml</span><br><span class="line">!node_modules/crc32</span><br><span class="line">!node_modules/deflate-js</span><br></pre></td></tr></table></figure>
<blockquote>
<p>提示: .npmignore文件内容，需要忽略的文件和目录写前面，需要排除忽略的文件或目录前加!写后面</p>
</blockquote>
</li>
<li><p>效果图<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210303144716.png" alt=""></p>
</li>
</ul>
<hr>
<h4 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h4><ul>
<li><a href="https://verdaccio.org/docs/en/installation">verdaccio 官网</a></li>
<li><a href="https://fe.rualc.com/note/npm-verdaccio.html#npm-install">verdaccio 搭建配置</a></li>
<li><a href="https://www.rollupjs.com/guide/tools">rollup.js 中文文档</a></li>
<li><a href="https://github.com/Godiswill/blog/issues/6">rollup 官网打包实践</a></li>
<li><a href="https://chenshenhai.github.io/rollupjs-note/">Rollup.js 实战学习笔记</a></li>
<li><a href="https://stackoverflow.com/questions/48092647/npmignore-ignore-whole-folder-except-given-file-types">.npmignore: ignore whole folder except given file types</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>模块化</category>
      </categories>
      <tags>
        <tag>UMD</tag>
        <tag>rollup</tag>
        <tag>verdaccio</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Web性能优化</title>
    <url>/2022/11/13/Optimization/Web03/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>工具层面</li>
<li>Vue代码层面</li>
<li>Webpack层面</li>
<li>Web技术层面</li>
</ul>
<blockquote>
<p>性能优化对于每一个工程师都是必定要面对的问题，相信大部分人平常发现什么点可以优化，就优化什么样的点，没有全面仔细梳理汇总过知识点，导致别人问我们也不能很全面的回答上来，可能当时只能回答想到的一些零碎的点，这样给人的印象就很不好，所以我查阅相关资料，以及自己的一些经验汇总出如下脑图，方面日后别人问起时，我们脑子里面能快速呈现一幅图，然后把关联知识都说出来。</p>
</blockquote>
<span id="more"></span>
<p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.jpg" alt=""></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote>
<p>如果你发现有我没有列出来的优化点，欢迎给我留言，我再更新这个导图</p>
</blockquote>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://juejin.cn/post/6844903913410314247#heading-22">Vue 项目性能优化 — 实践指南（网上最全 / 详细）</a></li>
<li><a href="https://yanxuewen.cn/2020/12/30/WebBuild01/#more">Web构建优化</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>WebPack</tag>
      </tags>
  </entry>
  <entry>
    <title>Web构建优化</title>
    <url>/2022/11/13/Optimization/WebBuild01/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>DllPlugin 和 DllReferencePlugin 简介</li>
<li>如何使用DllPlugin打包，及DllReferencePlugin如何引用dll</li>
<li>构建优化效果</li>
<li>SplitChunks </li>
<li>Demo源码工程</li>
</ul>
<span id="more"></span>
<hr>
<h3 id="DllPlugin-和-DllReferencePlugin-简介"><a href="#DllPlugin-和-DllReferencePlugin-简介" class="headerlink" title="DllPlugin 和 DllReferencePlugin 简介"></a>DllPlugin 和 DllReferencePlugin 简介</h3><ul>
<li>DllPlugin: <blockquote>
<p>这个插件是在一个额外的独立的 webpack 设置中创建一个只有 dll 的 bundle(dll-only-bundle)。 这个插件会生成一个名为 manifest.json 的文件，这个文件是用来让 DLLReferencePlugin 映射到相关的依赖上去的。</p>
</blockquote>
</li>
<li>DllReferencePlugin:<blockquote>
<p>此插件配置在 webpack 的主配置文件中，此插件会把 dll-only-bundles 引用到需要的预编译的依赖中</p>
</blockquote>
</li>
<li>通俗点讲：<blockquote>
<p>DllPlugin 插件负责把第三方公共库，打包进一个独立的dll库中。最后项目打包时DllReferencePlugin 通过manifest.json 来引用dll的公共库，避免项目每次构建时都将第三库和业务代码进行重复打包。</p>
</blockquote>
</li>
<li>优点：<ul>
<li>提升打包构建速度</li>
<li>公共js文件配置CDN，避免掉重复下载公共库js文件</li>
</ul>
</li>
</ul>
<hr>
<h3 id="如何使用DllPlugin打包，及DllReferencePlugin如何引用dll"><a href="#如何使用DllPlugin打包，及DllReferencePlugin如何引用dll" class="headerlink" title="如何使用DllPlugin打包，及DllReferencePlugin如何引用dll"></a>如何使用DllPlugin打包，及DllReferencePlugin如何引用dll</h3><ul>
<li>DllPlugin 配置需要打包第三方库至dll中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//webpack.dll.config.js</span><br><span class="line"></span><br><span class="line">const DllPlugin = require(&#x27;webpack/lib/DllPlugin&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">var packageJsonContent = fs.readFileSync(path.resolve(__dirname, &#x27;../package.json&#x27;));</span><br><span class="line">var packageJson = JSON.parse(packageJsonContent);</span><br><span class="line"></span><br><span class="line">var dependencies = Object.keys(packageJson.dependencies);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        vendor: dependencies</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &#x27;../dist&#x27;),</span><br><span class="line">        filename: &#x27;vendor.bundle.js&#x27;,</span><br><span class="line">        library: &#x27;vendor_lib&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new DllPlugin(&#123;</span><br><span class="line">            context: __dirname,</span><br><span class="line">            name: &#x27;vendor_lib&#x27;,</span><br><span class="line">            /* 生成manifest文件输出的位置和文件名称 */</span><br><span class="line">            path: path.resolve(__dirname, &#x27;../dist/vendor-manifest.json&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>DllReferencePlugin如何引用dll</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//webpack.config.js 中 plugins添加以下代码</span><br><span class="line"></span><br><span class="line">new DllReferencePlugin(&#123;</span><br><span class="line">            manifest: require(path.resolve(__dirname, &#x27;../dist/vendor-manifest.json&#x27;))</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="构建优化效果"><a href="#构建优化效果" class="headerlink" title="构建优化效果"></a>构建优化效果</h3><blockquote>
<p>简单demo，未抽离公共库打包时间7572ms，抽离公共库打包时间2315ms，打包速度快2倍多<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20201230131323.png" alt=""></p>
</blockquote>
<hr>
<h3 id="SplitChunks"><a href="#SplitChunks" class="headerlink" title="SplitChunks"></a>SplitChunks</h3><ul>
<li>简介：Webpack中一个提取或分离代码的插件，主要作用是提取公共代码，防止代码被重复打包，拆分过大的js文件，合并零散的js文件，可配置</li>
<li>配置：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//webpack.dll.config.js中optimization 中新增如下配置</span><br><span class="line">splitChunks: &#123;</span><br><span class="line">            chunks: &quot;async&quot;,</span><br><span class="line">            minSize: 30000,</span><br><span class="line">            minChunks: 1,</span><br><span class="line">            maxAsyncRequests: 5,</span><br><span class="line">            maxInitialRequests: 3,</span><br><span class="line">            automaticNameDelimiter: &#x27;~&#x27;,</span><br><span class="line">            name: true,</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendors: &#123;</span><br><span class="line">                    test: /[\\/]node_modules[\\/]/,</span><br><span class="line">                    priority: -10</span><br><span class="line">                &#125;,</span><br><span class="line">                default: &#123;</span><br><span class="line">                    minChunks: 2,</span><br><span class="line">                    priority: -20,</span><br><span class="line">                    reuseExistingChunk: true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Demo源码工程"><a href="#Demo源码工程" class="headerlink" title="Demo源码工程"></a>Demo源码工程</h3><ul>
<li>访问地址：<a href="https://github.com/aa4790139/webpack4_confuse_demo">https://github.com/aa4790139/webpack4_confuse_demo</a></li>
</ul>
<hr>
<h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><blockquote>
<p>由于对于公共库抽离和分割包过大优化打包，我只是试探性的去了解和测试。如果你还有什么更好的优化构建方法或者建议，欢迎给我留言。感谢~</p>
</blockquote>
<hr>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://www.cnblogs.com/tugenhua0707/p/9520780.html">深入浅出的webpack构建工具—-DllPlugin DllReferencePlugin提高构建速度(七)</a></li>
<li><a href="https://webpack.docschina.org/plugins/split-chunks-plugin/#optimizationsplitchunks">SplitChunksPlugin 使用说明</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/152097785">Webpack之SplitChunks插件用法详解</a></li>
<li><a href="https://imweb.io/topic/5b66dd601402769b60847149">webpack 4 Code Splitting 的 splitChunks 配置探索</a></li>
</ul>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>DllPlugin</tag>
        <tag>DllReferencePlugin</tag>
        <tag>打包优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-01：Python与C# 基本语法区别</title>
    <url>/2022/11/13/Python/Python01/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>Python 与 C# 基本语法区别</li>
<li>具体语法示例</li>
</ul>
<span id="more"></span>
<h3 id="最明显的区别"><a href="#最明显的区别" class="headerlink" title="最明显的区别"></a>最明显的区别</h3><ol>
<li>Python if、for、while等 包裹代码块不是用{}，而是使用”:”和 换行缩进</li>
<li>Python 弱类型语言，同时每句话结束后无需加分号”;”，与JAVAScript 类似</li>
</ol>
<h3 id="具体语法区别："><a href="#具体语法区别：" class="headerlink" title="具体语法区别："></a>具体语法区别：</h3><ul>
<li>if<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#：</span><br><span class="line">if(条件)&#123;</span><br><span class="line">    print(&quot;xxx&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">if 条件:</span><br><span class="line">    print(&quot;xxx&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>for<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#:</span><br><span class="line">var list = new List&lt;int&gt;()&#123;1, 2, 3&#125;;</span><br><span class="line">foreach(n : list)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">list = &#123;1, 2, 3&#125;</span><br><span class="line">for n in list:</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure></li>
<li>强制类型转换<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C# </span><br><span class="line">var num = &quot;12&quot;;</span><br><span class="line">int n = (int)num</span><br><span class="line"></span><br><span class="line">Python</span><br><span class="line">num = &quot;12&quot;</span><br><span class="line">n = int(num)</span><br></pre></td></tr></table></figure></li>
<li><p>数组切片： 其实就是copy出数组中的指定区域元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listnames = [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">listnames[start_index:end_index] </span><br><span class="line">(注意：copy出来的集合为[start_index,end_index)之前的元素</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数及注释说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#：</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 测试函数</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public string test(string username)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;hello &quot; + username);</span><br><span class="line">    return username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">def test(username):</span><br><span class="line">    &quot;&quot;&quot;测试函数&quot;&quot;&quot;</span><br><span class="line">    print(&quot;hello &quot; + username)</span><br><span class="line">    return username.title()</span><br></pre></td></tr></table></figure></li>
<li><p>传递任意数量的实参：*实参名 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#：无对应语法</span><br><span class="line"></span><br><span class="line">Python</span><br><span class="line">def make_pizza(*toppings): </span><br><span class="line">    &quot;&quot;&quot;打印顾客点的所有配料&quot;&quot;&quot; </span><br><span class="line">    print(toppings)</span><br><span class="line"></span><br><span class="line"># 任意数量实参, 如果是键值对，请使用**双星号，比如：</span><br><span class="line">def build_profile(first,last,**user_info):</span><br><span class="line">    for key, value in user_info.items(): </span><br><span class="line">        print(&quot;key=&quot; + key + &quot;value=&quot; + value)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：任意数量实参只能有一个，并且只能放在函数最后一个参数的位置</p>
</blockquote>
</li>
<li><p>模块导入：类似java 在一个类文件中，导入另外一个文件类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#: 使用userspace 引入空间，既可以直接使用空间中的类</span><br><span class="line">one.cs：内容如下</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">namespace onens </span><br><span class="line">&#123;</span><br><span class="line">    public class One</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">two.cs：内容如下</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">using onens</span><br><span class="line">namespace twons</span><br><span class="line">&#123;</span><br><span class="line">    public class Two</span><br><span class="line">    &#123;</span><br><span class="line">        public Two()</span><br><span class="line">        &#123;</span><br><span class="line">            var one = new One()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python: 导出模块后，就可以通过模块名称访问其中的所有方法</span><br><span class="line">OneModule.py：内容如下</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">def one(name, address):</span><br><span class="line">    print(name + &quot;&quot; + address)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">TwoModule.py：内容如下</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">import OneModule</span><br><span class="line">def two():</span><br><span class="line">    OneModule.one(&quot;potter&quot;,&quot;sz&quot;)</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入特定函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#: 没有导出特定函数一说，只有using namespace的内容 或者说import dll中的方法，比如：</span><br><span class="line">[DllImport(&quot;User32.DLL&quot;)]</span><br><span class="line">public static extern IntPtr GetActiveWindow();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Python：</span><br><span class="line">from module_name import function_name1，function_name2...</span><br><span class="line"># 使用as给导入函数取别名</span><br><span class="line">from module_name import fuction_name as fn</span><br><span class="line"># 使用as给导入模块取别名</span><br><span class="line">import module_name as mn</span><br><span class="line"># 使用*号，导入模块所有函数</span><br><span class="line">from module_name import *</span><br></pre></td></tr></table></figure></li>
<li>类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造方法</span><br><span class="line">C#: </span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public Test(string name,string address)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Python: __init__ 就是构造方法, self是自动传递的</span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self, name, address):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.address = address</span><br><span class="line">    def hello(self):</span><br><span class="line">        print(&quot;hello&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>继承<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#：</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">class Car</span><br><span class="line">&#123;</span><br><span class="line">    private string make;</span><br><span class="line">    private string model;</span><br><span class="line">    private string year;</span><br><span class="line">    public Car(string make, string model, string year)</span><br><span class="line">    &#123;</span><br><span class="line">        this.make = make;</span><br><span class="line">        this.model = model;</span><br><span class="line">        this.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    public virtual void Run() </span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">class ElectricCar : Car</span><br><span class="line">&#123;</span><br><span class="line">    private string makeAddress;</span><br><span class="line">    public ElectricCar(string makeAddress, string make, string model ,string year) : base(make, model,year)</span><br><span class="line">    &#123;</span><br><span class="line">        this.makeAddress = makeAddress;</span><br><span class="line">    &#125;</span><br><span class="line">    public override void Run()</span><br><span class="line">    &#123;</span><br><span class="line">        base.Run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python:</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">class Car():</span><br><span class="line">    def __init__(self,make,model,year):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">    def run():</span><br><span class="line">        print(&quot;run&quot;)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">class ElectricCar(Car):</span><br><span class="line">    def __init__(self,make,model,year):</span><br><span class="line">        super().__init__(make,model,year)</span><br><span class="line">    def run()</span><br><span class="line">        ***子类重写父类方法，同名即可***</span><br><span class="line">        print(&quot;ElectricCar run&quot;)</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
<li>导入类：(格式：from module_name import class,class)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from car import Car</span><br><span class="line">my_new_car = Car(&#x27;audi&#x27;, &#x27;a4&#x27;, 2016)</span><br></pre></td></tr></table></figure></li>
<li>文件读写<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#: </span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">1. 读取整个文件</span><br><span class="line">using (FileStream fs = File.Open(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))</span><br><span class="line">&#123;</span><br><span class="line">    StreamReader sr = new StreamReader(fs);</span><br><span class="line">    strContent = sr.ReadToEnd();</span><br><span class="line">    sr.Close();</span><br><span class="line">    fs.Close();</span><br><span class="line">&#125;</span><br><span class="line">2. 逐行读取文件</span><br><span class="line">using (StreamReader sr = new StreamReader(filepath))</span><br><span class="line">&#123;</span><br><span class="line">    String line;</span><br><span class="line">    while((line=sr.ReadLine())!=null)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">3. 写入文件</span><br><span class="line">using (FileStream fs = File.Open(filepath, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))</span><br><span class="line">&#123;</span><br><span class="line">    StreamWriter sw = new StreamWriter(fs);</span><br><span class="line">    sw.WriteLine(content);</span><br><span class="line">    sw.Flush();</span><br><span class="line">    sw.Close();</span><br><span class="line">    fs.Close();</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python:</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">1.读取整个文件，使用rstrip过滤掉前后空格</span><br><span class="line">with open(&#x27;pi_digits.txt&#x27;) as file_object: </span><br><span class="line">    contents = file_object.read() </span><br><span class="line">    print(contents.rstrip())</span><br><span class="line">2. 逐行读取文件</span><br><span class="line">with open(&#x27;pi_digits.txt&#x27;) as file_object: </span><br><span class="line">    for line in file_object: </span><br><span class="line">    print(line.rstrip())</span><br><span class="line">3. 写入文件：&#x27;w&#x27;、&#x27;r&#x27;、&#x27;a&#x27; 分别代表&#x27;写&#x27;、&#x27;读&#x27;、&#x27;追加&#x27;</span><br><span class="line">filename = &#x27;programming.txt&#x27; </span><br><span class="line">with open(filename, &#x27;w&#x27;) as file_object: </span><br><span class="line">    file_object.write(&quot;I love programming.&quot;)</span><br></pre></td></tr></table></figure></li>
<li>存取数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#：其实就是文件写和读</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python: </span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">1. 存：</span><br><span class="line">import json </span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line">with open(filename, &#x27;w&#x27;) as f_obj: </span><br><span class="line">    json.dump(numbers, f_obj)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">2. 取</span><br><span class="line">import json </span><br><span class="line">with open(filename, &#x27;r&#x27;) as f_obj:</span><br><span class="line">    print(json.load(f_obj))</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
<li>异常<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#：</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">int r = 0;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    r = 5/0</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;出现异常&quot;);</span><br><span class="line">&#125;</span><br><span class="line">finally</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;try最后执行代码&quot;);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python：</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">try:</span><br><span class="line">    r = 5/0</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    raise Exception(&quot;抛出异常：除数不能为0&quot;)</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    print(&quot;异常打印：文件找不到&quot;)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;其他异常&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;无异常，打印此句&quot;)</span><br><span class="line">finally:</span><br><span class="line">    print(&quot;最后打印此句&quot;)</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">1. else 缩进后代码，相当于把这部分代码放到try-except中或者取消缩进放到最后一样，没啥特别的</span><br><span class="line">2. except 不带具体异常，就相当于C#的catch(Exception)</span><br><span class="line">3. raise 相当于C#的throw</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
<li>lambda<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C#：</span><br><span class="line">格式：(arguments) =&gt; &#123; expression &#125;;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Func&lt;int, int&gt; func = (x) =&gt; &#123; return x + 5; &#125;;</span><br><span class="line">Console.WriteLine(&quot;&quot; + func(5));</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">格式：lambda arguments : expression</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">func = lambda a : a + 10</span><br><span class="line">print(func(5))</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
<li>API <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Python: (注意：使用前请使用pip install requests 安装requests模块)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">import requests</span><br><span class="line">url = &#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(&quot;Status code:&quot;, response.status_code)</span><br><span class="line"># 将API响应存储在一个变量中</span><br><span class="line">response_dict = response.json()</span><br><span class="line">print(&quot;Total repositories:&quot;, response_dict[&#x27;total_count&#x27;])</span><br><span class="line"># 用完记得关闭，否则下次运行会报：远程主机强迫关闭了一个现有的连接</span><br><span class="line">response.close()</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Web如何防调试</title>
    <url>/2022/11/13/Securite/Web01/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>常用防调试方法</li>
<li>引入条件编译打包</li>
</ul>
<span id="more"></span>
<hr>
<h3 id="常用防调试方法"><a href="#常用防调试方法" class="headerlink" title="常用防调试方法"></a>常用防调试方法</h3><ul>
<li>屏蔽：相关按键 + 鼠标右键</li>
<li>检测控制台是否打开</li>
<li>检测DevTools 是否打开</li>
<li>工具类：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//*************************************************************************</span><br><span class="line">//     创建日期:     2020-12-23 04:12:52</span><br><span class="line">//     文件名称:     AntiDebugUtil.js</span><br><span class="line">//     创建作者:     Harry</span><br><span class="line">//     版权所有:     剑齿虎</span><br><span class="line">//     开发版本:     V1.0</span><br><span class="line">//     相关说明:     反调试程序</span><br><span class="line">//*************************************************************************</span><br><span class="line"></span><br><span class="line">//-------------------------------------------------------------------------</span><br><span class="line">function AntiDebugUtils() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//-------------------------------------------------------------------------</span><br><span class="line">/**</span><br><span class="line"> * 监听按键 + 鼠标右键</span><br><span class="line"> * */</span><br><span class="line">AntiDebugUtils.prototype.registerKeyDown = function () &#123;</span><br><span class="line">  console.log(&quot;hook-----&gt;registerKeyDown&quot;);</span><br><span class="line">  /*监听F12、Ctrl + Shift + I、Ctrl + S*/</span><br><span class="line">  document.onkeydown = function (event) &#123;</span><br><span class="line">    if (event.key === &quot;F12&quot;) &#123;</span><br><span class="line">      console.log(&quot;KeyDown: F12&quot;);</span><br><span class="line">      event.returnValue = false;</span><br><span class="line">    &#125; else if (event.ctrlKey &amp;&amp; event.shiftKey &amp;&amp; event.key === &quot;I&quot;) &#123;//此处I必须大写</span><br><span class="line">      console.log(&quot;KeyDown: Ctrl + Shift + I&quot;);</span><br><span class="line">      event.returnValue = false;</span><br><span class="line">    &#125; else if (event.ctrlKey &amp;&amp; event.key === &quot;s&quot;) &#123;//此处s必须小写</span><br><span class="line">      console.log(&quot;KeyDown: Ctrl + S&quot;);</span><br><span class="line">      event.returnValue = false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line">* 监听右键菜单</span><br><span class="line">* */</span><br><span class="line">  document.oncontextmenu = function (event) &#123;</span><br><span class="line">    console.log(&quot;KeyDown: 鼠标右键&quot;);</span><br><span class="line">    event.returnValue = false;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">//-------------------------------------------------------------------------</span><br><span class="line">/*</span><br><span class="line">* 检测控制台是否打开</span><br><span class="line">* */</span><br><span class="line">AntiDebugUtils.prototype.registerConsoleWindow = function () &#123;</span><br><span class="line">  console.log(&quot;hook-----&gt;registerConsoleWindow&quot;);</span><br><span class="line">  setInterval(function () &#123;</span><br><span class="line">    const before = new Date();</span><br><span class="line">    (function () &#123;</span><br><span class="line">    &#125;).constructor(&quot;debugger&quot;)();</span><br><span class="line">    // debugger;</span><br><span class="line">    const after = new Date();</span><br><span class="line">    const cost = after.getTime() - before.getTime();</span><br><span class="line">    if (cost &gt; 100) &#123;</span><br><span class="line">      console.log(&quot;registerConsoleWindow: 检测到打开了调试窗口&quot;);</span><br><span class="line">      window.location = &quot;about:blank&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line">//-------------------------------------------------------------------------</span><br><span class="line">/*</span><br><span class="line">* 检测DevTools 是否打开</span><br><span class="line">* */</span><br><span class="line">AntiDebugUtils.prototype.registerDevTools = function () &#123;</span><br><span class="line">  console.log(&quot;hook-----&gt;registerDevTools&quot;);</span><br><span class="line">  let div = document.createElement(&#x27;div&#x27;);</span><br><span class="line">  let loop = setInterval(() =&gt; &#123;</span><br><span class="line">    console.log(div);</span><br><span class="line">    console.clear();</span><br><span class="line">  &#125;);</span><br><span class="line">  Object.defineProperty(div, &quot;id&quot;, &#123;</span><br><span class="line">    get: () =&gt; &#123;</span><br><span class="line">      clearInterval(loop);</span><br><span class="line">      window.location = &quot;about:blank&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">//-------------------------------------------------------------------------</span><br><span class="line">AntiDebugUtils.prototype.hook = function () &#123;</span><br><span class="line">  console.log(&quot;hook-----&gt;&quot;);</span><br><span class="line">  // this.registerKeyDown();</span><br><span class="line">  // this.registerConsoleWindow();</span><br><span class="line">  // this.registerDevTools();</span><br><span class="line">&#125;</span><br><span class="line">//-------------------------------------------------------------------------</span><br><span class="line">const antiDebugUtils = new AntiDebugUtils();</span><br><span class="line">export default antiDebugUtils;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>使用方法：main.js 引入和挂在即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* IFTRUE_isRelease */</span><br><span class="line">import antiDebugUtils from &quot;./utls/AntiDebugUtil&quot;;</span><br><span class="line">antiDebugUtils.hook();</span><br><span class="line">/*FITRUE_isRelease */</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="引入条件编译打包："><a href="#引入条件编译打包：" class="headerlink" title="引入条件编译打包："></a>引入条件编译打包：</h3><blockquote>
<p>项目随着需求不断迭代开发，无法避免的会出现各种环境、各种渠道等，然后针对其打出不同的包，所以就需要我们去了解下条件编译，针对不同条件把不符合条件的代码(JS\CSS\HTML)排除，条件编译插件很多，推荐js-conditional-compile-loader插件，我针对JS\CSS\HTML 分别进行条件编译测试都通过，简单好用</p>
</blockquote>
<ul>
<li>配置条件变量：修改webpack.base.conf.js中的配置(提示：如果使用不同版本Webpack，可能没有webpack.base.conf.js，那么找对应的webpack配置文件即可)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 根据自己的喜好在options中添加条件变量</span><br><span class="line">const conditionalCompiler = &#123;</span><br><span class="line">  loader: &#x27;js-conditional-compile-loader&#x27;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    isBeta: (process.env.ENV_CONFIG !== &quot;prod&quot;) ? true : false,</span><br><span class="line">    isRelease: (process.env.ENV_CONFIG === &quot;prod&quot;) ? true : false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 找到module.exports中的module.rules, 修改成如下样子</span><br><span class="line">&#123;</span><br><span class="line">    test: /\.vue$/,</span><br><span class="line">    use: [&#x27;vue-loader&#x27;, conditionalCompiler],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">test: /\.js$/,</span><br><span class="line">include: [resolve(&#x27;src&#x27;), resolve(&#x27;test&#x27;)],</span><br><span class="line">use: [</span><br><span class="line">    //step-2</span><br><span class="line">    &#x27;babel-loader?cacheDirectory&#x27;,</span><br><span class="line">    //step-1</span><br><span class="line">    conditionalCompiler,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>使用方法：</p>
<blockquote>
<p>/<em> IFTRUE_条件变量 </em>/  you need contorl coding..  /<em>FITRUE_条件变量 </em>/</p>
</blockquote>
</li>
<li><p>示例：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* IFTRUE_isRelease */</span><br><span class="line">import antiDebugUtils from &quot;./utls/AntiDebugUtil&quot;;</span><br><span class="line">antiDebugUtils.hook();</span><br><span class="line">/*FITRUE_isRelease */</span><br></pre></td></tr></table></figure>
<ul>
<li>更多：<blockquote>
<p>其实上面的一种方法就够我用了，你如需了解更多用法请查看API <a href="https://github.com/hzsrc/js-conditional-compile-loader/blob/master/readme-cn.md">传输门</a></p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><blockquote>
<p>现在我们知道怎么防调试了，那接下来怎么做到更安全，那就是把代码混淆掉。下一篇：<a href="">Web代码混淆</a></p>
</blockquote>
<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul>
<li><a href="https://www.zhangbj.com/p/585.html">Web防调试方法</a></li>
<li><a href="https://github.com/hzsrc/js-conditional-compile-loader/blob/master/readme-cn.md">js-conditional-compile-loader 使用教程</a></li>
</ul>
<h3 id="更多相关："><a href="#更多相关：" class="headerlink" title="更多相关："></a>更多相关：</h3><ul>
<li>[conditional-compile-loader]<a href="https://developer.aliyun.com/mirror/npm/package/conditional-compile-loader">https://developer.aliyun.com/mirror/npm/package/conditional-compile-loader</a></li>
<li><a href="https://flands.com/2018/11/06/29.%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/#package-json">webpack Vue条件编译</a></li>
<li><a href="https://zoumiaojiang.com/article/common-web-security/">常见 Web 安全攻防总结</a></li>
<li><a href="https://www.zhangbj.com/p/586.html">攻破Web防调试方法</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>防调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Web代码混淆</title>
    <url>/2022/11/13/Securite/Web02/</url>
    <content><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>代码混淆</li>
<li>环境准备</li>
<li>如何配置UglifyJsPlugin混淆参数</li>
<li>混淆效果</li>
<li>Demo源码工程</li>
</ul>
<span id="more"></span>
<h3 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h3><ul>
<li><p>定义：代码混淆(Obfuscated code)亦称花指令，是将计算机程序的代码，转换成一种功能上等价，但是难于阅读和理解的形式的行为。通俗一点讲就是你写的代码，通过混淆工具，把你的源代码混淆得别人看不太懂。</p>
</li>
<li><p>起因：由于Web可以用浏览器调试工具，直接查看到我们的源代码，如果我们的源代码中包含了敏感信息(比如：加密密钥、服务器内部接口地址等)，那么对于不怀好意的人，就可能拿着这些东西攻击我们的服务器，所以我们需要把我们的代码去掉注释、混淆代码等，这样别人就没那么容易看懂我们的代码了，提高服务被攻击的门槛。</p>
</li>
</ul>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote>
<p>由于我尝试使用WebPack3.x的版本，利用UglifyJsPlugin版本来混淆打包，发现各种配置问题，然后导致打包出问题，所以推荐WebPack4.x 以上版本。我的环境如下</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies&quot;: &#123;</span><br><span class="line">		&quot;vue&quot;: &quot;^2.6.11&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/cli&quot;: &quot;^7.8.4&quot;,</span><br><span class="line">    &quot;@babel/core&quot;: &quot;^7.8.7&quot;,</span><br><span class="line">    &quot;@babel/preset-env&quot;: &quot;^7.8.7&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^8.0.6&quot;,</span><br><span class="line">    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^3.4.2&quot;,</span><br><span class="line">    &quot;html-loader&quot;: &quot;^1.3.2&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">    &quot;uglifyjs-webpack-plugin&quot;: &quot;^2.2.0&quot;,</span><br><span class="line">    &quot;url-loader&quot;: &quot;^4.1.1&quot;,</span><br><span class="line">    &quot;vue-loader&quot;: &quot;^15.9.0&quot;,</span><br><span class="line">    &quot;vue-style-loader&quot;: &quot;^4.1.2&quot;,</span><br><span class="line">    &quot;vue-template-compiler&quot;: &quot;^2.6.11&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.42.0&quot;,</span><br><span class="line">    &quot;webpack-bundle-analyzer&quot;: &quot;^4.3.0&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.11&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.10.3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何配置UglifyJsPlugin混淆参数"><a href="#如何配置UglifyJsPlugin混淆参数" class="headerlink" title="如何配置UglifyJsPlugin混淆参数"></a>如何配置UglifyJsPlugin混淆参数</h3><blockquote>
<p>由于混淆需指定混淆哪些代码，不能把JS提供的API、第三方库的API相关的代码也给混淆掉，所以需要在写代码时一定要养成养好的编码规范，这样在配置混淆正在表达式时就非常好些了。以下介绍我的2种命令规范，所以下面的混淆正则表达式就非常好写。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m_xxx : 成员变量</span><br><span class="line">__function : 方法名</span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new UglifyJsPlugin(</span><br><span class="line">&#123;</span><br><span class="line">    uglifyOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">            // warnings: false,</span><br><span class="line">            /* 移除没被引用的代码 */</span><br><span class="line">            dead_code: true,</span><br><span class="line">            /* 当 Function(args, code)的args 和 code都是字符串时，压缩并混淆 */</span><br><span class="line">            // unsafe_Func: true,</span><br><span class="line">            /* 干掉没有被引用的函数和变量 */</span><br><span class="line">            unused: true,</span><br><span class="line">            /* 干掉顶层作用域中没有被引用的函数或变量 */</span><br><span class="line">            toplevel: true,</span><br><span class="line">            /* 干掉console.*函数 */</span><br><span class="line">            drop_console: true,</span><br><span class="line">            /* 干掉Debugger*/</span><br><span class="line">            drop_debugger: true,</span><br><span class="line">            /* 压缩代码次数 注意：数字越大压缩耗时越长 */</span><br><span class="line">            passes: 1,</span><br><span class="line">            /* 传true以防止压缩时把1/0转成Infinity，那可能会在chrome上有性能问题 */</span><br><span class="line">            keep_infinity: true</span><br><span class="line">        &#125;,</span><br><span class="line">        output: &#123;</span><br><span class="line">            comments: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        mangle: &#123;</span><br><span class="line">            properties: &#123;</span><br><span class="line">                // keep_fnames: false,</span><br><span class="line">                /* 说明：混淆正在表达式就非常好写 */</span><br><span class="line">                regex: /(^__|^m_)\w+/,</span><br><span class="line">                reserved: [&quot;$&quot;, &quot;iv&quot;, &quot;mode&quot;, &quot;padding&quot;, &quot;CryptoJS&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    cache: true,</span><br><span class="line">    extractComments: false,</span><br><span class="line">    sourceMap: false,</span><br><span class="line">    parallel: true</span><br><span class="line">&#125;</span><br><span class="line">),</span><br></pre></td></tr></table></figure>
<h3 id="混淆效果"><a href="#混淆效果" class="headerlink" title="混淆效果"></a>混淆效果</h3><p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/20201229141408.png" alt=""></p>
<h3 id="Demo源码工程"><a href="#Demo源码工程" class="headerlink" title="Demo源码工程"></a>Demo源码工程</h3><ul>
<li>访问地址：<a href="https://github.com/aa4790139/webpack4_confuse_demo">https://github.com/aa4790139/webpack4_confuse_demo</a></li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://www.freebuf.com/articles/web/102269.html">可信前端之路：代码保护</a></li>
<li><a href="https://webpack.docschina.org/plugins/uglifyjs-webpack-plugin/">UglifyjsWebpackPlugin 使用说明</a></li>
<li><a href="https://github.com/LiPinghai/UglifyJSDocCN/blob/master/README.md#compress-options">UglifyJSDocCN</a></li>
<li><a href="http://lisperator.net/uglifyjs/transform">UglifyJS</a></li>
<li><a href="https://segmentfault.com/a/1190000008995453">UglifyJS中文文档</a></li>
<li><a href="https://github.com/yacan8/blog/blob/master/posts/JavaScript%E6%B7%B7%E6%B7%86%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA.md">JavaScript混淆安全加固</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>混淆</tag>
        <tag>UglifyJS</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 入门1：创建一个在Chrome上运行的TypeScript Demo</title>
    <url>/2022/11/13/TS/TypeScript01/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>目前使用TypeScript编写前端项目已成为趋势，所以搞一个运行在Chrome的demo 来方便练习一下TypeScript 相关语法。由于技术更新太快，会导致你在网上参考的例子可能已经过时，或者运行不起来。我的建议还是直接先去看官方文档，尝试这编写demo，实在搞不出来再去Google 查找相关文章。</p>
</blockquote>
<h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><ul>
<li>vscode：1.53.2</li>
<li>chrome：87.0.42.80.141</li>
<li>Node.js：12.8.3</li>
<li>win10</li>
</ul>
<span id="more"></span>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ul>
<li><strong>第一步：创建工程</strong>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建目录工程</span><br><span class="line">mkdir typescript_chrom_demo</span><br><span class="line"></span><br><span class="line">//安装typescript 编译环境（推荐：使用pnpm安装，速度贼快）</span><br><span class="line">pnpm install -g typescript</span><br><span class="line"></span><br><span class="line">//初始化工程，会产生tsconfig.json 配置文件</span><br><span class="line">tsc ---init</span><br></pre></td></tr></table></figure></li>
<li><p><strong>第二步：创建目录和相关文件</strong></p>
<ul>
<li>目录结构效果<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210304153444.png" alt=""></li>
<li><p>具体内容如下：<br>  <strong>helloworld.html</strong></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">       &lt;title&gt;This is a use TypeScript HTML demo&lt;/title&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">   &lt;script src=&quot;../out/helloworld.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>  <strong>helloworld.ts</strong></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let message: string = &#x27;Hello Web, I am is TypeSciprt&#x27;;</span><br><span class="line">console.log(message);</span><br><span class="line">document.body.textContent = message;</span><br></pre></td></tr></table></figure>
<p>  <strong>tsconfig.json</strong></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;target&quot;: &quot;es5&quot;,                           </span><br><span class="line">    &quot;module&quot;: &quot;amd&quot;,                          </span><br><span class="line">    &quot;outFile&quot;: &quot;./out/helloworld.js&quot;,         </span><br><span class="line">    &quot;strict&quot;: true,                           </span><br><span class="line">    &quot;esModuleInterop&quot;: true,                   </span><br><span class="line">    &quot;skipLibCheck&quot;: true,                     </span><br><span class="line">    &quot;forceConsistentCasingInFileNames&quot;: true  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><strong>第三步：创建运行和调试launch.json</strong><br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210304153458.png" alt=""><br><strong>内容如下</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;pwa-chrome&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;Open helloworld.html&quot;,</span><br><span class="line">            &quot;file&quot;: &quot;d:\\Work\\h5_workspace\\typescript_chrome_demo\\src\\helloworld.html&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>第四步：打开终端，开启自动编译typescript</strong></p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc -w</span><br></pre></td></tr></table></figure>

**效果如下**
</code></pre></li>
</ul>
<ul>
<li><p><strong>最后：F5启动运行</strong></p>
<p>  <strong>效果如下</strong><br>  <img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210304153521.png" alt=""></p>
</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://code.visualstudio.com/docs/typescript/typescript-tutorial">TypeScript tutorial in Visual Studio Code</a></li>
<li><a href="https://code.visualstudio.com/docs/editor/debugging#_start-debugging">VSCode Debugging</a></li>
<li><a href="https://www.tektutorialshub.com/typescript/typescript-compile-on-save-in-visual-studio-code/">TypeScript Compile on Save in Visual Studio Code</a></li>
</ul>
]]></content>
      <categories>
        <category>TypeScript 入门</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>VSCode</tag>
        <tag>Chrom</tag>
      </tags>
  </entry>
  <entry>
    <title>知道这些软件，让你工作得更顺心 [Part 1]</title>
    <url>/2022/11/13/Tools%20Share/Normal01/</url>
    <content><![CDATA[<ul>
<li><a href="#drawing">Drawing</a><ul>
<li><a href="#xmind">XMind</a></li>
<li><a href="#diagramsnet">Diagrams.net</a></li>
</ul>
</li>
<li><a href="#colour-assortment">Colour Assortment</a><ul>
<li><a href="#coolors">coolors</a></li>
<li><a href="#colorhunt">colorhunt</a></li>
</ul>
</li>
<li><a href="#picture-processing">Picture Processing</a><ul>
<li><a href="#magiceraser">magiceraser</a></li>
<li><a href="#removebg">remove.bg</a></li>
<li><a href="#watermarkremover">watermarkremover</a></li>
<li><a href="#inpaint">inpaint</a></li>
<li><a href="#gigapixel-ai">Gigapixel AI</a></li>
<li><a href="#photopea">photopea</a></li>
<li><a href="#tinypng">tinypng</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>提醒：以下分享的软件存在很多相关工具，我仅把个人认为比较好的软件分享给大家，其他相似软件就不列举了</p>
</blockquote>
<span id="more"></span>
<h1 id="Drawing"><a href="#Drawing" class="headerlink" title="Drawing"></a>Drawing</h1><h2 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a><a href="https://www.xmind.net/">XMind</a></h2><p>如果你想不清一件事或者想头脑风暴一下，让 xmind 来帮你整理思考<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220331144259.jpg" alt=""></p>
<h2 id="Diagrams-net"><a href="#Diagrams-net" class="headerlink" title="Diagrams.net"></a><a href="https://app.diagrams.net/">Diagrams.net</a></h2><p>这是一款免费的绘图软件，可以绘制你需要的各种图形，他常常帮我理清思路和流程<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220331101634.jpg" alt=""></p>
<h1 id="Colour-Assortment"><a href="#Colour-Assortment" class="headerlink" title="Colour Assortment"></a>Colour Assortment</h1><p>聊完画图，你肯定会遇到画出来的图不美观，这就推荐几个颜色搭配的网站给你，解决色彩难题</p>
<h2 id="coolors"><a href="#coolors" class="headerlink" title="coolors"></a><a href="https://coolors.co/">coolors</a></h2><p>快速随机生成搭配色<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220401102048.gif" alt=""></p>
<h2 id="colorhunt"><a href="#colorhunt" class="headerlink" title="colorhunt"></a><a href="https://colorhunt.co/palettes/pastel">colorhunt</a></h2><p>如何觉得很难生成到中意的搭配色，直接利用找搭配色<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220401102340.jpg" alt=""></p>
<h1 id="Picture-Processing"><a href="#Picture-Processing" class="headerlink" title="Picture Processing"></a>Picture Processing</h1><h2 id="magiceraser"><a href="#magiceraser" class="headerlink" title="magiceraser"></a><a href="https://www.magiceraser.io/">magiceraser</a></h2><p>如果你是非设计相关人员，你肯定在笨拙的使用抠图软件，现在你可以省去这种工作，直接利用 AI 帮你轻松抠图了<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20220331213123.gif" alt=""></p>
<h2 id="remove-bg"><a href="#remove-bg" class="headerlink" title="remove.bg"></a><a href="https://www.remove.bg/">remove.bg</a></h2><p>你是不是有时，利用它轻松帮你去除背景<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20220331214238.gif" alt=""></p>
<h2 id="watermarkremover"><a href="#watermarkremover" class="headerlink" title="watermarkremover"></a><a href="https://www.watermarkremover.io/">watermarkremover</a></h2><p>利用它轻松帮你去除各种水印<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20220331214609.png" alt=""></p>
<h2 id="inpaint"><a href="#inpaint" class="headerlink" title="inpaint"></a><a href="https://theinpaint.com/">inpaint</a></h2><ul>
<li>Remove any unwanted elements</li>
<li>Remove objects from photos</li>
<li>Repair old photos</li>
<li>Improve your skin with Inpaint</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20220331215517.png" alt=""></p>
<h2 id="Gigapixel-AI"><a href="#Gigapixel-AI" class="headerlink" title="Gigapixel AI"></a><a href="https://www.topazlabs.com/gigapixel-ai#">Gigapixel AI</a></h2><p>利用它可以帮你提升画质、增加各种细节处理，当你对糟糕的图片已优化到束手无策时，可以用它试试<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20220331225028.gif" alt=""></p>
<h2 id="photopea"><a href="#photopea" class="headerlink" title="photopea"></a><a href="https://www.photopea.com/">photopea</a></h2><p>如果想避免安装 photoshop,可以使用 photopea 来完成你的复杂设计。<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20220331222136.jpg" alt=""></p>
<h2 id="tinypng"><a href="#tinypng" class="headerlink" title="tinypng"></a><a href="https://tinypng.com">tinypng</a></h2><p>它可以高比例压缩 WebP,PNG,JPEG 图片，而且图片几乎看不出画质损失，它已陪伴我工作十多年</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20220331212515.png" alt=""></p>
<p>感谢阅读，如果你有趣的工具分享，欢迎给我留言</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app 如何引入Iconfont阿里巴巴矢量图标库</title>
    <url>/2022/11/13/Uniapp/UniApp01/</url>
    <content><![CDATA[<h3 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下:"></a>步骤如下:</h3><ol>
<li>下载图标项目, 解压后效果如下<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/20201113164039.png" alt=""></li>
<li><p>修改iconfont.css文件</p>
<p> 修改前格式：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@font-face &#123;font-family: &quot;iconfont&quot;;</span><br><span class="line">src: url(&#x27;iconfont.eot?t=1605254910083&#x27;); /* IE9 */</span><br><span class="line">src: url(&#x27;iconfont.eot?t=1605254910083#iefix&#x27;) format(&#x27;embedded-opentype&#x27;), /* IE6-IE8 */</span><br><span class="line">url(&#x27;data:application/x-font-woff2;charset=utf-8;base64,转换的base64内容&#x27;) format(&#x27;woff2&#x27;),</span><br><span class="line">url(&#x27;iconfont.woff?t=1605254910083&#x27;) format(&#x27;woff&#x27;),</span><br><span class="line">url(&#x27;iconfont.ttf?t=1605254910083&#x27;) format(&#x27;truetype&#x27;), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span><br><span class="line">url(&#x27;iconfont.svg?t=1605254910083#iconfont&#x27;) format(&#x27;svg&#x27;); /* iOS 4.1- */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 修改后格式: </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &quot;iconfont&quot;;</span><br><span class="line">    src: url(&#x27;data:application/x-font-woff2;charset=utf-8;base64,转换的base64内容&#x27;) format(&#x27;woff2&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Copy字体文件iconfont.ttf和样式文件iconfont.css 至UniApp项目static/font目录中</li>
</ol>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 02：编译时动态替换配置方案</title>
    <url>/2022/11/13/Uniapp/UniApp02/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>通过vue.config 实现</li>
<li>示例</li>
</ul>
<hr>
<h2 id="通过vue-config-实现"><a href="#通过vue-config-实现" class="headerlink" title="通过vue.config 实现"></a>通过vue.config 实现</h2><hr>
<p>由于我们公司业务需求，同一份uniapp项目代码需搞出两个不同名称的小程序，所以每次切换项目配置时，需要改好几处配置信息。根据以前的经验，就是通过webpack编译时，动态选择不同的配置。看到工程项目结构后我傻眼了，编译相关的uniapp 框架完全封装集成完，让人无需关系。可问题是我现在需要啊~…  😭</p>
<span id="more"></span>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210513221230.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210513221230.png"></p>
<p>先google一下，都找不到uniapp 编译相关资料。只好翻uniapp 官网，看到以下信息，希望就在眼前。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210513222337.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210513222337.png"></p>
<p>所以解决方案就来了  😜</p>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><ul>
<li><p>首先：项目根目录创建vue.config.js</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210513222808.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210513222808.png"></p>
</li>
<li><p>其次：vue.config.js（替换微信小程序appid）</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建日期: 2021-05-13</span></span><br><span class="line"><span class="comment">* 文件名称：vue.config.js</span></span><br><span class="line"><span class="comment">* 创建作者：Potter</span></span><br><span class="line"><span class="comment">* 开发版本：1.0.0</span></span><br><span class="line"><span class="comment">* 相关说明：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Compile [Auto replace config]: Go...&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取launch_config.json 配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> serverConfig = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./static/launch_config.json&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">	<span class="keyword">let</span> launchConfig = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">	serverConfig = launchConfig[<span class="string">&quot;server_configs&quot;</span>][launchConfig[<span class="string">&quot;server&quot;</span>]];</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Compile [Auto replace config] : current choice configInfo=&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(serverConfig));</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Compile [Auto replace config] : read lanch_config error ! e=&quot;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取manifest.json, 采用当前渲染server_config 替换掉manifest.json 中的对应字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> manifestPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./manifest.json&#x27;</span>);</span><br><span class="line">	<span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(manifestPath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">	<span class="keyword">let</span> manifest = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line"></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Compile [Auto replace config] : manifest &quot;</span> + <span class="string">`appid[<span class="subst">$&#123;manifest[<span class="string">&quot;mp-weixin&quot;</span>][<span class="string">&#x27;appid&#x27;</span>]&#125;</span>-&gt;<span class="subst">$&#123;serverConfig[<span class="string">&#x27;appid&#x27;</span>]&#125;</span>]`</span>);</span><br><span class="line">	manifest[<span class="string">&quot;mp-weixin&quot;</span>][<span class="string">&#x27;appid&#x27;</span>] = serverConfig[<span class="string">&#x27;appid&#x27;</span>];</span><br><span class="line"></span><br><span class="line">	fs.<span class="title function_">writeFileSync</span>(manifestPath, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(manifest, <span class="literal">null</span>, <span class="number">4</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Compile [Auto replace config] : read manifest error ! e=&quot;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Compile [Auto replace config]: Complete !&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后：运行即可，可以看到以下appid 已替换</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210513223413.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210513223413.png"></p>
</li>
</ul>
<hr>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>uniapp 入门实战</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 03：富文本显示</title>
    <url>/2022/11/13/Uniapp/UniApp03/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>需求效果</li>
<li>解决方案一：利用rich-text的v-html属性</li>
<li>解决方案二：利用rich-text的nodes参数</li>
</ul>
<h2 id="实现效果："><a href="#实现效果：" class="headerlink" title="实现效果："></a>实现效果：</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210602132458.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210602132458.png"></p>
<p>这行文字包含3部分，前：“您当前有”，中：“3”，后：“个客户”，最直接的方案就是用三个view标签搞定。我想万一有很多段需要特殊突显显示怎么办法？这种直接办法就不可取了，所以去官网了解富文本组件。</p>
<hr>
<span id="more"></span>
<h2 id="方案一：利用rich-text的v-html属性"><a href="#方案一：利用rich-text的v-html属性" class="headerlink" title="方案一：利用rich-text的v-html属性"></a>方案一：利用rich-text的v-html属性</h2><hr>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">v-html</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;color: &#x27;#818181&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			<span class="attr">text</span>:<span class="string">`您当前有&lt;span style=&quot;color:#E2434A;font-weight:bold;&quot;&gt; 3 &lt;/span&gt;个客户`</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方案二：利用rich-text的nodes参数"><a href="#方案二：利用rich-text的nodes参数" class="headerlink" title="方案二：利用rich-text的nodes参数"></a>方案二：利用rich-text的nodes参数</h2><hr>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">:nodes</span>=<span class="string">&quot;nodes&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			<span class="attr">nodes</span>: [</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">name</span>: <span class="string">&#x27;span&#x27;</span>,</span><br><span class="line">					<span class="attr">attrs</span>: &#123;</span><br><span class="line">						<span class="attr">style</span>: <span class="string">&#x27;font-size: 12px; color: #818181;&#x27;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">children</span>: [</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">							<span class="attr">text</span>: <span class="string">&#x27;您当前有&#x27;</span></span><br><span class="line">						&#125;</span><br><span class="line">					]</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">name</span>: <span class="string">&#x27;span&#x27;</span>,</span><br><span class="line">					<span class="attr">attrs</span>: &#123;</span><br><span class="line">						<span class="attr">style</span>: <span class="string">&#x27;font-size: 12px; color: red;&#x27;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">children</span>: [</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">							<span class="attr">text</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">						&#125;</span><br><span class="line">					]</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">name</span>: <span class="string">&#x27;span&#x27;</span>,</span><br><span class="line">					<span class="attr">attrs</span>: &#123;</span><br><span class="line">						<span class="attr">style</span>: <span class="string">&#x27;font-size: 12px; color: #818181;&#x27;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">children</span>: [</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">							<span class="attr">text</span>: <span class="string">&#x27;个客户&#x27;</span></span><br><span class="line">						&#125;</span><br><span class="line">					]</span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>使用rich-text外面需套一层view，否则会出现不显示或不生效问题</li>
</ul>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://ask.dcloud.net.cn/article/35772">富文本/渲染/显示/图文混排方案。rich-text、uparse、v-html的区别</a></li>
<li><a href="https://uniapp.dcloud.io/component/rich-text">rich-text 文档</a></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>uniapp 入门实战</category>
      </categories>
      <tags>
        <tag>rich-text</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 04： canvasToTempFilePath 解决 fail canvas is empty 报错</title>
    <url>/2022/11/13/Uniapp/UniApp04/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>问题描述</li>
<li>解决方法</li>
</ul>
<hr>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><hr>
<blockquote>
<p>起因：一个vue页面组件都2645行，而且功能有多，实在太难维护，所以决定进行功能拆分重构。</p>
</blockquote>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20211021093914.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20211021093914.png"></p>
<h3 id="调整之前结构"><a href="#调整之前结构" class="headerlink" title="调整之前结构"></a>调整之前结构</h3><ul>
<li>PageScene.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">		<span class="comment">&lt;!-- #ifdef APP-PLUS || H5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span></span></span><br><span class="line"><span class="tag">      <span class="attr">canvas-id</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">&quot;&#123; width: canvasWidth, height: canvasHeight &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- #ifndef APP-PLUS || H5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span></span></span><br><span class="line"><span class="tag">      <span class="attr">canvas-id</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">&quot;&#123; width: canvasWidth, height: canvasHeight &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line">		...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="调整之后结构"><a href="#调整之后结构" class="headerlink" title="调整之后结构"></a>调整之后结构</h3><ul>
<li><p>SceneRender.vue</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scene-Render&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- #ifdef APP-PLUS || H5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span></span></span><br><span class="line"><span class="tag">      <span class="attr">canvas-id</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">&quot;&#123; width: canvasWidth, height: canvasHeight &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- #ifndef APP-PLUS || H5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span></span></span><br><span class="line"><span class="tag">      <span class="attr">canvas-id</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">&quot;&#123; width: canvasWidth, height: canvasHeight &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">...</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">onShow</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">let</span> canvas = uni.<span class="title function_">createCanvasContext</span>(<span class="string">&quot;canvas&quot;</span>, <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">		canvas.<span class="title function_">setStrokeStyle</span>(<span class="string">&quot;#00ff00&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    canvas.<span class="title function_">setLineWidth</span>(<span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript">    canvas.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">    canvas.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">		canvas.<span class="title function_">draw</span>(<span class="literal">false</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        uni.<span class="title function_">canvasToTempFilePath</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">canvasId</span>: <span class="string">&quot;canvas&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">x</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">y</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">width</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">destWidth</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">destHeight</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">complete</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">error</span>(res);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">...</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>问题出现：canvas绘制没有一点问题，但是uni.canvasToTempFilePath回调一直报错：canvasToTempFilePath: fail canvas is empty。</p>
</blockquote>
</li>
<li><p>PageScene.vue</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">		<span class="tag">&lt;<span class="name">SceneRender</span>&gt;</span><span class="tag">&lt;/<span class="name">SceneRender</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote>
<p>经过各种尝试最终发现canvas标签的定义只能放到page页面中，uni.canvasToTempFilePath 才会转换成功。</p>
<ul>
<li>SceneRender.vue</li>
</ul>
</blockquote>
<pre><code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scene-Render&quot;</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">...</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">canvas</span>: <span class="literal">undefined</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">init</span>(<span class="params">cs</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">canvas</span> = cs;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">...</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>PageScene.vue</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">		<span class="comment">&lt;!-- #ifdef APP-PLUS || H5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span></span></span><br><span class="line"><span class="tag">      <span class="attr">canvas-id</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">&quot;&#123; width: canvasWidth, height: canvasHeight &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- #ifndef APP-PLUS || H5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span></span></span><br><span class="line"><span class="tag">      <span class="attr">canvas-id</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;canvas&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">&quot;&#123; width: canvasWidth, height: canvasHeight &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">SceneRender</span> <span class="attr">ref</span>=<span class="string">&quot;sceneRender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SceneRender</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">...</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">onShow</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">sceneRender</span>.<span class="title function_">init</span>(uni.<span class="title function_">createCanvasContext</span>(<span class="string">&quot;canvas&quot;</span>, <span class="variable language_">this</span>));</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">...</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html">wx.canvasToTempFilePath文档</a></li>
<li><a href="https://developers.weixin.qq.com/community/develop/article/doc/000cca357f07e0be99eacad095bc13">canvasToTempFilePath: fail canvas is empty 的坑</a></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>uniapp 入门实战</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
        <tag>canvas</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 07：解决引入阿里巴巴字体图标，修改字体颜色无效问题</title>
    <url>/2022/11/13/Uniapp/UniApp07%EF%BC%9A%E8%A7%A3%E5%86%B3%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%EF%BC%8C%E4%BF%AE%E6%94%B9%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>排查问题</li>
<li>解决办法</li>
</ul>
<hr>
<blockquote>
<p>由于最近新开了一个项目，在引入阿里巴巴字体图标库后，字体图标显示正常，但是怎么修改字体颜色都无效。</p>
</blockquote>
<h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><hr>
<blockquote>
<p>只能逐步情况排查问题了，排查情况如下</p>
<ul>
<li>新项目+新字体：修改字体颜色无效×</li>
<li>之前使用HbuildX构建的项目 + 之前字体：修改字体颜色正常√</li>
<li>之前使用HbuildX构建的项目 + 新字体：修改字体颜色无效×</li>
<li>新项目+老字体：修改字体颜色无效√</li>
</ul>
<p>锁定问题：新下载的字体资源问题</p>
</blockquote>
<span id="more"></span>
<h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><blockquote>
<p>对比新旧项目设置，发现问题。</p>
</blockquote>
<hr>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220103151509.jpg" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220103151509.jpg"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220103151641.jpg" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220103151641.jpg"></p>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>uniapp 入门实战</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
        <tag>canvas</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 08：设置 with 为 auto，图片列表显示仍然被压缩在屏幕宽度内显示的问题</title>
    <url>/2022/11/13/Uniapp/uniapp%20%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%2008%EF%BC%9A%E8%AE%BE%E7%BD%AEwith%E4%B8%BAauto%EF%BC%8C%E5%9B%BE%E7%89%87%E5%88%97%E8%A1%A8%E6%98%BE%E7%A4%BA%E4%BB%8D%E7%84%B6%E8%A2%AB%E5%8E%8B%E7%BC%A9%E5%9C%A8%E5%B1%8F%E5%B9%95%E5%AE%BD%E5%BA%A6%E5%86%85%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><ul>
<li><p>效果</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616210533.png" alt=""></p>
</li>
<li><p>xml 文档结构(说明：把父节点 list 的 width 设置成 auto 和 100%都没有效果)</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616210431.png" alt=""></p>
</li>
<li><p>设置成大的具体值起效了</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616210448.png" alt=""></p>
</li>
</ul>
<blockquote>
<p>说明：单纯的 image 未能正确把父节点撑开</p>
</blockquote>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>实在看不出啥问题，就将此列表与一个正常列表对比参数，没有发现问题，唯一的区别就是用 item 包裹一层。结果一试竟然可以..（具体原因未找到，如果有知道的小伙，麻烦告诉我一下）</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616210507.png" alt=""></p>
<p>最后效果<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616210523.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>看不出问题就直接采用对比法</li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 09：解决&gt;&gt;&gt; 与 /deep/ 深度选择无法使用的问题</title>
    <url>/2022/11/13/Uniapp/uniapp%20%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%2009%EF%BC%9A%E8%A7%A3%E5%86%B3%20%E4%B8%8E%20deep%20%E6%B7%B1%E5%BA%A6%E9%80%89%E6%8B%A9%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="gt-gt-gt-与-deep-深度选择无法使用的问题"><a href="#gt-gt-gt-与-deep-深度选择无法使用的问题" class="headerlink" title="&gt;&gt;&gt; 与 /deep/ 深度选择无法使用的问题"></a>&gt;&gt;&gt; 与 /deep/ 深度选择无法使用的问题</h1><ul>
<li><p>具体效果</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616211025.png" alt=""></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616211009.png" alt=""></p>
</li>
</ul>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ul>
<li>改用::v-deep 解决</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">::v-deep .tabbar &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><strong><a href="https://forum.vuejs.org/t/deep-selector-not-working/68037">Deep selector not working</a></strong></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 10：利用 css 实现文字居中在圆中心</title>
    <url>/2022/11/13/Uniapp/uniapp%20%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%2010%EF%BC%9A%E5%88%A9%E7%94%A8css%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%AD%E5%9C%A8%E5%9C%86%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: gold;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;circle&quot;&gt;text&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>
<p>效果</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616210157.png" alt=""></p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul>
<li>需要固定宽高，否则会导致文字被压扁</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://stackoverflow.com/questions/4801181/vertically-and-horizontally-centering-text-in-circle-in-css-like-iphone-notific">https://stackoverflow.com/questions/4801181/vertically-and-horizontally-centering-text-in-circle-in-css-like-iphone-notific</a></li>
<li><a href="https://www.codegrepper.com/code-examples/css/circle+css+with+text+in+the+center">https://www.codegrepper.com/code-examples/css/circle+css+with+text+in+the+center</a></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 11：解决给引入的组件添加 class，样式诡异问题</title>
    <url>/2022/11/13/Uniapp/uniapp%20%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%2011%EF%BC%9A%E8%A7%A3%E5%86%B3%E7%BB%99%E5%BC%95%E5%85%A5%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0class%EF%BC%8C%E6%A0%B7%E5%BC%8F%E8%AF%A1%E5%BC%82%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h1><ul>
<li><p>实际效果</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616211121.png" alt=""></p>
<p>给 Comp 添加 class，蓝色边框贼诡异，为啥会显示成这个样式?</p>
</li>
<li><p>正确效果：<a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8Q29tcCBjbGFzcz1cIkNvbXBcIj48L0NvbXA+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IENvbXAgZnJvbSBcIi4vQ29tcC52dWVcIlxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbi5Db21we1xuICBwYWRkaW5nOjQwcHg7XG4gIGJvcmRlcjo0cHggc29saWQgIzAwMDBmZjtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cbjwvc3R5bGU+XG5cbiIsImltcG9ydC1tYXAuanNvbiI6IntcbiAgXCJpbXBvcnRzXCI6IHtcbiAgICBcInZ1ZVwiOiBcImh0dHBzOi8vc2ZjLnZ1ZWpzLm9yZy92dWUucnVudGltZS5lc20tYnJvd3Nlci5qc1wiXG4gIH1cbn0iLCJDb21wLnZ1ZSI6Ijx0ZW1wbGF0ZT5cbiAgXHQ8ZGl2IGNsYXNzPVwiaXRlbVwiPlxuICAgICAgdGhpcyBpcyBhIGl0ZW1cbiAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0XCI+XG4gICAgXHQgIHRoaXMgaXMgYSBDb21wXG4gICAgXHQ8L2Rpdj5cbiAgXHQ8L2Rpdj5cbiAgXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gIC5pdGVtIHtcbiAgICBwYWRkaW5nOjIwcHg7XG4gIFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBcbiAgLml0ZW0gLnRleHR7XG4gICAgY29sb3I6IHJlZDtcbiAgICBib3JkZXI6IDFweCBzb2xpZDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICBcbiAgICBiYWNrZ3JvdW5kOiMwMGZmMDA7XG4gIH1cbjwvc3R5bGU+In0=">vue demo</a></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616211151.png" alt=""></p>
</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul>
<li><p>Comp.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">		this is a item</span><br><span class="line">		<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span> this is a Comp <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.item</span> <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="attribute">background</span>: <span class="number">#00ff00</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>index.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Comp</span> <span class="attr">class</span>=<span class="string">&quot;Comp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">import</span> <span class="title class_">Comp</span> <span class="keyword">from</span> <span class="string">&quot;./Comp.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.Comp</span> &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">padding</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#0000ff</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>没有想到为啥，就给 uniapp 提了一个 issues</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616211206.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>原来是引入组件添加的 class，view 标签默认是未 display 属性，所以只要设置成 block 元素即可</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/dcloudio/uni-app/issues/3601#issuecomment-1155025002">https://github.com/dcloudio/uni-app/issues/3601#issuecomment-1155025002</a></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 12：解决给 flex 布局元素中插入&lt;br/&gt;标签换行失效问题</title>
    <url>/2022/11/13/Uniapp/uniapp%20%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%2012%EF%BC%9A%E8%A7%A3%E5%86%B3%E7%BB%99flex%E5%B8%83%E5%B1%80%E5%85%83%E7%B4%A0%E4%B8%AD%E6%8F%92%E5%85%A5%20br%20%E6%A0%87%E7%AD%BE%E6%8D%A2%E8%A1%8C%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h1><ul>
<li><p>实际效果</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616211229.png" alt=""></p>
</li>
<li><p>正常效果</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616211239.png" alt=""></p>
</li>
<li><p>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item__header&quot;</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">		<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item__name&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;item__phone&quot;</span>&gt;</span>&#123;&#123; phone &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	&amp;__header &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	&amp;__name &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-size</span>: $text-size-<span class="number">18</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>: $text-main-color;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">margin-bottom</span>: <span class="number">12</span>rpx;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	&amp;__phone &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-size</span>: $text-size-<span class="number">14</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>: $text-grey-color;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><blockquote>
<p>flex 的设置的按行排列，此时又给其子元素间添加 br 让其换行，flex 要按行排，br 又让换行，br 的作用与 flex 布局冲突，所以 br 就失效</p>
</blockquote>
<p>知道这个原因就不难想到，常用的解决办法：给需要换行的多个元素用 view 包裹一层，然后再使用 br 即可</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item__header&quot;</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item__name&quot;</span>&gt;</span></span><br><span class="line">		&#123;&#123; name &#125;&#125;</span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;item__phone&quot;</span>&gt;</span>&#123;&#123; phone &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	&amp;__header &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	&amp;__name &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-size</span>: $text-size-<span class="number">18</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>: $text-main-color;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">margin-bottom</span>: <span class="number">12</span>rpx;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	&amp;__phone &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-size</span>: $text-size-<span class="number">14</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>: $text-grey-color;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>很多时候添加代码不起作用，需要想想各知识点的作用，是不是使用不当导致</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://stackoverflow.com/questions/45087054/br-is-not-friendly-with-the-flexbox">https://stackoverflow.com/questions/45087054/br-is-not-friendly-with-the-flexbox</a></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 入门实战 13：解决 canvasToTempFilePath 生成图片模糊问题</title>
    <url>/2022/11/13/Uniapp/uniapp%20%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%2013%EF%BC%9A%E8%A7%A3%E5%86%B3canvasToTempFilePath%20%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E6%A8%A1%E7%B3%8A%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h1><ul>
<li>对比效果<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220616211338.png" alt=""><blockquote>
<p>为啥看不清我女朋友… (开玩笑)</p>
</blockquote>
</li>
<li><p>代码</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> expWidth = <span class="variable language_">this</span>.<span class="property">eW</span> || width;</span><br><span class="line"><span class="keyword">const</span> expHeight = <span class="variable language_">this</span>.<span class="property">eH</span> || height;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> commonParams = &#123;</span><br><span class="line">		<span class="attr">x</span>: x,</span><br><span class="line">		<span class="attr">y</span>: y,</span><br><span class="line">		<span class="attr">width</span>: width,</span><br><span class="line">		<span class="attr">height</span>: height,</span><br><span class="line">		<span class="attr">destWidth</span>: expWidth,</span><br><span class="line">		<span class="attr">destHeight</span>: expHeight,</span><br><span class="line">		<span class="attr">fileType</span>: <span class="variable language_">this</span>.<span class="property">fType</span>,</span><br><span class="line">		<span class="attr">quality</span>: <span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">qlty</span>),</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">uni.<span class="title function_">canvasToTempFilePath</span>(</span><br><span class="line">		<span class="title class_">Object</span>.<span class="title function_">assign</span>(commonParams, &#123;</span><br><span class="line">			<span class="attr">canvasId</span>: <span class="string">&quot;avatar-canvas&quot;</span>,</span><br><span class="line">			<span class="attr">success</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">				...</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="title function_">triggerFail</span>(res.<span class="property">errMsg</span>);</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="title function_">triggerFinish</span>();</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;),</span><br><span class="line">		<span class="variable language_">this</span></span><br><span class="line">	);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>截图的尺寸宽高固定值，而没有根据设备的像素比来动态设置，自然在高分辨率下截图出一个小尺寸图片，然后将其拉伸到大一点的尺寸显示就变得模糊了</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> commonParams = &#123;</span><br><span class="line">		<span class="attr">x</span>: x,</span><br><span class="line">		<span class="attr">y</span>: y,</span><br><span class="line">		<span class="attr">width</span>: width,</span><br><span class="line">		<span class="attr">height</span>: height,</span><br><span class="line">		<span class="attr">destWidth</span>: expWidth,</span><br><span class="line">		<span class="attr">destHeight</span>: expHeight,</span><br><span class="line">		<span class="attr">fileType</span>: <span class="variable language_">this</span>.<span class="property">fType</span>,</span><br><span class="line">		<span class="attr">quality</span>: <span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">qlty</span>),</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sysInfo = uni.<span class="title function_">getSystemInfoSync</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">pixelRatio</span> = sysInfo.<span class="property">pixelRatio</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//说明：根据像素比来截去图片,避免高分辨率查看图片模块的情况</span></span><br><span class="line"><span class="keyword">const</span> expWidth = (<span class="variable language_">this</span>.<span class="property">eW</span> || width) * <span class="variable language_">this</span>.<span class="property">pixelRatio</span>;</span><br><span class="line"><span class="keyword">const</span> expHeight = (<span class="variable language_">this</span>.<span class="property">eH</span> || height) * <span class="variable language_">this</span>.<span class="property">pixelRatio</span>;</span><br><span class="line"></span><br><span class="line">uni.<span class="title function_">canvasToTempFilePath</span>(</span><br><span class="line">		<span class="title class_">Object</span>.<span class="title function_">assign</span>(commonParams, &#123;</span><br><span class="line">			<span class="attr">canvasId</span>: <span class="string">&quot;avatar-canvas&quot;</span>,</span><br><span class="line">			<span class="attr">success</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">				...</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="title function_">triggerFail</span>(res.<span class="property">errMsg</span>);</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="title function_">triggerFinish</span>();</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;),</span><br><span class="line">		<span class="variable language_">this</span></span><br><span class="line">	);</span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://stackoverflow.com/questions/45087054/br-is-not-friendly-with-the-flexbox">https://stackoverflow.com/questions/45087054/br-is-not-friendly-with-the-flexbox</a></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>UniApp</tag>
      </tags>
  </entry>
  <entry>
    <title>初始化不统一控制好，引发的血案</title>
    <url>/2022/11/13/tragedy/%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8D%E7%BB%9F%E4%B8%80%E6%8E%A7%E5%88%B6%E5%A5%BD%EF%BC%8C%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/</url>
    <content><![CDATA[<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p>多线程下载：简单多个任务下载无问题，大批量下载任务，出现部分任务丢失问题</p>
<h1 id="问题现象："><a href="#问题现象：" class="headerlink" title="问题现象："></a>问题现象：</h1><ul>
<li>问题 1：添加完任务后，update 不自动执行，需要通过直接调用 Update 才执行（没有深究其原因，就先临时这么处理了，于是就引发后面的诡异问题）</li>
<li>问题 2：简单多个任务下载无问题，大批量下载任务，出现部分任务丢失问题</li>
</ul>
<h1 id="思考问题-2："><a href="#思考问题-2：" class="headerlink" title="思考问题 2："></a>思考问题 2：</h1><p>既然不大量下载就没有问题，那就弄个最简单的批量下载来复现问题，接下来就发现了以下新问题 3</p>
<ul>
<li><strong>问题 3：共享队列刚刚添加完 item，update 的时候队列总是为空</strong></li>
</ul>
<h1 id="思考问题-3"><a href="#思考问题-3" class="headerlink" title="思考问题 3"></a>思考问题 3</h1><ul>
<li>思考 1：多线程导致数据不一致问题，添加在一个线程，update 在另外一个线程（已添加了锁，不应该是这个问题）</li>
<li>思考 2：哪里把数据又删除了 或者把队列重置了（仔细检查了一遍删除相关代码无问题，把所有队列赋值的地方加个断点调试一下，发现只有 1 处地方，运行发现执行了 2 次，原因：CDLWork 对象 init 两次导致）</li>
</ul>
<p>回顾一下代码</p>
<span id="more"></span>
<h1 id="场景代码"><a href="#场景代码" class="headerlink" title="场景代码"></a>场景代码</h1><ul>
<li><p>CDLWork</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CDLWork</span> : <span class="title">Singleton</span>&lt;<span class="title">CDLWork</span>&gt;, <span class="title">IInit</span>, <span class="title">IDispose</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Queue&lt;SDLTaskItem&gt; m_waitItems;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">object</span> m_object = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">		m_waitItems = <span class="keyword">new</span> KPriorityQueue&lt;<span class="built_in">int</span>, SDLTaskItem, <span class="built_in">int</span>&gt;();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTask</span>(<span class="params">SDLTaskItem taskItem</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">			<span class="comment">//1.添加任务</span></span><br><span class="line">	    <span class="keyword">lock</span> (m_object)</span><br><span class="line">	    &#123;</span><br><span class="line">	        m_waitItems.Enqueue(taskItem);</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//添加完任务后，外层update执行刷新不到任务，需要通过直接调用Update才正常</span></span><br><span class="line">			Update();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.外层调用Update刷新任务</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">			__OnUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> __OnUpdate()</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">lock</span> (m_object)</span><br><span class="line">      &#123;</span><br><span class="line">          __AutoAddToExcuteList();</span><br><span class="line">          __StartMultiTask();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> __StartMultiTask()</span><br><span class="line">  &#123;</span><br><span class="line">		  <span class="comment">//3.问题：在此发现m_waitItems为空</span></span><br><span class="line">      <span class="keyword">if</span> (m_excuteItems.Count &lt;= <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="具体原因："><a href="#具体原因：" class="headerlink" title="具体原因："></a>具体原因：</h1><ul>
<li><p>CMApplication</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CMApplication</span> : <span class="title">Singleton</span>&lt;<span class="title">CMApplication</span>&gt;, <span class="title">IInit</span>, <span class="title">IDispose</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">	&#123;</span><br><span class="line">			...</span><br><span class="line">	    m_dlWork = <span class="keyword">new</span> CDLWork();</span><br><span class="line">	    m_dlWork.Init();</span><br><span class="line"></span><br><span class="line">	    <span class="keyword">if</span> (<span class="literal">null</span> == m_mainThread)</span><br><span class="line">	    &#123;</span><br><span class="line">	        m_bFlag = <span class="literal">true</span>;</span><br><span class="line">	        m_mainThread = <span class="keyword">new</span> Thread(__Run);</span><br><span class="line">	        m_mainThread.Start();</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> __Run()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (m_bFlag)</span><br><span class="line">        &#123;</span><br><span class="line">	          ...</span><br><span class="line">            m_dlWork.Update();</span><br><span class="line">						...</span><br><span class="line">            Thread.Sleep(N_MAIN_THREAD_DELAY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Program</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    Init();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//1.系统初始化</span></span><br><span class="line">      CMApplication.Instance.Init();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//2.Case初始化</span></span><br><span class="line">      CDLWork.Instance.Init();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用的地方</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">CDLWork.Instance.AddTask(task);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样就明显的看出问题了，外层添加任务使用一个 CDLWork 单例对象，循环调用 CDLWork 的 Update 又是另外一个实例对象，这也就可以解释为啥 update 刷新不到任务了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>自己明显的发现问题，采用回避的方式处理（偷懒），问题终究最后会暴露出来，而导致耗费更多的时间（<strong>提醒：以后千万不要用这种态度处理问题，别学我</strong>）</li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>编程血案</category>
      </categories>
      <tags>
        <tag>编程血案</tag>
      </tags>
  </entry>
  <entry>
    <title>手动拼接长url，引发的血案</title>
    <url>/2022/11/13/tragedy/%E6%89%8B%E5%8A%A8%E6%8B%BC%E6%8E%A5%E9%95%BFurl%EF%BC%8C%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>小程序内嵌 webview 网站显示不正常，单独把网站地址放置浏览器正常工作</p>
<h1 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h1><p>肯定是网站的地址参数问题</p>
<h1 id="断定理由："><a href="#断定理由：" class="headerlink" title="断定理由："></a>断定理由：</h1><ul>
<li>理由 1：网站是可以打开，只是显示不正确</li>
<li>理由 2：相同地址不同参数，一个现实正常一个现实不正常</li>
</ul>
<p>把问题的原因告诉做内嵌网站的那个同事 A 了，结果找到一天都没有找到原因。他跟另外一个同事说：可能是我升级环境导致的问题，由 vue2 升级到 vue3 导致（无语，完全跟这无关啊）</p>
<p>根据与另外一个 B 同事的尝试，最后发现的问题，地址多了一个换行符导致。（额，哪里会多拼一个换行符出来了，直接调试定位到以下代码）</p>
<h1 id="具体原因"><a href="#具体原因" class="headerlink" title="具体原因"></a>具体原因</h1><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220512182400.png" alt=""></p>
<p>vscode 安装 prettier，自动格式化后把超过长度限制的拼接地址加了换行。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20220512182342.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>切忌：不要纯手工手动拼接 url，直接将 url 参数转成对象，然后根据对象生成 url 参数（这也是以前的同事为了偷懒导致的问题）</li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>编程血案</category>
      </categories>
      <tags>
        <tag>编程血案</tag>
      </tags>
  </entry>
  <entry>
    <title>WebPack 01：原理雏形思考</title>
    <url>/2022/11/13/BuildTool/webpack/WebPack%2001%EF%BC%9A%E5%8E%9F%E7%90%86%E9%9B%8F%E5%BD%A2%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>实现目标</li>
<li>实现步骤</li>
</ul>
<hr>
<span id="more"></span>
<h2 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h2><hr>
<ul>
<li><p>代码如下：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//add.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (a, b) =&gt; a + b;</span><br></pre></td></tr></table></figure>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="built_in">require</span>(<span class="string">&quot;./add.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum:&quot;</span> + <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>期望：我们期望控制台打印 sum:3</p>
</li>
<li><p>实际：</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210808165823.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210808165823.png"></p>
<blockquote>
<p>原因：Chorme 不支持file协议，推荐简单好用的方法：VSCode 安装Live Server，然后右键index.html Open With Live Server</p>
</blockquote>
<p>  解决后输出：</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210808170605.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210808170605.png"></p>
</li>
</ul>
<hr>
<h3 id="反问1：require-浏览器不认识，怎么办？"><a href="#反问1：require-浏览器不认识，怎么办？" class="headerlink" title="反问1：require 浏览器不认识，怎么办？"></a>反问1：require 浏览器不认识，怎么办？</h3><ul>
<li>回答：手动require功能（输入：文件名  输出：导出内容）</li>
<li><p>实现：exports.default</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, code</span>) &#123;</span><br><span class="line">    <span class="built_in">eval</span>(code);</span><br><span class="line">&#125;)(<span class="built_in">exports</span>, <span class="string">`var a=123;exports.default=function(a,b)&#123;return a+b&#125;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>.<span class="title function_">default</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实现：require方法</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, code</span>) &#123;</span><br><span class="line">        <span class="built_in">eval</span>(code);</span><br><span class="line">    &#125;)(<span class="built_in">exports</span>, <span class="string">&quot;exports.default = function(a,b)&#123;return a + b&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">exports</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&quot;add.js&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="反问2：如果让html加载完index-js-后自动运行呢-？"><a href="#反问2：如果让html加载完index-js-后自动运行呢-？" class="headerlink" title="反问2：如果让html加载完index.js 后自动运行呢 ？"></a>反问2：如果让html加载完index.js 后自动运行呢 ？</h3><ul>
<li>回答：传入index.js作为入口参数，然后采用执行运行函数</li>
<li><p>实现：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">codeMap</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">        (<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, code</span>) &#123;</span><br><span class="line">            <span class="built_in">eval</span>(code);</span><br><span class="line">        &#125;)(<span class="built_in">exports</span>, codeMap[filePath])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">exports</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;index.js&quot;</span>);</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    <span class="string">&quot;index.js&quot;</span>: <span class="string">`var add = require(&quot;add.js&quot;).default; console.log(add(1,2));`</span>,</span><br><span class="line">    <span class="string">&quot;add.js&quot;</span>: <span class="string">`var a=123;exports.default=function(a,b)&#123;return a+b&#125;`</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>WebPack</category>
      </categories>
      <tags>
        <tag>WebPack</tag>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>WebPack 02：利用 VS Code 进行调试</title>
    <url>/2022/11/13/BuildTool/webpack/WebPack%2002%EF%BC%9A%E5%88%A9%E7%94%A8%20VS%20Code%20%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ol>
<li>npm init -y</li>
<li>安装依赖</li>
<li>创建webpack.config.js</li>
<li>创建index.js</li>
<li>创建调试launch.json</li>
<li>启动调试</li>
</ol>
<hr>
<blockquote>
<p>由于工作中遇到一个问题，需要根据环境编译代码，比如：ios平台需要某项功能，pc平台不需要这个功能，所以就可以用过编写一个自定义的loader解决此问题。虽然可以通过打例子的方式来调试代码，但是这种方式太低效了，如果日后还想知道webpack的工作原理，打日志的方式就太可行了，不能单不跟踪、实时看到各变量的当前情况，调用堆栈等等，所以来了解一下vscode里面如何调试webpack代码。</p>
</blockquote>
<span id="more"></span>
<h2 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h2><hr>
<ol>
<li>npm init -y</li>
<li><p>package.json (说明：为了保证示例能运行，方便npm install)</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;02-debugger&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;debugger&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./node_modules/.bin/webpack --config webpack.config.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.16.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.16.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.64.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>webpack.config.js</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">    mode<span class="punctuation">:</span>&#x27;development&#x27;<span class="punctuation">,</span></span><br><span class="line">    entry<span class="punctuation">:</span><span class="string">&quot;./src/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    output<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        filename<span class="punctuation">:</span><span class="string">&quot;[name].js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        path<span class="punctuation">:</span>path.resolve(__dirname<span class="punctuation">,</span><span class="string">&quot;dist&quot;</span>)</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    module<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        rules<span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建index.js</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/index.js</span></span><br><span class="line">console.log(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建调试launch.json</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debugger&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopOnEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integratedTerminal&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/node_modules/webpack/bin/webpack.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;--config&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;./webpack.config.js&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;NODE_ENV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;production&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最后目录结构</p>
<p> <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211114234644.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211114234644.png"></p>
</li>
<li><p>启动调试</p>
<p> <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211114215606.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211114215606.png"></p>
</li>
</ol>
<blockquote>
<p>完整示例：<a href="https://github.com/yxw007/H5-Learn/tree/master/webpack/02-debugger">https://github.com/yxw007/H5-Learn/tree/master/webpack/02-debugger</a></p>
</blockquote>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><strong><a href="https://medium.com/@jsilvax/debugging-webpack-with-vs-code-b14694db4f8e">Debugging Webpack with VS Code</a></strong></li>
<li><strong><a href="https://zhuanlan.zhihu.com/p/108939782">VSCode 调试 Webpack 指南</a></strong></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>WebPack</category>
      </categories>
      <tags>
        <tag>WebPack</tag>
        <tag>vscode</tag>
        <tag>debugger</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack 03：实现一个自定义loader</title>
    <url>/2022/11/13/BuildTool/webpack/Webpack%2003%EF%BC%9A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89loader/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>自定义loader</li>
<li>总结</li>
</ul>
<hr>
<blockquote>
<p>相信利用webpack打包项目，都会碰到各种内置的loader，比如：vue-loader、babel-loader、svg-sprite-loader、url-loader等等，其实他们的作用就是进行资源转换，最近碰到一个需求就刚好需要这样一个东西，比如：ios平台打出来的包需要某个功能，pc平台却不需要某个功能，所以就可以利用loader的机制来实现。下面给出一个简单的示例</p>
</blockquote>
<hr>
<span id="more"></span>
<h2 id="创建步骤："><a href="#创建步骤：" class="headerlink" title="创建步骤："></a>创建步骤：</h2><ol>
<li>npm init -y</li>
<li><p>package.json (说明：网上提供的示例基本不提供具体的插件版本，导致要么这个问题要么哪个问题，版本不兼容太正常了。为了保证示例能运行，方便npm install 所以把package.json 直接贴出)</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;03-custom-loader&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --config webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;debugger&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./node_modules/.bin/webpack --config webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.16.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.16.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;loader-utils&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.64.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.5.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建webpack.config.js</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">const HtmlWebpackPlugin = require(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line">const HotmoduleReplacementPlugin = require(&#x27;webpack/lib/HotModuleReplacementPlugin&#x27;);</span><br><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">    mode<span class="punctuation">:</span>&#x27;development&#x27;<span class="punctuation">,</span></span><br><span class="line">    entry<span class="punctuation">:</span><span class="string">&quot;./src/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    output<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        filename<span class="punctuation">:</span><span class="string">&quot;[name].js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        path<span class="punctuation">:</span>path.resolve(__dirname<span class="punctuation">,</span><span class="string">&quot;dist&quot;</span>)</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    devServer<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        client<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            logging<span class="punctuation">:</span> <span class="string">&quot;info&quot;</span><span class="punctuation">,</span></span><br><span class="line">            overlay<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            progress<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        hot<span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        port<span class="punctuation">:</span><span class="number">9000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    resolveLoader<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        alias<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//创建loader别名</span></span><br><span class="line">            <span class="attr">&quot;replace-name-loader&quot;</span><span class="punctuation">:</span> path.resolve(__dirname<span class="punctuation">,</span> <span class="string">&quot;./build/replace-name-loader.js&quot;</span>)<span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;replace-age-loader&quot;</span><span class="punctuation">:</span> path.resolve(__dirname<span class="punctuation">,</span> <span class="string">&quot;./build/replace-age-loader.js&quot;</span>)<span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    module<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        rules<span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                test<span class="punctuation">:</span> /\.js$/<span class="punctuation">,</span></span><br><span class="line">                use<span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">                        loader<span class="punctuation">:</span> &#x27;replace-name-loader&#x27;<span class="punctuation">,</span></span><br><span class="line">                        options<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            name<span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">                        loader<span class="punctuation">:</span> &#x27;replace-age-loader&#x27;<span class="punctuation">,</span></span><br><span class="line">                        options<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            age<span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    plugins<span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        new HtmlWebpackPlugin(<span class="punctuation">&#123;</span></span><br><span class="line">            filename<span class="punctuation">:</span><span class="string">&quot;index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">            template<span class="punctuation">:</span>&#x27;index.html&#x27;<span class="punctuation">,</span></span><br><span class="line">            inject<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">        new HotmoduleReplacementPlugin()</span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>babel.config.js</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">    presets<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span></span><br><span class="line">        &#x27;@babel/preset-env&#x27;<span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          targets<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            node<span class="punctuation">:</span> &#x27;current&#x27;<span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建index.html</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建src中的文件</p>
<ol>
<li><p>index.js</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name&#125; <span class="keyword">from</span> <span class="string">&quot;./name.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; age&#125; <span class="keyword">from</span> <span class="string">&quot;./age.js&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>的年龄是<span class="subst">$&#123;age&#125;</span>岁`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showInfo</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>age.js</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>name.js</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;小明&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>创建loader</p>
<ol>
<li><p>replace-age-loader.js</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; source loader 匹配的资源文件内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">&#x27;loader-utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SourceMap</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;module&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">source</span>)  &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;age&#125; = loaderUtils.<span class="title function_">getOptions</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">const</span> content = source.<span class="title function_">replace</span>(<span class="string">&quot;18&quot;</span>,age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">callback</span>(<span class="literal">null</span>,content,<span class="title class_">SourceMap</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>replace-name-loader.js</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; source loader 匹配的资源文件内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">&#x27;loader-utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SourceMap</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;module&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">source</span>)  &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;name&#125; = loaderUtils.<span class="title function_">getOptions</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">const</span> content = source.<span class="title function_">replace</span>(<span class="string">&quot;小明&quot;</span>,name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">callback</span>(<span class="literal">null</span>,content,<span class="title class_">SourceMap</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>最后的目录结构</p>
<p> <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211114233457.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211114233457.png"></p>
</li>
<li><p>npm run dev  效果如下</p>
<p> <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211114233600.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211114233600.png"></p>
</li>
</ol>
<hr>
<blockquote>
<p>完整示例：<a href="https://github.com/yxw007/H5-Learn/tree/master/webpack/03-custom-loader">https://github.com/yxw007/H5-Learn/tree/master/webpack/03-custom-loader</a></p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>use 里面的loader 是最后一个往第一个执行的</li>
<li>loader请保持单一原则，一个loader只做一件事</li>
</ol>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><strong><a href="https://zhuanlan.zhihu.com/p/334741480">由浅及深实现一个自定义loader</a></strong></li>
<li><strong><a href="https://webpack.js.org/contribute/writing-a-loader/">Writing a Loader</a></strong></li>
<li><strong><a href="https://webpack.docschina.org/configuration/module/#ruleuse">Rule.use</a></strong></li>
<li><strong><a href="https://github.com/webpack/loader-utils/blob/master/CHANGELOG.md">https://github.com/webpack/loader-utils/blob/master/CHANGELOG.md</a></strong></li>
<li><strong><a href="https://www.jianshu.com/p/9091e8a343e4">五分钟了解模板引擎原理，阅读后做出自己的模板引擎</a></strong></li>
</ul>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
        <tag>自定义loader</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.x + Vite2.x 入门实战 01：Vite 遇到的坑</title>
    <url>/2022/11/13/Practice/vue3.x_vite2.x/Vue3.x_Vite2.x-01/</url>
    <content><![CDATA[<blockquote>
<p>为了记录自己的成长经历，我决定把自己实战遇到的坑记录起来，一来方便日后查阅，二来给后人提供一份帮助。</p>
</blockquote>
<p><em>提示：本篇文章会持续更新，记录Vite相关遇到的坑</em></p>
<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>大家都熟知开发环境不同，碰到的问题很有可能也不同。为了不给大家带来困恼（跟你配置完全一样，为啥你的可以我的不可以），介绍下我的开发环境</p>
<ul>
<li>Windows 10</li>
<li>VSCode  1.54.3</li>
<li>Node.js v12.16.1</li>
<li>Vue 3.0.5</li>
<li>Vite 2.0.5</li>
<li>typescript 4.1.3</li>
</ul>
<hr>
<h2 id="概要内容："><a href="#概要内容：" class="headerlink" title="概要内容："></a>概要内容：</h2><ol>
<li>配置alias无效</li>
<li>main.ts中全局引入样式，使用Sass样式变量提示变量未定义</li>
</ol>
<hr>
<span id="more"></span>
<h2 id="1-配置alias无效"><a href="#1-配置alias无效" class="headerlink" title="1. 配置alias无效"></a>1. 配置alias无效</h2><ul>
<li>报错如下：<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210328134430.png" alt=""></li>
</ul>
<ul>
<li>解决方法：  <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts 添加alias配置即可</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">find</span>: <span class="string">&#x27;/@&#x27;</span>,</span><br><span class="line">          <span class="attr">replacement</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="2-main-ts中全局引入样式，使用Sass样式变量提示变量未定义"><a href="#2-main-ts中全局引入样式，使用Sass样式变量提示变量未定义" class="headerlink" title="2. main.ts中全局引入样式，使用Sass样式变量提示变量未定义"></a>2. main.ts中全局引入样式，使用Sass样式变量提示变量未定义</h2><ul>
<li>报错如下：<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210328134529.png" alt=""></li>
</ul>
<ul>
<li>解决方法：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// vite.config.ts 添加对应sass变量样式文件配置即可</span><br><span class="line"></span><br><span class="line">css: &#123;</span><br><span class="line">      preprocessorOptions: &#123;</span><br><span class="line">        scss: &#123;</span><br><span class="line">          additionalData: `@import &quot;./src/assets/styles/variables&quot;;`</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue3.x + Vite2.x 入门实战</category>
      </categories>
      <tags>
        <tag>Vue3.x</tag>
        <tag>Vite2.x</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.x + Vite2.x 入门实战 02：搞懂各种对齐参数</title>
    <url>/2022/11/13/Practice/vue3.x_vite2.x/Vue3.x_Vite2.x-02/</url>
    <content><![CDATA[<blockquote>
<p>最常用的text-align、align-item、vertical_align、justify-content 这四个参数容易搞混淆 ，没搞清楚概念经常循环着尝试影响效率 😂，所以动手实践搞清楚一下。</p>
</blockquote>
<hr>
<p><em>提示：只演示2-3种属性值效果，其他去查api即可</em></p>
<h2 id="概要内容："><a href="#概要内容：" class="headerlink" title="概要内容："></a>概要内容：</h2><ol>
<li>text-align</li>
<li>align-item</li>
<li>vertical_align</li>
<li>justify-content</li>
</ol>
<span id="more"></span>
<h3 id="1-text-align"><a href="#1-text-align" class="headerlink" title="1. text-align"></a>1. text-align</h3><blockquote>
<p>作用：针对行内内容，相对父元素的（<strong>横轴</strong>）对齐方式</p>
</blockquote>
<ul>
<li><p>示例：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>text-align<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.center</span> <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: gold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">            this is a block , text-align: left;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">            this is a block, text-align: center;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">            this is a block, text-align: right;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例效果：</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210402123233.png" alt=""></p>
</li>
</ul>
<h3 id="2-align-items"><a href="#2-align-items" class="headerlink" title="2. align-items"></a>2. align-items</h3><blockquote>
<p>作用：定义flex子项在flex容器的当前行的侧轴（<strong>纵轴</strong>）方向上的对齐方式</p>
</blockquote>
<ul>
<li>示例</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>align-items<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#baseline</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: baseline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#baseline</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#center</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;baseline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:coral;&quot;</span>&gt;</span> align-items<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:lightblue;&quot;</span>&gt;</span>baseline<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:coral;&quot;</span>&gt;</span> align-items<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:lightblue;&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>示例图</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210402123016.png" alt=""></p>
</li>
</ul>
<h3 id="3-vertical-align"><a href="#3-vertical-align" class="headerlink" title="3. vertical-align"></a>3. vertical-align</h3><blockquote>
<p>作用：定义行内元素的基线相对于该元素所在行的基线的(<strong>纵轴</strong>)垂直对齐方式</p>
</blockquote>
<ul>
<li><p>示例</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span> <span class="selector-class">.default</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: grey;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span> <span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">vertical-align</span>: text-top;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span> <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: olive;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">vertical-align</span>: text-bottom;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span>一个<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;default&quot;</span>&gt;</span>this is a block<span class="tag">&lt;/<span class="name">div</span>&gt;</span>默认对齐的块元素。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span>一个<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span>this is a block<span class="tag">&lt;/<span class="name">div</span>&gt;</span>text-top 对齐的块元素。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span>一个<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>this is a block<span class="tag">&lt;/<span class="name">div</span>&gt;</span>text-bottom 对齐的块元素。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例效果：</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210402123314.png" alt=""></p>
</li>
</ul>
<h3 id="4-justify-content"><a href="#4-justify-content" class="headerlink" title="4. justify-content"></a>4. justify-content</h3><blockquote>
<p>作用：用于设置或检索弹性盒子元素在主轴（<strong>横轴</strong>）方向上的对齐方式</p>
</blockquote>
<ul>
<li><p>示例：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>justify-content<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.center</span> <span class="selector-class">.contian</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c3c3c3</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.center</span> <span class="selector-class">.contian</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flex-start</span> <span class="selector-class">.contian</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c3c3c3</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: flex-start;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flex-start</span> <span class="selector-class">.contian</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.space-between</span> <span class="selector-class">.contian</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c3c3c3</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.space-between</span> <span class="selector-class">.contian</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>justify-content: center;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contian&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:coral;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:lightblue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>flex-start<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contian&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:coral;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:lightblue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;space-between&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>space-between<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contian&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:coral;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:lightblue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例效果：</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210402123335.png" alt=""></p>
</li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue3.x + Vite2.x 入门实战</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.x + Vite2.x 入门实战 03：二次封装el-input组件</title>
    <url>/2022/11/13/Practice/vue3.x_vite2.x/Vue3.x_Vite2.x-03/</url>
    <content><![CDATA[<blockquote>
<p>element-plus 提供了非常多通用的组件，但要满足特定产品需求效果还是略有差异，所以需再次封装。</p>
</blockquote>
<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>怎么封装成子组件？</li>
<li>怎么使用封装组件？</li>
</ul>
<span id="more"></span>
<h2 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h2><ul>
<li><p>原始效果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210402123602.png" alt=""></p>
</li>
<li><p>封装后效果</p>
<p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210402123609.png" alt=""></p>
</li>
</ul>
<h2 id="怎么封装成子组件？"><a href="#怎么封装成子组件？" class="headerlink" title="怎么封装成子组件？"></a>怎么封装成子组件？</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contain&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;input&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;red-border&#x27;: tips.length &gt; 0 &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">&quot;$emit(&#x27;onChange&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prefix</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;iconfont&#x27;, iconName]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;tips.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; tips &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineComponent, reactive, ref, watch, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">ElInput</span> &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;CustomInput&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">ElInput</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">modelValue</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">placeholder</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">default</span>: <span class="string">&quot;&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">oninput</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">default</span>: <span class="string">&quot;&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">iconName</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">default</span>: <span class="string">&quot;&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tips</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">default</span>: <span class="string">&quot;&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">emits</span>: [<span class="string">&quot;input&quot;</span>, <span class="string">&quot;update:modelValue&quot;</span>, <span class="string">&quot;onChange&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 绑定控件的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> value = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听属性，给 value 赋值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">watch</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="function">() =&gt;</span> props.<span class="property">modelValue</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">v1, v2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        value.<span class="property">value</span> = v1;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      value,</span></span><br><span class="line"><span class="language-javascript">      props,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getIconName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="string">&quot;iconfont &quot;</span> + <span class="variable language_">this</span>.<span class="property">iconName</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/** 向父组件提交事件更新数据 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:modelValue&quot;</span>, e);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.iconfont</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#127ffc</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.red-border</span> <span class="selector-class">.el-input__inner</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ff6666</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tips</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#ff6666</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">5px</span> auto <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="怎么使用封装组件？"><a href="#怎么使用封装组件？" class="headerlink" title="怎么使用封装组件？"></a>怎么使用封装组件？</h2><ul>
<li><p>引入</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CustomInput</span> <span class="keyword">from</span> <span class="string">&quot;/@/components/CustomInput/index.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">CustomInput</span> &#125;,</span><br><span class="line">	...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">CustomInput</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;input-tel&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;tel&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号码&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">iconName</span>=<span class="string">&quot;iconshoujihaoma&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">oninput</span>=<span class="string">&quot;`(value = value.replace(/[^\d]/g, &#x27;&#x27;))`&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:tips</span>=<span class="string">&quot;telTips&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">onChange</span>=<span class="string">&quot;telTips = &#x27;&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">CustomInput</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>子组件需watch值变化，然后通过emit 事件上抛值，否则子组件value值变化，上层组件还是原来的值</li>
<li>更改子组件默认样式，需要将style 标签中的scoped 去掉，否则会导致怎么也无法覆盖子组件样式情况</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://javascript.plainenglish.io/vue-3-v-model-and-components-de2d39527f80">Vue 3 - v-model and Components</a></li>
<li><a href="https://www.jianshu.com/p/a3c3ba59f812">Vue3组件（三）把别人的组件拿过来再封装一下</a></li>
<li><a href="https://stackoverflow.com/questions/41133833/how-to-override-scoped-styles-in-vue-components">How to override scoped styles in Vue components?</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue3.x + Vite2.x 入门实战</category>
      </categories>
      <tags>
        <tag>el-input 封装</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.x + Vite2.x 入门实战 04：不管怎么设置z-index值，元素层级仍然不对</title>
    <url>/2022/11/13/Practice/vue3.x_vite2.x/Vue3.x_Vite2.x-04/</url>
    <content><![CDATA[<blockquote>
<p>编写页面布局时，必定会碰到的问题，不管怎么设置z-index值，元素都被挡住。原因：没有真正理解CSS层叠样式是啥</p>
</blockquote>
<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul>
<li>元素层级不对情况</li>
<li>解决层级不对方案</li>
<li>总结</li>
</ul>
<span id="more"></span>
<h2 id="元素层级不对情况"><a href="#元素层级不对情况" class="headerlink" title="元素层级不对情况"></a>元素层级不对情况</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>html</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side-tab&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>css</p>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">		<span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.modal</span> &#123;</span><br><span class="line">	    <span class="attribute">position</span>: absolute;</span><br><span class="line">	    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.side-tab</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><ul>
<li>遮挡情况</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210409112623.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210409112623.png"></p>
<ul>
<li>正常情况</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210409113631.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210409113631.png"></p>
<hr>
<h2 id="解决层级不对方案"><a href="#解决层级不对方案" class="headerlink" title="解决层级不对方案"></a>解决层级不对方案</h2><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><ul>
<li>步骤1：遮挡元素和被遮挡元素，调整到相同父节点下</li>
<li>步骤2：调整z-index值</li>
<li><p>示例</p>
<ul>
<li><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- modal 移出来放到同级, z-index 就生效了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side-tab&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>css</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">		<span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.modal</span> &#123;</span><br><span class="line">	    <span class="attribute">position</span>: absolute;</span><br><span class="line">	    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.side-tab</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><ul>
<li>步骤1：去掉被遮挡的父元素postion熟悉</li>
<li>步骤2：调整z-index值</li>
<li><p>示例</p>
<ul>
<li><p>html</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side-tab&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>css</p>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">		<span class="comment">//position: relative;</span></span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.modal</span> &#123;</span><br><span class="line">	    <span class="attribute">position</span>: absolute;</span><br><span class="line">	    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.side-tab</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>先按元素先后顺序层叠摆放，再按z-index属性调整层级次序叠放</p>
</blockquote>
<ul>
<li>CSS是层叠样式<ul>
<li>无postion时，元素按先后顺序一层一层叠放绘制的</li>
<li>有postion时，可通过z-index 调整同级元素的层级</li>
<li>子元素要想突破父元素层叠限制，请删除父元素postion 属性</li>
</ul>
</li>
<li>感悟：接触CSS就应该先搞懂层叠是个啥玩意儿，不然层级问题会搞得你摸不着头脑。贴个chrome layer图（Chrome位置：More tools/layers）</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210409115545.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master//img/20210409115545.png"></p>
<h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ul>
<li><a href="https://coder-coder.com/z-index-isnt-working/">4 reasons your z-index isn’t working (and how to fix it)</a></li>
</ul>
<hr>
<blockquote>
<p>以上: 如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue3.x + Vite2.x 入门实战</category>
      </categories>
      <tags>
        <tag>z-index</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.x + Vite2.x 入门实战 06：Keep-alive 动态配置include实现页面缓存</title>
    <url>/2022/11/13/Practice/vue3.x_vite2.x/Vue3.x_Vite2.x-06/</url>
    <content><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul>
<li>实现步骤<ul>
<li>第一步：利用store状态管理缓存页面</li>
<li>第二步：布局layout组件添加router-view相关配置</li>
<li>第三步：在需要缓存的页面，添加路由守卫</li>
</ul>
</li>
<li>总结</li>
</ul>
<span id="more"></span>
<hr>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><hr>
<ul>
<li><p>第一步：利用store状态管理缓存页面</p>
  <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/modules/KeepAlive.ts</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> keepAliveModule = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">caches</span>: [],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">ADD</span>(<span class="params">state, name</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.<span class="property">caches</span>.<span class="title function_">indexOf</span>(name) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                state.<span class="property">caches</span>.<span class="title function_">push</span>(name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">REMOVE</span>(<span class="params">state, name</span>) &#123;</span><br><span class="line">            state.<span class="property">caches</span> = state.<span class="property">caches</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item != name);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">CLEAN</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            state.<span class="property">caches</span> = [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> keepAliveModule;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> keepAliveModule <span class="keyword">from</span> <span class="string">&#x27;./modules/KeepAlive&#x27;</span>;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">keepAlive</span>: keepAliveModule</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">keepAlive</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> (state <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">keepAlive</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第二步：布局layout组件添加router-view相关配置</p>
  <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;MainWrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	        <span class="tag">&lt;<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	          <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;$store.state.keepAlive.caches&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">	          <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	    <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三步：在需要缓存的页面，添加路由守卫</p>
<ul>
<li>beforeRouteEnter：添加缓存页面</li>
<li>beforeRouteLeave：删除缓存页面</li>
<li><p>提示：控制逻辑放置一块，方便管理</p>
  <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/views/variety.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;variety&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> == <span class="string">&quot;/product/variety&quot;</span>) &#123;</span><br><span class="line">      store.<span class="title function_">commit</span>(<span class="string">&quot;keepAlive/ADD&quot;</span>, to.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">name</span> != <span class="string">&quot;pic-editor&quot;</span>) &#123;</span><br><span class="line">      store.<span class="title function_">commit</span>(<span class="string">&quot;keepAlive/REMOVE&quot;</span>, <span class="keyword">from</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>特别提醒：keep-alive :include 使用的是页面组件name，所以一定要记得给页面组件命名</li>
</ul>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://hooray.github.io/posts/5dc60183/">使用 keep-alive 的 include 属性实现 Vue 页面缓存</a></li>
</ul>
<hr>
<blockquote>
<p>以上：如发现有问题，欢迎留言指出，我及时更正</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue3.x + Vite2.x 入门实战</category>
      </categories>
      <tags>
        <tag>页面缓存</tag>
        <tag>Keep-alive</tag>
      </tags>
  </entry>
</search>
