<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Potter&#39;s Blog</title>
  
  <subtitle>努力成为更强大的自我</subtitle>
  <link href="https://yanxuewen.cn/atom.xml" rel="self"/>
  
  <link href="https://yanxuewen.cn/"/>
  <updated>2022-11-13T12:47:42.953Z</updated>
  <id>https://yanxuewen.cn/</id>
  
  <author>
    <name>Potter</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github + Hexo + Next 搭建个人博客网站</title>
    <link href="https://yanxuewen.cn/2022/11/13/BuildBlog/"/>
    <id>https://yanxuewen.cn/2022/11/13/BuildBlog/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>搭建步骤</li><li>安装环境</li><li>图床加速、集成Gitalk、集成Valine </li><li>绑定域名、版权配置、赞赏、站点加速等</li></ul><blockquote><p>搭建原因：几年前一直在CSDN写博客，经常用心写的文章，结果过一段时间文章关联的图片全部丢失，给他们反馈无果，图片丢失也找不回。后面就转用印象笔记，几年下来记录了不少笔记，但是发现还是缺少一个互动的环节，不知道自己写的笔记有没有问题，没法与他人发生碰撞。想快速产生好的想法或者更好的解决方案，看到网上不少朋友都写在自己博客网站上，于是就决定自己也搭一个，一来记录自己成长，二来与大家互动让自己的知识得到升华，而且个人博客也显的逼格更高。 呵呵~  以下是我零碎2~3天搭自己博客网站的步骤，希望能给后面的人提供帮助。</p></blockquote><span id="more"></span><h3 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h3><hr><h4 id="Github-创建博客仓库"><a href="#Github-创建博客仓库" class="headerlink" title="Github 创建博客仓库"></a>Github 创建博客仓库</h4><p>在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如：aa4790139.github.io</p><hr><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><p>在本机安装<a href="https://nodejs.org/zh-cn/download/">Node.js</a></p><hr><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /d/Work/Projects/PotterBlog</span><br><span class="line">cd /d/Work/Projects/PotterBlog</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><hr><h4 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><ul><li><p>如果出现以下情况报错：<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/1.png" alt=""></p><p>  解决办法：关闭npm 的https</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set strict-ssl false</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="编译生成-amp-本地启动"><a href="#编译生成-amp-本地启动" class="headerlink" title="编译生成&amp;本地启动"></a>编译生成&amp;本地启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>等启动完后浏览器打开<a href="http://localhost:4000">http://localhost:4000</a>，看到hello world 博客页面，说明你成功）</p><hr><h4 id="切换主题为Next"><a href="#切换主题为Next" class="headerlink" title="切换主题为Next"></a>切换主题为Next</h4><ul><li><p>首先：clone next 主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>其次：修改项目根目录下的 _config.yml，找到theme字段，更改为next即可</p></li><li><p>最后：修改主题next的默认的相关配置，主题配置文件路径：themes/next/_config.yml (<br>具体怎么配置看这篇文章相关部分即可：<a href="https://www.cxyxiaowu.com/6407.html">https://www.cxyxiaowu.com/6407.html</a> </p></li></ul><hr><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><ul><li><p>命令：(提示：运行如下命令后，文章会生成到source/_posts下)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new hello-world</span><br></pre></td></tr></table></figure></li><li><p>文章开头格式规范：(提示：按此格式方便编译识别标题、时间、类别等)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题 # 自动创建，如 hello-world</span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="创建Github-编写Markdown文章的图床"><a href="#创建Github-编写Markdown文章的图床" class="headerlink" title="创建Github 编写Markdown文章的图床"></a>创建Github 编写Markdown文章的图床</h4><ol><li>github 创建BlogPicBed 仓库</li><li><a href="https://docs.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token">创建个人访问令牌</a></li><li><a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/113965016/bc669d80-3b9c-11ea-9c36-8274348f10a9?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200923%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20200923T014847Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=64a969201f2341629756cedfb055010b0262aec31d37fddc06c9fdf6ac56618a&amp;X-Amz-SignedHeaders=host&amp;actor_id=9338717&amp;key_id=0&amp;repo_id=113965016&amp;response-content-disposition=attachment%3B%20filename%3DPicGo-Setup-2.2.2.exe&amp;response-content-type=application%2Foctet-stream">下载PicGo</a> (目的：利用此工具上传图片至Github创建的BlogPicBed仓库中)</li><li>PicGo 配置成Github,如下图所示<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/2.png" alt=""></li><li>利用PicGo 上传一张图片，然后去BlogPicBed仓库的img文件夹找到你刚刚上传的图片，然后右键复制图片链接地址</li><li>使用Github 图床仓库的图片地址(提示：复制的图片地址是不带raw参数的，所以需要手动在地址后面拼”?raw=true” 否则图片不会显示)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：![](https://github.com/aa4790139/BlogPicBed/blob/master/img/2.png?raw=true)</span><br></pre></td></tr></table></figure><blockquote><p>使用jsdelivr CDN加速图床： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：https://cdn.jsdelivr.net/gh/github账号/图床仓库名@版本/仓库图片相对路径</span><br><span class="line">比如：https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/2.png</span><br></pre></td></tr></table></figure></blockquote></li></ol><hr><h4 id="集成Gitalk"><a href="#集成Gitalk" class="headerlink" title="集成Gitalk"></a>集成Gitalk</h4><ol><li>获取GitHub OAuth授权(参考文章：<a href="https://www.ruanyifeng.com/blog/2019/04/github-oauth.html">GitHub OAuth 第三方登录示例教程</a>)</li><li>GitHub 创建留言仓库BlogGitTalk(注意：此仓库必须为公开仓库，不能为私有仓库)</li><li>themes/_config.yml 找到gitalk，配置如下样子<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: github账号 # GitHub repo owner</span><br><span class="line">  repo: BlogGitTalk # Repository name to store issues</span><br><span class="line">  client_id: GitHub OAuth授权申请下来的client_id # GitHub Application Client ID</span><br><span class="line">  client_secret: GitHub OAuth授权申请下来的client_secret # GitHub Application Client Secret</span><br><span class="line">  admin_user: github账号 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="集成Valine"><a href="#集成Valine" class="headerlink" title="集成Valine"></a>集成Valine</h4><ol><li>注册leancloud账号<a href="https://www.leancloud.cn/"></a></li><li>leancloud 创建应用</li><li>themes/_config.yml 找到valine，配置如下样子<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: leancloud 创建的应用AppID # Your leancloud application appid</span><br><span class="line">  appkey: leancloud 创建的应用appkey # Your leancloud application appkey</span><br><span class="line">  notify: false # Mail notifier</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: Just go go # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  guest_info: nick,mail,link # Custom comment header</span><br><span class="line">  pageSize: 10 # Pagination size</span><br><span class="line">  language: zh-cn # Language, available values: en, zh-cn</span><br><span class="line">  visitor: true # Article reading statistic</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line">  recordIP: false # Whether to record the commenter IP</span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br><span class="line">  #post_meta_order: 0</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="部署至Github"><a href="#部署至Github" class="headerlink" title="部署至Github"></a>部署至Github</h4><ul><li>打开blog根目录下的_config.yml配置,找到Deployment, 配置参考如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:github用户名/github用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li><p>安装hexo-deployer-git 部署插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>部署</p><ul><li>在根目录新建部署脚本deploy.sh，内容如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>运行部署命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><ol><li>阿里云购买域名: <a href="https://oss.console.aliyun.com/"></a></li><li>获取github上博客项目域名的ip<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping github用户名.github.io</span><br></pre></td></tr></table></figure></li><li>阿里云平台域名绑定博客域名ip(第2步ping出来的ip)<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/3.png" alt=""></li></ol><hr><h4 id="版权配置"><a href="#版权配置" class="headerlink" title="版权配置"></a>版权配置</h4><ol><li>next/_config.yum 找到creative_commons</li><li>配置成如下样子：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="QQ交流平台："><a href="#QQ交流平台：" class="headerlink" title="QQ交流平台："></a>QQ交流平台：</h3><p>hexo next主题交流：1076692090</p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul><li><a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">Hexo博客搭建之在文章中插入图片</a></li><li><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/">Hexo使用攻略-添加分类及标签</a></li><li><a href="https://www.cnblogs.com/alex-zen/p/11203544.html#%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8E%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87">Markdown必备-本地图片快速上传至图床</a></li><li><a href="https://www.ruanyifeng.com/blog/2019/04/github-oauth.html">GitHub OAuth 第三方登录示例教程</a></li><li><a href="https://poplite.xyz/post/2018/05/03/how-to-enable-https-for-custom-domain-on-github-pages.html">Github Pages 开始为自定义域名提供 HTTPS 支持</a></li><li><a href="https://github.com/jsdelivr/jsdelivr#usage">JSdelivr 使用说明</a></li><li><a href="https://www.itrhx.com/2019/02/10/A18-free-cdn/">免费CDN：jsDelivr + Github</a></li></ul><hr><h3 id="特别致谢："><a href="#特别致谢：" class="headerlink" title="特别致谢："></a>特别致谢：</h3><ul><li>cxyxiaowu ：<a href="https://www.cxyxiaowu.com/6407.html">https://www.cxyxiaowu.com/6407.html</a></li><li>Lining Wei ：<a href="https://weilining.github.io/">https://weilining.github.io/</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;搭建步骤&lt;/li&gt;
&lt;li&gt;安装环境&lt;/li&gt;
&lt;li&gt;图床加速、集成Gitalk、集成Valine &lt;/li&gt;
&lt;li&gt;绑定域名、版权配置、赞赏、站点加速等&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;搭建原因：几年前一直在CSDN写博客，经常用心写的文章，结果过一段时间文章关联的图片全部丢失，给他们反馈无果，图片丢失也找不回。后面就转用印象笔记，几年下来记录了不少笔记，但是发现还是缺少一个互动的环节，不知道自己写的笔记有没有问题，没法与他人发生碰撞。想快速产生好的想法或者更好的解决方案，看到网上不少朋友都写在自己博客网站上，于是就决定自己也搭一个，一来记录自己成长，二来与大家互动让自己的知识得到升华，而且个人博客也显的逼格更高。 呵呵~  以下是我零碎2~3天搭自己博客网站的步骤，希望能给后面的人提供帮助。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="杂项" scheme="https://yanxuewen.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="Github" scheme="https://yanxuewen.cn/tags/Github/"/>
    
    <category term="Hexo" scheme="https://yanxuewen.cn/tags/Hexo/"/>
    
    <category term="Next" scheme="https://yanxuewen.cn/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试-01：了解</title>
    <link href="https://yanxuewen.cn/2022/11/13/AutoTest/AutoTest01/"/>
    <id>https://yanxuewen.cn/2022/11/13/AutoTest/AutoTest01/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>了解测试内容分类</li><li>了解测试框架</li><li>相关视频教程</li></ul><span id="more"></span><h3 id="测试内容分类"><a href="#测试内容分类" class="headerlink" title="测试内容分类"></a>测试内容分类</h3><ul><li>从软件测试的实践过程看：单元测试、集成测试、确认测试、系统测试、验收测试</li><li>从软件测试的方法策略看：白盒测试、黑盒测试、灰盒测试</li><li>从软件测试的测试视角看：功能测试、性能测试、兼容性测试、安全测试、探索性测试</li><li>从软件测试的技术程度看：手工测试、自动化测试、测试开发</li></ul><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><ul><li>Python/PHP/Java/C#/JavaScprit/Ruby + Selenium/Appium + 单元测试框架：开源功能自动化测试方案</li><li>Python + Macaca：阿里巴巴  自动化测试方案</li><li>JavaScript + TestCafe，DevExpress： 开源功能自动化测试方案</li><li>Python/Java/C#/JavaScprit/Ruby + Gauge： 一款开源的功能自动化测试方案</li><li>JavaScript + Postman：免费的Web接口功能自动化测试</li><li>Groovy + SoapUI：开源的Web接口功能自动化测试方案</li><li>更多<ul><li>Selenium：<a href="http://www.selenium.org.cn/category/use">web测试工具</a></li><li>Appium: web、原生、混合应用都能测试</li><li>JMeter：软件压测工具</li></ul></li></ul><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul><li><a href="https://www.51zxw.net/list.aspx?page=2&amp;cid=670">Appium自动化测试视频教程</a></li><li><a href="https://sutune.me/2018/04/15/appium/">Appium简介</a></li><li><a href="https://hllgithub.github.io/2018/09/09/Appium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/">Appium自动化测试介绍和使用说明</a></li><li><a href="http://www.selenium.org.cn/category/use">Selenium</a></li><li><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">Selenium + python 中文文档</a></li><li><a href="https://macacajs.github.io/zh/guide/#%E9%9B%86%E6%88%90%E5%92%8C%E8%9E%8D%E5%90%88">Macaca</a></li><li><a href="https://yq.aliyun.com/articles/398697">Macaca-iOS入门那些事</a></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/36896449">一分钟了解自动化测试</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;了解测试内容分类&lt;/li&gt;
&lt;li&gt;了解测试框架&lt;/li&gt;
&lt;li&gt;相关视频教程&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="自动化测试" scheme="https://yanxuewen.cn/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://yanxuewen.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试-02：实践</title>
    <link href="https://yanxuewen.cn/2022/11/13/AutoTest/AutoTest02/"/>
    <id>https://yanxuewen.cn/2022/11/13/AutoTest/AutoTest02/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>环境搭建: Appium 环境、Android 环境、Python 环境、夜神模拟器</li><li>Android APP 测试 </li></ul><span id="more"></span><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li>Appium 环境<ul><li>安装：Appium Desktop (Server) <a href="https://github.com/appium/appium-desktop/releases">下载地址</a></li><li>安装：Appium-Python-Client (Client) <a href="https://pypi.org/project/Appium-Python-Client/">教程</a></li></ul></li><li>Android 环境：<ul><li>下载安装JDK <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">下载地址</a></li><li>下载Android SDK <a href="https://developer.android.com/studio">下载地址</a></li><li>配置JAVA和Android环境变量 <a href="https://www.jianshu.com/p/a9e80bb782af">教程</a></li></ul></li><li>Python 环境：<ul><li>首先：<a href="https://www.python.org/downloads/">下载安装Python</a></li><li>此次：安装Appium Python库, 命令: pip install -U Appium-Python-Client—python <a href="https://pypi.org/project/Appium-Python-Client/">安装教程</a></li><li>最后：安装Python IDE <a href="https://www.jetbrains.com/pycharm/download/#section=windows">pycharm下载</a></li></ul></li><li>夜神模拟器：<a href="https://www.yeshen.com/">下载安装</a></li></ul><h3 id="Android-APP-测试"><a href="#Android-APP-测试" class="headerlink" title="Android APP 测试"></a>Android APP 测试</h3><ul><li><p>常用命令：</p><ul><li>获取联机设备名称：adb devices</li><li>与设备建立连接：adb connect ip:port (提示：使用adb devices 显示设备的ip和端口)</li><li><p>获取APP包名和启动名：adb shell dumpsys window  windows | findstr mFocusedApp (提示：使用模拟器或手机,打印需测试的APP 保持显示在当前屏幕后，在cmd中输入此命令回车，假如输出结果如下)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  adb shell dumpsys window  windows | findstr mFocusedApp</span><br><span class="line">mFocusedApp=AppWindowToken&#123;e84eb4f token=Token&#123;1260a29 ActivityRecord&#123;16e4bb0 u0 com.guide.custom/com.anyapps.Activity.AALaunch t12&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">包名：com.guide.custom</span><br><span class="line">启动Activity名：com.anyapps.Activity.AALaunch</span><br></pre></td></tr></table></figure></li></ul></li><li><p>调试步骤：</p><ol><li>启动夜神模拟器，获取相关信息<ul><li>获取设备号IP和Port: cmd-&gt;adb devices (如果不显示请检查环境配置)</li><li>与设备建立连接：adb connect 127.0.0.1:62001</li><li>系统版本：系统应用-&gt;设置-&gt;版本</li></ul></li><li>打开程序包(拿系统Setting打比方)，获取包名和启动Activity名：adb shell dumpsys window  windows | findstr</li><li>启动Appium，创建Server&lt;-&gt;会话<ul><li>Start Server -&gt; 点击搜索图标 -&gt; 根据1、2获取信息，填写对应信息，我的如下<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/20201025-001.png" alt=""></li><li>创建会话成功后，效果图如下：(此时可以获取原生布局元素了)<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/20201025224614.png" alt=""></li></ul></li></ol></li></ul><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul><li><a href="https://www.51zxw.net/list.aspx?page=2&amp;cid=670#!fenye=2">Appium自动化测试教程</a></li><li><a href="http://appium.io/docs/cn/writing-running-appium/caps/index.html">Appium 参数说明</a></li></ul><blockquote><p>最后：其他平台APP调试应该类似，以后再尝试吧 ~</p></blockquote><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;环境搭建: Appium 环境、Android 环境、Python 环境、夜神模拟器&lt;/li&gt;
&lt;li&gt;Android APP 测试 &lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="自动化测试" scheme="https://yanxuewen.cn/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://yanxuewen.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python-03：Web自动化测试【打开Chrome百度搜索Selenium】</title>
    <link href="https://yanxuewen.cn/2022/11/13/AutoTest/AutoTest03/"/>
    <id>https://yanxuewen.cn/2022/11/13/AutoTest/AutoTest03/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>环境准备</li><li>案例：打开Chrome百度搜索Selenium</li><li>原理总结</li></ul><span id="more"></span><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li>Win10</li><li>Chrome 84.0.4147.135</li><li>ChromeDriver 84.0.4147.30<ol><li>关闭Chrome更新，避免不停换驱动</li><li>下载Chrome对应版本ChromeDriver驱动<a href="https://chromedriver.chromium.org/downloads">下载地址</a></li><li>将ChromeDriver 放到Python安装目录下. 比如：C:\Users\Administrator\AppData\Local\Programs\Python\Python39</li></ol></li><li>Python 3.9.0</li><li>Selenium 3.141.0<br> 安装命令：pip install selenium (提示：如果执行报错，请检查python环境变量配置)</li></ol><h3 id="案例：打开Chrome百度搜索Selenium"><a href="#案例：打开Chrome百度搜索Selenium" class="headerlink" title="案例：打开Chrome百度搜索Selenium"></a>案例：打开Chrome百度搜索Selenium</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from selenium import  webdriver</span><br><span class="line"># 使用Chrome驱动</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"># 让浏览器全屏</span><br><span class="line">driver.maximize_window()</span><br><span class="line"># 打开百度</span><br><span class="line">driver.get(&quot;https://baidu.com&quot;)</span><br><span class="line"># 找到百度搜索框元素</span><br><span class="line">input = driver.find_element_by_id(&quot;kw&quot;)</span><br><span class="line"># 往输入框中输入搜索关键词&quot;selenium&quot;</span><br><span class="line">input.send_keys(&quot;selenium&quot;)</span><br><span class="line"># 点击百度一下按钮搜索</span><br><span class="line">search = driver.find_element_by_id(&quot;su&quot;)</span><br><span class="line">search.click()</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote><p>其实原理就是 Python 通过Selenium 调用浏览器驱动接口，然后驱动Driver接口操作Web中元素进行交互</p></blockquote><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h3><ul><li><a href="https://selenium-python-zh.readthedocs.io/en/latest/index.html">Selenium-Python中文文档</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;环境准备&lt;/li&gt;
&lt;li&gt;案例：打开Chrome百度搜索Selenium&lt;/li&gt;
&lt;li&gt;原理总结&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="自动化测试" scheme="https://yanxuewen.cn/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Python" scheme="https://yanxuewen.cn/tags/Python/"/>
    
    <category term="Selenium" scheme="https://yanxuewen.cn/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Python-04：AppWeb自动化测试【打开App切换WebView登录】</title>
    <link href="https://yanxuewen.cn/2022/11/13/AutoTest/AutoTest04/"/>
    <id>https://yanxuewen.cn/2022/11/13/AutoTest/AutoTest04/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>环境准备</li><li>测试步骤</li><li>案例代码</li></ul><span id="more"></span><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li>NodeJS v12.13.1</li><li>JDK 1.8.0_191</li><li>Android SDK </li><li>Appium-Python-Client </li></ol><blockquote><p>具体教程请看: <a href="https://yanxuewen.cn/2020/10/22/AutoTest02/">自动化测试-02：实践</a></p></blockquote><h3 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h3><ol><li>AppWebView开启调试模式： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setWebContentsDebuggingEnabled(true);</span><br></pre></td></tr></table></figure></li><li>获取Android Chrome 版本： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -a android.intent.action.VIEW -d  https://liulanmi.com/labs/core.html</span><br></pre></td></tr></table></figure></li><li>根据Android Chrome版本，下载对应ChromeDriver驱动 <a href="https://chromedriver.chromium.org/downloads">下载地址</a></li><li>将下载的ChromeDriver Copy 至 Appium 目录，比如我的Appium目录： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Appium\resources\app\node_modules\appium\node_modules\appium-chromedriver\chromedriver\win</span><br></pre></td></tr></table></figure></li><li>启动APP后并跳转App内嵌的WebView页面，使用Chrome获取WebView中的元素 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开Chrome </span><br><span class="line">地址栏输入：chrome://inspect</span><br></pre></td></tr></table></figure> 如下图所示：<br> <img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/20201105212810.png" alt=""></li></ol><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 案例：自动化测试-登录</span><br><span class="line"></span><br><span class="line">from appium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">desired_caps = &#123;&#125;</span><br><span class="line">desired_caps[&quot;platformName&quot;] = &quot;android&quot;</span><br><span class="line">desired_caps[&quot;platformVersion&quot;] = &quot;7.1.2&quot;</span><br><span class="line">desired_caps[&quot;deviceName&quot;] = &quot;127.0.0.1:62001&quot;</span><br><span class="line">desired_caps[&quot;appPackage&quot;] = &quot;com.guide.custom&quot;</span><br><span class="line">desired_caps[&quot;appActivity&quot;] = &quot;com.anyapps.Activity.AALaunch&quot;</span><br><span class="line">desired_caps[&quot;noReset&quot;] = &quot;true&quot;</span><br><span class="line">desired_caps[&quot;autoGrantPermissions&quot;] = &quot;true&quot;</span><br><span class="line">desired_caps[&#x27;chromeOptions&#x27;] = &#123;&quot;w3c&quot;:False&#125;</span><br><span class="line">desired_caps[&#x27;showChromedriverLog&#x27;] = True</span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(&#x27;http://localhost:4723/wd/hub&#x27;, desired_caps)</span><br><span class="line"></span><br><span class="line">view_context = &quot;WEBVIEW_com.guide.custom&quot;</span><br><span class="line">driver.switch_to.context(view_context)</span><br><span class="line">time.sleep(5)</span><br><span class="line">print(driver.current_context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取账号和密码元素，输入账号密码</span><br><span class="line">inputAccount = driver.find_element_by_id(&quot;account&quot;)</span><br><span class="line">inputAccount.send_keys(&#x27;186xxxxxxx&#x27;)</span><br><span class="line">inputPassword = driver.find_element_by_id(&quot;password&quot;)</span><br><span class="line">inputPassword.send_keys(&#x27;123456&#x27;)</span><br><span class="line"># 获取登录元素，点击登录</span><br><span class="line">loginBtn = driver.find_element_by_class_name(&#x27;confirmDisable&#x27;)</span><br><span class="line">loginBtn.click()</span><br></pre></td></tr></table></figure><h3 id="Appium-调试App-原理图"><a href="#Appium-调试App-原理图" class="headerlink" title="Appium 调试App 原理图"></a>Appium 调试App 原理图</h3><p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/QQ%E6%88%AA%E5%9B%BE20201105213544.png" alt=""></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h3><ul><li><a href="https://selenium-python-zh.readthedocs.io/en/latest/index.html">Selenium-Python中文文档</a></li><li><a href="https://github.com/appium/appium/issues/13306">Fail to locate an web element using “findElement” on Android</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;环境准备&lt;/li&gt;
&lt;li&gt;测试步骤&lt;/li&gt;
&lt;li&gt;案例代码&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="自动化测试" scheme="https://yanxuewen.cn/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Python" scheme="https://yanxuewen.cn/tags/Python/"/>
    
    <category term="Selenium" scheme="https://yanxuewen.cn/tags/Selenium/"/>
    
    <category term="Appnium" scheme="https://yanxuewen.cn/tags/Appnium/"/>
    
  </entry>
  
  <entry>
    <title>搭建Jenkins之win10环境</title>
    <link href="https://yanxuewen.cn/2022/11/13/CI&amp;CD/%E6%90%AD%E5%BB%BAJenkins%E4%B9%8Bwin10%E7%8E%AF%E5%A2%83/"/>
    <id>https://yanxuewen.cn/2022/11/13/CI&amp;CD/%E6%90%AD%E5%BB%BAJenkins%E4%B9%8Bwin10%E7%8E%AF%E5%A2%83/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<p>由于 jenkins 是来解放我们的工作，所以我们希望他够稳定，不至于经常去折腾浪费时间，所以选择 LTS 稳定版本。我选择的版本是：<strong>Jenkins 2.361.3 LTS windows，接下来就看我下面提供的官方安装教程即可。</strong></p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><ul><li>下载地址：<a href="https://www.jenkins.io/download/">https://www.jenkins.io/download/</a></li><li>官方安装教程：<a href="https://www.jenkins.io/doc/book/installing/windows/">https://www.jenkins.io/doc/book/installing/windows/</a></li></ul><h1 id="安装过程遇到的问题"><a href="#安装过程遇到的问题" class="headerlink" title="安装过程遇到的问题"></a>安装过程遇到的问题</h1><p>对于遇到这些问题的同学，希望能给你提供一份帮助，避免被麻烦苦恼，如果我遇到的问题不包含在以下内容中，请直接 Google 一般能找到解决办法</p><h2 id="问题-1：验证失败无法下一步"><a href="#问题-1：验证失败无法下一步" class="headerlink" title="问题 1：验证失败无法下一步"></a>问题 1：验证失败无法下一步</h2><ul><li>问题现状<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145532.png" alt=""></li><li>解决办法：<br>控制面板 → 管理工具 → 本地安全策略 → 本地策略 → 用户权限分配 → 作为服务登录<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145605.png" alt=""><br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145628.png" alt=""><br>选中它然后右键属性，弹出如下窗口：添加安装过程的填写的用户信息到列表中，最后点确定就可以继续安装了<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145644.png" alt=""></li></ul><span id="more"></span><h2 id="问题-2：选择-jdk-目录后弹框提示无效？"><a href="#问题-2：选择-jdk-目录后弹框提示无效？" class="headerlink" title="问题 2：选择 jdk 目录后弹框提示无效？"></a>问题 2：选择 jdk 目录后弹框提示无效？</h2><ul><li>解决办法：看提示 jekins 支持的 jdk 版本，选择对应的版本即可</li></ul><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145700.png" alt=""></p><blockquote><p>提示：到这个界面说明你的 jenkins 安装完毕，切记别急着点进去(否则切换目录又需要安装插件搞一遍，挺久的完全是浪费时间)，Jenkins 工作目录默认是安装在 C 盘的，此时你可能跟我一样一样不想让 C 盘爆掉，那么你就跟着我把 Jenkins 的默认 workspace 切换至其他盘符。如果你无需切换 Jenkins 工作空间的话，可以跳过切换 workspace 部分内容</p></blockquote><h1 id="切换-Jenkins-默认工作空间-和-防止-job-运行控制台中文显示乱码问题"><a href="#切换-Jenkins-默认工作空间-和-防止-job-运行控制台中文显示乱码问题" class="headerlink" title="切换 Jenkins 默认工作空间 和 防止 job 运行控制台中文显示乱码问题"></a>切换 Jenkins 默认工作空间 和 防止 job 运行控制台中文显示乱码问题</h1><ul><li>找到安装目录下的 jenkins.xml 文件，然后修改如下内容<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145722.png" alt=""><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">env</span> <span class="attr">name</span>=<span class="string">&quot;JENKINS_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;E:\Program Files\Jenkins&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">env</span> <span class="attr">name</span>=<span class="string">&quot;JAVA_TOOL_OPTIONS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-Dsun.jnu.encoding=UTF-8 -Dfile.encoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>说明：第一句切换工作目录，第二句：避免 job 运行控制台中文显示乱码问题，所以直接定死 UTF-8 格式</p></blockquote></li></ul><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>进入插件安装页面：Dashboard→Manage Jekins → 插件管理</p><ul><li><strong><a href="https://plugins.jenkins.io/publish-over-ssh">Publish Over SSH</a>：将代码传送至服务器</strong></li><li>Extended E-mail Notification</li></ul><h1 id="配置-Configure-System"><a href="#配置-Configure-System" class="headerlink" title="配置 Configure System"></a>配置 Configure System</h1><h2 id="配置：Location"><a href="#配置：Location" class="headerlink" title="配置：Location"></a>配置：Location</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145736.png" alt=""></p><h2 id="配置：全局属性"><a href="#配置：全局属性" class="headerlink" title="配置：全局属性"></a>配置：全局属性</h2><p>添加环境变量配置，方便其他地方复用信息避免重复配置，自己想配多少就点添加即可</p><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145745.png" alt=""></p><h2 id="配置：Shell"><a href="#配置：Shell" class="headerlink" title="配置：Shell"></a>配置：Shell</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145756.png" alt=""></p><blockquote><p>提示：选择 git 安装目录下的 sh.exe，方便在 job 配置执行 shell 命令</p></blockquote><h2 id="配置：Extended-E-mall-Notification"><a href="#配置：Extended-E-mall-Notification" class="headerlink" title="配置：Extended E-mall Notification"></a>配置：Extended E-mall Notification</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145826.jpg" alt=""></p><p>补充说明：</p><ul><li>SMTP Username：填写你的 qq 邮箱</li><li>SMTP Password ：填写 qq 邮箱的授权码，由于我的已开启。如果你的未开启应该就是显示已关闭，点击开启然后按提示获取授权码即可<br><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145808.png" alt=""></li></ul><h2 id="Publish-over-SSH"><a href="#Publish-over-SSH" class="headerlink" title="Publish over SSH"></a>Publish over SSH</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145855.png" alt=""></p><h1 id="配置-Global-Tool-Configuration"><a href="#配置-Global-Tool-Configuration" class="headerlink" title="配置 Global Tool Configuration"></a>配置 Global Tool Configuration</h1><h2 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145907.png" alt=""></p><h1 id="配置：Credentials"><a href="#配置：Credentials" class="headerlink" title="配置：Credentials"></a>配置：Credentials</h1><p>进入：Dashboard→Manage Jenkins→Credentials→System→<strong>Global credentials (unrestricted)，</strong>添加凭证</p><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145921.png" alt=""></p><p>说明：用于 Jenkins 关联 git 账号 clone 代码，private key key 中填私钥 key。如果你还没有密钥对，请使用<code>ssh-keygen</code> 工具生成。相关文章：*<strong>*<a href="https://www.ssh.com/academy/ssh/keygen#ssh-keys-and-public-key-authentication">Creating an SSH Key Pair for User Authentication</a>**</strong></p><h1 id="创建-Job"><a href="#创建-Job" class="headerlink" title="创建 Job"></a>创建 Job</h1><p>创建 Job：Dashboard→ 新增 Item</p><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145933.png" alt=""></p><h2 id="配置：General"><a href="#配置：General" class="headerlink" title="配置：General"></a>配置：General</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145942.png" alt=""></p><h2 id="配置：源码管理"><a href="#配置：源码管理" class="headerlink" title="配置：源码管理"></a>配置：源码管理</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145951.png" alt=""></p><h2 id="配置：Build-Steps"><a href="#配置：Build-Steps" class="headerlink" title="配置：Build Steps"></a>配置：Build Steps</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150007.png" alt=""></p><h2 id="配置：构建后操作"><a href="#配置：构建后操作" class="headerlink" title="配置：构建后操作"></a>配置：构建后操作</h2><ul><li>上传至服务器</li><li>发送邮件</li></ul><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150117.png" alt=""></p><h2 id="配置：Send-build-artifacts-over-SSH"><a href="#配置：Send-build-artifacts-over-SSH" class="headerlink" title="配置：Send build artifacts over SSH"></a>配置：Send build artifacts over SSH</h2><blockquote><p>说明：上传打包后结果至服务器</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150133.png" alt=""></p><h2 id="配置：Editable-Email-Notifacation"><a href="#配置：Editable-Email-Notifacation" class="headerlink" title="配置：Editable Email Notifacation"></a>配置：Editable Email Notifacation</h2><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150151.jpg" alt=""></p><blockquote><p>说明：触发器规则、邮件接收人等可以根据自己的需求配置，为了方便提供一份邮件模板给大家</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var=&quot;JOB_NAME&quot;&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">topmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            本邮件由系统自动发出，无需回复！<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            各位同事，大家好，以下为$&#123;PROJECT_NAME &#125;项目构建信息<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#CC0000&quot;</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称 ： $&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号 ： 第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因： $&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建状态： $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;console&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;ws&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>报告  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;allure<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>失败用例<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line">$FAILED_TESTS<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>最近提交<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">$&#123;CHANGES_SINCE_LAST_SUCCESS, reverse=true, format=&quot;%c&quot;, changesFormat=&quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span>%d [%a] %m<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">详细提交: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;changes&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="更多问题"><a href="#更多问题" class="headerlink" title="更多问题"></a>更多问题</h1><h2 id="问题：Extended-E-mail-Notification-无-SMTP-username-和-SMTP-Passord-选项"><a href="#问题：Extended-E-mail-Notification-无-SMTP-username-和-SMTP-Passord-选项" class="headerlink" title="问题：Extended E-mail Notification 无 SMTP username 和 SMTP Passord 选项"></a>问题：Extended E-mail Notification 无 SMTP username 和 SMTP Passord 选项</h2><p>解决办法：卸载安装好的 Extended E-mail Notification 插件，替换成 2.72 版本就显示出来了。<a href="https://pan.baidu.com/s/1OkVWR09rGHUqvpiHQ0yWAQ?pwd=TXYx">2.72 下载</a>，提取码: TXYx</p><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150213.png" alt=""></p><h2 id="问题：Error-sending-to-the-following-VALID-addresses-xxx-qq-com"><a href="#问题：Error-sending-to-the-following-VALID-addresses-xxx-qq-com" class="headerlink" title="问题：Error sending to the following VALID addresses: xxx@qq.com"></a>问题：Error sending to the following VALID addresses: <a href="mailto:xxx@qq.com">xxx@qq.com</a></h2><p>SendFailedException message: 502 Invalid input from 61.140.27.8 to <a href="http://newxmesmtplogicsvrszb6.qq.com/">newxmesmtplogicsvrszb6.qq.com</a></p><p>解决方法：将 job 任务配置中的 Editable Email Notification 栏目中的 Project From 清空掉，然后应用保存。再次点击构建即可触发邮件了</p><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150226.png" alt=""></p><h2 id="问题：shell-执行-tar-解压操作报错，提示：无法-Remove-prefix"><a href="#问题：shell-执行-tar-解压操作报错，提示：无法-Remove-prefix" class="headerlink" title="问题：shell 执行 tar 解压操作报错，提示：无法 Remove prefix"></a>问题：shell 执行 tar 解压操作报错，提示：无法 Remove prefix</h2><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf dist.tar.gz</span><br><span class="line"><span class="comment"># 特别注意：Remove prefix 是相对的根目录[/]与当前目录[/dist/kh]的部分，而不是打出来的dist里面的需要移除的公共前缀路径</span></span><br><span class="line"><span class="built_in">cd</span> dist/kh</span><br><span class="line">tar -zcvf dist.tar.gz *</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113150241.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>建议不要用 windows 来打 jenkins 环境，因为坑真的很多</li></ul><blockquote><p>由于我的 jekins 是局域网环境，所以我就没有配置 Jenkins Hook（就是 git 代码提交后 jenkins 收到推送通知后自动开始执行打包操作，网上搜索一下有很多相关教程的）</p></blockquote><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.jenkins.io/doc/book/installing/windows/#invalid-service-logon-credentials">https://www.jenkins.io/doc/book/installing/windows/#invalid-service-logon-credentials</a></li><li><a href="https://phoenixnap.com/kb/change-jenkins-home-directory">https://phoenixnap.com/kb/change-jenkins-home-directory</a></li><li>*<strong>*<a href="https://blog.csdn.net/qq_38093657/article/details/90054843">新版 Jenkins 修改默认工作空间路径 workspace，控制台乱码修复</a>**</strong></li><li>*<strong>*<a href="https://www.cnblogs.com/zy7y/p/13452077.html">Jenkins(Extended E-mail Notification)邮箱配置正确但是并没有发送邮件</a>**</strong></li><li>*<strong>*<a href="https://blog.csdn.net/qq_31442743/article/details/111639187">jenkens 配置邮件发送踩坑</a>**</strong></li><li>*<strong>*<a href="https://blog.csdn.net/bbsyi/article/details/112301937">Jenkins 自动部署前端项目</a>**</strong></li></ul><hr><blockquote><p>以上：如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于 jenkins 是来解放我们的工作，所以我们希望他够稳定，不至于经常去折腾浪费时间，所以选择 LTS 稳定版本。我选择的版本是：&lt;strong&gt;Jenkins 2.361.3 LTS windows，接下来就看我下面提供的官方安装教程即可。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;下载地址：&lt;a href=&quot;https://www.jenkins.io/download/&quot;&gt;https://www.jenkins.io/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;官方安装教程：&lt;a href=&quot;https://www.jenkins.io/doc/book/installing/windows/&quot;&gt;https://www.jenkins.io/doc/book/installing/windows/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;安装过程遇到的问题&quot;&gt;&lt;a href=&quot;#安装过程遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;安装过程遇到的问题&quot;&gt;&lt;/a&gt;安装过程遇到的问题&lt;/h1&gt;&lt;p&gt;对于遇到这些问题的同学，希望能给你提供一份帮助，避免被麻烦苦恼，如果我遇到的问题不包含在以下内容中，请直接 Google 一般能找到解决办法&lt;/p&gt;
&lt;h2 id=&quot;问题-1：验证失败无法下一步&quot;&gt;&lt;a href=&quot;#问题-1：验证失败无法下一步&quot; class=&quot;headerlink&quot; title=&quot;问题 1：验证失败无法下一步&quot;&gt;&lt;/a&gt;问题 1：验证失败无法下一步&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;问题现状&lt;br&gt;&lt;img data-src=&quot;https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145532.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;解决办法：&lt;br&gt;控制面板 → 管理工具 → 本地安全策略 → 本地策略 → 用户权限分配 → 作为服务登录&lt;br&gt;&lt;img data-src=&quot;https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145605.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img data-src=&quot;https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145628.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;选中它然后右键属性，弹出如下窗口：添加安装过程的填写的用户信息到列表中，最后点确定就可以继续安装了&lt;br&gt;&lt;img data-src=&quot;https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20221113145644.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CI&amp;CD" scheme="https://yanxuewen.cn/categories/CI-CD/"/>
    
    
    <category term="Jenkins" scheme="https://yanxuewen.cn/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>全栈学习-开篇-001</title>
    <link href="https://yanxuewen.cn/2022/11/13/FullStack/LearningFullStack01/"/>
    <id>https://yanxuewen.cn/2022/11/13/FullStack/LearningFullStack01/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>技术栈介绍</li><li>环境准备</li></ul><span id="more"></span><blockquote><p>起因：在网上搜索了挺久，都没找到让我很满意的项目学习，也买了好几个付费项目，看了一部分就会发现看不下去，发现很多问题，虽然说能学到一部分东西，但感觉这些项目只是为了快速赚钱搞的，项目结构不清晰、缺少项目相关的介绍文档、前后端项目代码不分离，代码也写的非常临时和随意等等，可能我要求过高了。我如果用这种方式去做一个正式商业化的项目，用这种态度搞出来的东西肯定做不大。说实话我以前做东西也很随意，但自从我读了《程序员修炼之道》这本书后(若想成为一名真正的程序员，一定要去好好阅读这边书，去吸收点灵气)，让我受益匪浅。要想成为一个好的工程师，就要约束好自己，做事情不要太随意，得有点工匠精神，像匠人一样打造自己的武器，一段时间后你会发现自己层次上了一个阶梯。为了提升下自己全栈方便的能力，选择了我慕客上购买的一个小项目，这个小项目很适合入手，所以就拿这个项目(简版-慕客商城)开启全栈学习之旅。</p></blockquote><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ol><li><p>前端</p><ul><li>Vue - 2.2.6</li><li>vue-cookie - 1.1.4</li><li>vue-resource - 1.3.1</li><li>vue-router - 2.3.1</li><li>vuex - 2.3.1</li></ul></li><li><p>后端</p><ul><li>Node.js - 12.13.1</li><li>Express - 4.14.1</li><li>Mongoose - 5.0.1</li><li>Mongodb - 4.2.8</li></ul></li></ol><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>WebStorm - 2020.1 (方便后端调试，对比VScode、SublimeText、HBuildX 这IDE功能更强大)</li><li>XShell6 、XFTP6 </li><li>Navicat Premium 12 (低版本不支持连mongodb，所以请选择高一点的版本)</li></ul><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;技术栈介绍&lt;/li&gt;
&lt;li&gt;环境准备&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="全栈" scheme="https://yanxuewen.cn/categories/%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="全栈" scheme="https://yanxuewen.cn/tags/%E5%85%A8%E6%A0%88/"/>
    
    <category term="NodeJS" scheme="https://yanxuewen.cn/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>结束《皇室战争》之旅</title>
    <link href="https://yanxuewen.cn/2022/11/13/Game/Game01/"/>
    <id>https://yanxuewen.cn/2022/11/13/Game/Game01/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一款又爱又恨的游戏"><a href="#一款又爱又恨的游戏" class="headerlink" title="一款又爱又恨的游戏"></a>一款又爱又恨的游戏</h3><ul><li>爱：<ol><li>这游戏UI和画质都做得非常精美，原画的细节做得非常逼真</li><li>3分钟一场战斗，游戏时间设置的完美</li><li>操作简单，容易上手</li></ol></li><li>恨:<ol><li>3分钟一场战斗，导致你蹲个坑都可以玩几局，有时输能让你蹲出半个多小时，最后起来酸的不行</li><li>部落战匹配规则做得不好，分段6K左右自己卡等只有10级，结果给你匹配满级的来对付你，你技术再好也是以卵击石</li><li>商店不断推出活动引诱你充值，看到你要啥卡牌、是没有金币还是没有宝石，就给你推对应的活动</li><li>影响与家人的关系，有时候连输好几把，家人跟我聊天，我说话很冲，导致跟对方吵起来</li><li>不间断活动、每天对战，让你控制不住不玩，不停想上分，影响工作和学习</li></ol></li></ul><span id="more"></span><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ol><li>对方出的每张卡都记住，等全部8张卡出完，再想怎么用当前的卡组对付它</li><li>未知对方卡组，尽量使用小费过牌，等待摸清对方卡组再出手</li><li>排兵布阵不能全部放到一块，要分散放，不然被对面一个法术全部打中</li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote><p>要升级的卡组已升满，没有玩下去的欲望了，本想这个赛季冲个6500+，结果没多少时间打，中午打了一个多小时，结果卡住6150上不去了，那就让他停留在6150结束这段旅程。接下来开启新的篇章，好好学习、好好工作，这样才能有好的未来</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/222.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一款又爱又恨的游戏&quot;&gt;&lt;a href=&quot;#一款又爱又恨的游戏&quot; class=&quot;headerlink&quot; title=&quot;一款又爱又恨的游戏&quot;&gt;&lt;/a&gt;一款又爱又恨的游戏&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;爱：&lt;ol&gt;
&lt;li&gt;这游戏UI和画质都做得非常精美，原画的细节做得非常逼真&lt;/li&gt;
&lt;li&gt;3分钟一场战斗，游戏时间设置的完美&lt;/li&gt;
&lt;li&gt;操作简单，容易上手&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;恨:&lt;ol&gt;
&lt;li&gt;3分钟一场战斗，导致你蹲个坑都可以玩几局，有时输能让你蹲出半个多小时，最后起来酸的不行&lt;/li&gt;
&lt;li&gt;部落战匹配规则做得不好，分段6K左右自己卡等只有10级，结果给你匹配满级的来对付你，你技术再好也是以卵击石&lt;/li&gt;
&lt;li&gt;商店不断推出活动引诱你充值，看到你要啥卡牌、是没有金币还是没有宝石，就给你推对应的活动&lt;/li&gt;
&lt;li&gt;影响与家人的关系，有时候连输好几把，家人跟我聊天，我说话很冲，导致跟对方吵起来&lt;/li&gt;
&lt;li&gt;不间断活动、每天对战，让你控制不住不玩，不停想上分，影响工作和学习&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="游戏" scheme="https://yanxuewen.cn/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
    <category term="皇室战争" scheme="https://yanxuewen.cn/tags/%E7%9A%87%E5%AE%A4%E6%88%98%E4%BA%89/"/>
    
  </entry>
  
  <entry>
    <title>C# 与 JS 之间Gzip互通</title>
    <link href="https://yanxuewen.cn/2022/11/13/JS/JS01/"/>
    <id>https://yanxuewen.cn/2022/11/13/JS/JS01/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>JS 压缩 Gzip demo</li><li>JS 压缩 Gzip + base64 demo</li><li>JS 解压 CSharp 的 Gzip demo</li><li>JS 解压 CSharp 的 base64 + gzip</li><li>CSharp 压缩 Gzip demo</li><li>CSharp 压缩 Gzip + base64 demo</li><li>CSharp 解压 JS 的 Gzip demo</li><li>CSharp 解压 JS 的 base64 + gzip</li><li>Base64 encode 和 decode </li></ul><h3 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h3><p><a href="https://github.com/aa4790139/GzipSample">https://github.com/aa4790139/GzipSample</a></p><span id="more"></span><h3 id="GZip-文件结构图"><a href="#GZip-文件结构图" class="headerlink" title="GZip 文件结构图"></a>GZip 文件结构图</h3><p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210115204550.jpg" alt=""></p><!--more--><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul><li><a href="https://stackabuse.com/encoding-and-decoding-base64-strings-in-node-js/">Encoding and Decoding Base64 Strings in Node.js</a></li><li><a href="https://zh.wikipedia.org/wiki/DEFLATE">DEFLATE</a></li><li><a href="https://stackoverflow.com/questions/246801/how-can-you-encode-a-string-to-base64-in-javascript">How can you encode a string to Base64 in JavaScript?</a></li><li><a href="https://stackoverflow.com/questions/3195865/converting-byte-array-to-string-in-javascript">Converting byte array to string in javascript</a></li><li><a href="https://www.jianshu.com/p/c5df0156b229">Array.prototype.slice.call()方法详解</a></li><li><a href="https://stackoverflow.com/questions/7056925/how-does-array-prototype-slice-call-work">how does Array.prototype.slice.call() work?</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators">JS按位操作符</a></li><li><a href="https://www.iditect.com/how-to/58717282.html">Remove trailing zeros from byte[]</a></li><li><a href="https://stackoverflow.com/questions/17191945/conversion-between-utf-8-arraybuffer-and-string">Conversion between UTF-8 ArrayBuffer and String</a></li><li><a href="https://tool.oschina.net/commons?type=4">ASCLL对照表</a></li><li><a href="https://blog.csdn.net/yc0188/article/details/4155168">GZIP文件格式简介</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JS 压缩 Gzip demo&lt;/li&gt;
&lt;li&gt;JS 压缩 Gzip + base64 demo&lt;/li&gt;
&lt;li&gt;JS 解压 CSharp 的 Gzip demo&lt;/li&gt;
&lt;li&gt;JS 解压 CSharp 的 base64 + gzip&lt;/li&gt;
&lt;li&gt;CSharp 压缩 Gzip demo&lt;/li&gt;
&lt;li&gt;CSharp 压缩 Gzip + base64 demo&lt;/li&gt;
&lt;li&gt;CSharp 解压 JS 的 Gzip demo&lt;/li&gt;
&lt;li&gt;CSharp 解压 JS 的 base64 + gzip&lt;/li&gt;
&lt;li&gt;Base64 encode 和 decode &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;源码地址：&quot;&gt;&lt;a href=&quot;#源码地址：&quot; class=&quot;headerlink&quot; title=&quot;源码地址：&quot;&gt;&lt;/a&gt;源码地址：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/aa4790139/GzipSample&quot;&gt;https://github.com/aa4790139/GzipSample&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="压缩" scheme="https://yanxuewen.cn/categories/%E5%8E%8B%E7%BC%A9/"/>
    
    
    <category term="C#" scheme="https://yanxuewen.cn/tags/C/"/>
    
    <category term="Gzip" scheme="https://yanxuewen.cn/tags/Gzip/"/>
    
    <category term="JS" scheme="https://yanxuewen.cn/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>对称加密和非对称加密的应用</title>
    <link href="https://yanxuewen.cn/2022/11/13/JS/JS02/"/>
    <id>https://yanxuewen.cn/2022/11/13/JS/JS02/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>什么是对称加密</li><li>对称加密demo</li><li>什么是非对称加密</li><li>非对称加密demo</li><li>对称加密与非对称加密组合使用</li><li>介绍一套可行的混合加密方案，怎么应用到接口数据加密中</li><li>Demo源码工程</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h3 id="什么是对称加密"><a href="#什么是对称加密" class="headerlink" title="什么是对称加密"></a>什么是对称加密</h3><ul><li>定义：<blockquote><p>对称密钥算法（英语：Symmetric-key algorithm）又称为对称加密、私钥加密、共享密钥加密，是密码学中的一类加密算法。这类算法在加密和解密时使用相同的密钥，或是使用两个可以简单地相互推算的密钥</p></blockquote></li><li>优点：<blockquote><p>算法公开、计算量小、加密速度快、加密效率高，适合对大量数据进行加密的场景。 比如 HLS（HTTP Live Streaming）普通加密场景中，一般会使用 AES-128 对称加密算法对 TS 切片进行加密，以保证多媒体资源安全</p></blockquote></li><li><p>缺点：</p><blockquote><p>安全性不高，只要拿到秘钥就可以把数据解开</p></blockquote></li><li><p>对称加密的过程：</p><blockquote><p>发送方使用密钥将明文数据加密成密文，然后发送出去，接收方收到密文后，使用同一个密钥将密文解密成明文读取<br>  <img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/QQ%E5%9B%BE%E7%89%8720201227142444.png" alt=""></p></blockquote></li><li><p>个人理解：</p><blockquote><p>对称加密就好比一把锁的钥匙，一个密码箱存了东西，如果你有钥匙就可以把密码箱里面的宝贝取走</p></blockquote></li></ul><hr><h3 id="对称加密demo"><a href="#对称加密demo" class="headerlink" title="对称加密demo"></a>对称加密demo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">this.key = CryptoJS.enc.Utf8.parse(&quot;0123456789abcdef&quot;);</span><br><span class="line">this.iv = CryptoJS.enc.Utf8.parse(&quot;abcdef0123456789&quot;);</span><br><span class="line">/**</span><br><span class="line">* AES 加密</span><br><span class="line">* @param iv</span><br><span class="line">* @param key</span><br><span class="line">* @param content 加密数据</span><br><span class="line">* @returns &#123;string&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__aesEncrypt(iv, key, content) &#123;</span><br><span class="line">    let text = CryptoJS.enc.Utf8.parse(JSON.stringify(content));</span><br><span class="line">    let encrypted = CryptoJS.AES.encrypt(text, key,</span><br><span class="line">        &#123;</span><br><span class="line">            iv: iv,</span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">        &#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* AES 解密</span><br><span class="line">* @param iv</span><br><span class="line">* @param key</span><br><span class="line">* @param content  解密数据</span><br><span class="line">* @returns &#123;string&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__aesDecrypt(iv, key, content) &#123;</span><br><span class="line">    let decrypt = CryptoJS.AES.decrypt(content, key, &#123;</span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">    &#125;);</span><br><span class="line">    let decryptText = decrypt.toString(CryptoJS.enc.Utf8);</span><br><span class="line">    return decryptText.replace(/\&quot;/g, &quot;&quot;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="什么是非对称加密"><a href="#什么是非对称加密" class="headerlink" title="什么是非对称加密"></a>什么是非对称加密</h3><ul><li><p>定义：</p><blockquote><p>非对称加密算法需要两个密钥：公开密钥（publickey：简称公钥）和私有密钥（privatekey：简称私钥）。公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。 因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法</p></blockquote></li><li><p>优点：</p><blockquote><p>安全性更高，公钥是公开的，私钥是自己保存的，不需要将私钥提供给别人</p></blockquote></li><li><p>缺点</p><blockquote><p>加解密速度慢，只适合应对小数据加解密</p></blockquote></li><li><p>对称加密的过程：<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/QQ%E6%88%AA%E5%9B%BE20201227142658.png" alt=""></p></li></ul><ul><li><p>个人理解</p><blockquote><p>非对称加密：公钥就好比未锁的密码箱，只能存东西进去然后锁住。秘钥就好比密码箱的钥匙，可以打开秘密箱然后把里面的宝贝取走</p></blockquote></li><li><p>非对称加密demo</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">this.rsaEncryptor = new JSEncrypt();</span><br><span class="line">this.rsaEncryptor.setPublicKey(this.rsa_pub_key);</span><br><span class="line">this.rsaDecryptor = new JSEncrypt();</span><br><span class="line">this.rsaDecryptor.setPrivateKey(this.rsa_pri_key);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* RSA 加密</span><br><span class="line">* @param content</span><br><span class="line">* @returns &#123;CipherParams|PromiseLike&lt;ArrayBuffer&gt;&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__rsaEncrypt(content) &#123;</span><br><span class="line">    return this.rsaEncryptor.encrypt(content);</span><br><span class="line">&#125;,</span><br><span class="line">/**</span><br><span class="line">* RSA 解密</span><br><span class="line">* @param content</span><br><span class="line">* @returns &#123;WordArray|PromiseLike&lt;ArrayBuffer&gt;&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__rsaDecrypt(content) &#123;</span><br><span class="line">    return this.rsaDecryptor.decrypt(content);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h3 id="对称加密与非对称加密组合使用"><a href="#对称加密与非对称加密组合使用" class="headerlink" title="对称加密与非对称加密组合使用"></a>对称加密与非对称加密组合使用</h3><blockquote><p>现在对称加密和非对称加密的缺点我们都知道了，那就结合对称加密和非对称加密的优点来个demo，思路：针对小数据对称加密的iv和key，采用非对称加密；针对大数据data采用对称加密。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 混合加密</span><br><span class="line">* @param iv</span><br><span class="line">* @param key</span><br><span class="line">* @param content</span><br><span class="line">* @returns &#123;&#123;data: string, iv: (CipherParams|PromiseLike&lt;ArrayBuffer&gt;), key: (CipherParams|PromiseLike&lt;ArrayBuffer&gt;)&#125;&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__hybirdEncrypt(iv, key, content) &#123;</span><br><span class="line">    const aesEncryptData = this.__aesEncrypt(iv, key, content);</span><br><span class="line">    const rsaEncryptIv = this.__rsaEncrypt(iv);</span><br><span class="line">    const rsaEncryptKey = this.__rsaEncrypt(key);</span><br><span class="line">    return &#123;</span><br><span class="line">        iv: rsaEncryptIv,</span><br><span class="line">        key: rsaEncryptKey,</span><br><span class="line">        data: aesEncryptData,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 混合解密</span><br><span class="line">* @param encryptInfo</span><br><span class="line">* @returns &#123;string&#125;</span><br><span class="line">* @private</span><br><span class="line">*/</span><br><span class="line">__hybirdDecrypt(encryptInfo) &#123;</span><br><span class="line">    const iv = this.rsaDecryptor.decrypt(encryptInfo.iv);</span><br><span class="line">    const key = this.rsaDecryptor.decrypt(encryptInfo.key);</span><br><span class="line">    const data = encryptInfo.data;</span><br><span class="line">    return this.__aesDecrypt(iv, key, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="介绍一套可行混合加密方案，怎么应用到接口数据加密中。流程图如下："><a href="#介绍一套可行混合加密方案，怎么应用到接口数据加密中。流程图如下：" class="headerlink" title="介绍一套可行混合加密方案，怎么应用到接口数据加密中。流程图如下："></a>介绍一套可行混合加密方案，怎么应用到接口数据加密中。流程图如下：</h3><ul><li>思路如下：<ul><li>第1步：创建一套RSA 公私钥，公钥前端拿着，私钥服务端拿着</li><li>第2步：前端为每一个网络请求生成RequestID</li><li>第3步：客户端生成AES Key，然后将RequestID 作为Key,AES Key 作为Value 存内存</li><li>第4步：客户端用生成的AES Key 加密请求数据Request Data，用RSA公钥对AES Key进行加密，同时把requestID、加密数据、加密AES Key 发送给服务端</li><li>第5步：服务端用RSA私钥解密被加密的AES Key，然后再用解开的AES Key 对RequestData数据进行解密</li><li>第6步：服务端用AES Key对响应数据ResposneData加密+RequestID、返回给前端</li><li>第7步：前端根据服务端返回的RequestID 取出内存的AES key, 用AES key 解密Resposne Data数据，用完后删除内存RequestID 的AES key 数据。</li><li>最后：前端每次发送请求都创建AES Key 去加密数据，收到服务端响应数据解密用完后，就删除掉内存中的AES Key数据，如此循环就用一套RSA公私钥解决混合加密问题</li></ul></li><li>流程图：<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86%E6%96%B9%E6%A1%88%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt=""></li></ul><hr><h3 id="Demo源码工程："><a href="#Demo源码工程：" class="headerlink" title="Demo源码工程："></a>Demo源码工程：</h3><ul><li>访问地址：<a href="https://github.com/aa4790139/encrypt_decrypt_sample">https://github.com/aa4790139/encrypt_decrypt_sample</a></li></ul><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><blockquote><p>由于对称加密DES安全性已不太强，所以就选择了替代品AES。非常感谢阿宝哥提供的<a href="https://mp.weixin.qq.com/s/i_Clg5kmTBwcFoSUNO-naQ">玩转混合加密</a>文章，讲得通俗易懂，让我受益匪浅。最后阿宝哥提到把AES key 存放内存容易让他人搞到AES Key。所以我就去了解Web如何防调试、代<br>码怎么混淆等，下一篇：<a href="https://yanxuewen.cn/2020/12/27/Web01/">Web如何防调试</a></p></blockquote><hr><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul><li><a href="https://mp.weixin.qq.com/s/i_Clg5kmTBwcFoSUNO-naQ">阿宝哥-玩转混合加密</a></li></ul><hr><h3 id="更多相关资料："><a href="#更多相关资料：" class="headerlink" title="更多相关资料："></a>更多相关资料：</h3><ul><li><a href="https://www.jianshu.com/p/c44a8a1b7c38">DES加密算法原理</a></li><li><a href="https://www.cxyxiaowu.com/1478.html">算法科普：神秘的 DES 加密算法</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;什么是对称加密&lt;/li&gt;
&lt;li&gt;对称加密demo&lt;/li&gt;
&lt;li&gt;什么是非对称加密&lt;/li&gt;
&lt;li&gt;非对称加密demo&lt;/li&gt;
&lt;li&gt;对称加密与非对称加密组合使用&lt;/li&gt;
&lt;li&gt;介绍一套可行的混合加密方案，怎么应用到接口数据加密中&lt;/li&gt;
&lt;li&gt;Demo源码工程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;</summary>
    
    
    
    <category term="加密" scheme="https://yanxuewen.cn/categories/%E5%8A%A0%E5%AF%86/"/>
    
    
    <category term="对称加密" scheme="https://yanxuewen.cn/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="非对称加密" scheme="https://yanxuewen.cn/tags/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="AES" scheme="https://yanxuewen.cn/tags/AES/"/>
    
    <category term="RSA" scheme="https://yanxuewen.cn/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>CORS-跨域实战</title>
    <link href="https://yanxuewen.cn/2022/11/13/JS/JS03/"/>
    <id>https://yanxuewen.cn/2022/11/13/JS/JS03/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>前端需要做什么?</li><li>后端需要怎么配置?</li></ul><blockquote><p>由于浏览器的同源安全策略，作为前端开发你使用API调用接口必定会碰到跨域问题，网上太多的文章，大部分都是讲得不太清楚，让你看得特别懵逼，让你可能会做出以下愚蠢行为：跨域配置写到前端的header中、Nginx 跨域配置到Web节点中、瞎填Access-Control-Allow-Headers中的值等等，会导致怎么配置都不对，令你自己发狂。经验提醒：不要急着瞎改瞎试，看完理论相关文章后再尝试，然后静下心来思考流程是怎么运转的，用这样的方式很快就会配对了。以下是我成功跨域配置，希望给你提供一点帮助。</p></blockquote><span id="more"></span><hr><h3 id="前端需要做什么"><a href="#前端需要做什么" class="headerlink" title="前端需要做什么?"></a>前端需要做什么?</h3><blockquote><p>请求时使用到的header字段梳理并告知后端<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210126175710.png" alt=""></p></blockquote><hr><h3 id="后端需要怎么配置"><a href="#后端需要怎么配置" class="headerlink" title="后端需要怎么配置?"></a>后端需要怎么配置?</h3><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><blockquote><p>注意：针对API 服务配置跨域，而不是Web服务</p><ul><li>疑问1：为啥要配置nginx,因为请求需要转换，所以需要配置</li><li>注意：Access-Control-Allow-Origin <em>，必须加在Nginx层，否则请求不会转换至api server 层，所以api server 层的Access-Control-Allow-Origin </em> 可以去掉，否则会报：<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210126211841.png" alt=""></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location /secret-http-api/ &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:3001/;</span><br><span class="line">            proxy_read_timeout 240s;</span><br><span class="line">            add_header Access-Control-Allow-Origin *;</span><br><span class="line">            add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">            add_header Access-Control-Allow-Headers &#x27;Content-Type,Authorization,Content-Encoding,Accept-Encoding&#x27;;</span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                return 204;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="API-Server-Nodejs"><a href="#API-Server-Nodejs" class="headerlink" title="API Server (Nodejs)"></a>API Server (Nodejs)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        app.use(function (req, res, next) &#123;</span><br><span class="line">    if (req.path !== &#x27;/&#x27; &amp;&amp; !req.path.includes(&#x27;.&#x27;)) &#123;</span><br><span class="line">        res.set(&#123;</span><br><span class="line">            /* 允许后端发送cookie*/</span><br><span class="line">            // &#x27;Access-Control-Allow-Credentials&#x27;: true,</span><br><span class="line">            /*任意域名都可以访问,或者基于我请求头里面的域*/</span><br><span class="line">            // &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27;,</span><br><span class="line">            /*允许请求头字段*/</span><br><span class="line">            // &#x27;Access-Control-Allow-Headers&#x27;: &#x27;Accept,Content-Encoding,Content-Type,Accept-Encoding&#x27;,</span><br><span class="line">            /*允许请求方式*/</span><br><span class="line">            &#x27;Access-Control-Allow-Methods&#x27;: &#x27;POST,GET,OPTIONS&#x27;,</span><br><span class="line">            /*预检成功后相同请求无需预检的有效时间(单位：秒)*/</span><br><span class="line">            &#x27;Access-Control-Max-Age&#x27;: 3600,</span><br><span class="line">            /*默认与允许的文本格式json和编码格式*/</span><br><span class="line">            &#x27;Content-Type&#x27;: &#x27;text/plain; charset=utf-8&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    req.method === &#x27;OPTIONS&#x27; ? res.status(204).end() : next()</span><br><span class="line">&#125;);     </span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E9%9C%80%E8%A6%81_cors_%EF%BC%9F">跨源资源共享</a></li><li><a href="https://segmentfault.com/a/1190000022512695">Node设置cors,后端解决跨域问题</a></li><li><a href="https://segmentfault.com/a/1190000009971254">cors跨域之简单请求与预检请求（发送请求头带令牌token）</a></li><li><a href="https://blog.yiguochen.com/options-cors.html">OPTIONS 方法在跨域请求（CORS）中的应用</a></li><li><a href="https://segmentfault.com/a/1190000012550346">Nginx配置跨域请求 Access-Control-Allow-Origin *</a></li></ul><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前端需要做什么?&lt;/li&gt;
&lt;li&gt;后端需要怎么配置?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于浏览器的同源安全策略，作为前端开发你使用API调用接口必定会碰到跨域问题，网上太多的文章，大部分都是讲得不太清楚，让你看得特别懵逼，让你可能会做出以下愚蠢行为：跨域配置写到前端的header中、Nginx 跨域配置到Web节点中、瞎填Access-Control-Allow-Headers中的值等等，会导致怎么配置都不对，令你自己发狂。经验提醒：不要急着瞎改瞎试，看完理论相关文章后再尝试，然后静下心来思考流程是怎么运转的，用这样的方式很快就会配对了。以下是我成功跨域配置，希望给你提供一点帮助。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="部署" scheme="https://yanxuewen.cn/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Web" scheme="https://yanxuewen.cn/tags/Web/"/>
    
    <category term="Vue.js" scheme="https://yanxuewen.cn/tags/Vue-js/"/>
    
    <category term="Node.js" scheme="https://yanxuewen.cn/tags/Node-js/"/>
    
    <category term="Express" scheme="https://yanxuewen.cn/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>JS基础-01：原型了解</title>
    <link href="https://yanxuewen.cn/2022/11/13/JS/JS_Base_01/"/>
    <id>https://yanxuewen.cn/2022/11/13/JS/JS_Base_01/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul><li>原型</li><li>总结</li></ul><hr><blockquote><p>在接触JS之前，我工作过程中基本都是采用Java、C#、C++开发，也就是面向对象编程，对于类、继承都很熟悉，所以在构建数据结构的时候，就会下意识的采用类来定义结构，而使用JS开发的时候，创建可以通过new 方法名来创建对象，定义属性和方法放到不同位置，会出现属于类的、属于实例的还是属于原型的？这让我搞得很懵逼，面向对象结构都定义在类上，没有这么复杂，为了搞清这些概念决定仔细学习一下。</p></blockquote><span id="more"></span><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><hr><ul><li><p>示例代码</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试关系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p1.constructor === Parent:&quot;</span> + (p1.<span class="property">constructor</span> === <span class="title class_">Parent</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parent.constructor === Function:&quot;</span> + (<span class="title class_">Parent</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Function.constructor === Function:&quot;</span> + (<span class="title class_">Function</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parent.__proto__ === Function.prototype:&quot;</span> + (<span class="title class_">Parent</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parent.prototype.constructor === Parent:&quot;</span> + (<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Parent</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p1.__proto__ === Parent.prototype:&quot;</span> + (p1.<span class="property">__proto__</span> === <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Parent.prototype.__proto__ === Object.prototype:&quot;</span> + (<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.prototype.__proto__:&quot;</span> + (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>));<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.prototype.constructor === Object:&quot;</span> + (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Object</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.constructor === Function:&quot;</span> + (<span class="title class_">Object</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.prototype === Object.prototype:&quot;</span> + (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.__proto__ === Function.prototype:&quot;</span> + (<span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Function.__proto__ === Function.prototype:&quot;</span> + (<span class="title class_">Function</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Function.prototype === Function.prototype:&quot;</span> + (<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Function.prototype.__proto__ === Object.prototype:&quot;</span> + (<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>));<span class="comment">//ture</span></span><br></pre></td></tr></table></figure><blockquote><p>更多测试示例：<a href="https://github.com/yxw007/H5-Learn/blob/master/js/02_Proto.js">https://github.com/yxw007/H5-Learn/blob/master/js/02_Proto.js</a></p></blockquote></li><li><p>图解关系：根据以上测试用例，得出一下关系图</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211107203334.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211107203334.png"></p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211105224752.jpg" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20211105224752.jpg"></p></li></ul><ul><li>规则：<ul><li><strong><strong>proto</strong>、constructor 属性 是【对象】独有的</strong></li><li><strong>prototype 属性 是【函数】独有的</strong></li><li><strong>函数也是一种对象，所以也具有<strong>proto</strong>、constructor 属性</strong></li></ul></li></ul><h2 id="总结：数据结构定义"><a href="#总结：数据结构定义" class="headerlink" title="总结：数据结构定义"></a>总结：数据结构定义</h2><ul><li><p>实例属性：在构造方法中定义，通常用【this.名称 = 初始值】定义</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="comment">//方式1：推荐方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//补充</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">material=<span class="string">&quot;材质&quot;</span>,  <span class="comment">// 说明：此种方式定义的属性material 也属于实例上的</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>原型属性和方法：</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">live</span>= <span class="string">&quot;地球&quot;</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">move</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="title function_">move</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">live</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;地球&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">- 类上的属性和方法</span><br><span class="line">    </span><br><span class="line">    ```jsx</span><br><span class="line">    class Animal &#123;</span><br><span class="line">    //类上的属性和方法</span><br><span class="line">        static material = &quot;材质&quot;</span><br><span class="line">        static sex()&#123;</span><br><span class="line">            return &quot;未知&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p>启发：JS 是一门动态语言，了解到原型链概念，属性和方法如果自身没有就去原型上找，如果原型上面没有就依次往上找，直到找到或者找不到。如果模块继承关系套很多层，就会产生性能问题。由此就知道为了性能，为什么前端业界大佬，都不使用面向对象编程而采用函数式编程（案例：vue2.x 的vue还采用class new出实例，vue3.x 就都采用常用函数式编程了）</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes">对象原型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a></li><li><strong><a href="https://segmentfault.com/a/1190000021232132">一张图搞定JS原型&amp;原型链</a></strong></li></ul><blockquote><p>以上：如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原型&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在接触JS之前，我工作过程中基本都是采用Java、C#、C++开发，也就是面向对象编程，对于类、继承都很熟悉，所以在构建数据结构的时候，就会下意识的采用类来定义结构，而使用JS开发的时候，创建可以通过new 方法名来创建对象，定义属性和方法放到不同位置，会出现属于类的、属于实例的还是属于原型的？这让我搞得很懵逼，面向对象结构都定义在类上，没有这么复杂，为了搞清这些概念决定仔细学习一下。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS基础" scheme="https://yanxuewen.cn/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="js" scheme="https://yanxuewen.cn/tags/js/"/>
    
    <category term="原型" scheme="https://yanxuewen.cn/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS基础-02：继承</title>
    <link href="https://yanxuewen.cn/2022/11/13/JS/JS_Base_02/"/>
    <id>https://yanxuewen.cn/2022/11/13/JS/JS_Base_02/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>常用继承方式<ul><li>方式一：调整类型原型的 <strong>proto</strong> 、 Object.setPrototypeOf 、Object.create</li><li>方法二：利用自定义createObject</li><li>方式三：利用ES6 Class extends</li></ul></li><li>总结</li></ul><span id="more"></span><h2 id="常用继承方式"><a href="#常用继承方式" class="headerlink" title="常用继承方式"></a>常用继承方式</h2><hr><h3 id="方式一：调整类型原型的proto-、-Object-setPrototypeOf-、Object-create"><a href="#方式一：调整类型原型的proto-、-Object-setPrototypeOf-、Object-create" class="headerlink" title="方式一：调整类型原型的proto 、 Object.setPrototypeOf 、Object.create"></a>方式一：调整类型原型的<strong>proto</strong> 、 Object.setPrototypeOf 、Object.create</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">address</span> = &#123;<span class="attr">location</span>:<span class="string">&quot;山里&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Tiger</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">        <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Tiger</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>; </span><br><span class="line">    <span class="comment">// 等同 es7 方法：Object.setPrototypeOf(Tiger.prototype,Animal.prototype);</span></span><br><span class="line"><span class="comment">// or Tiger.prototype = Object.create(Animal.prototype);</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Tiger</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;说话&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tiger = <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类实例属性：<span class="subst">$&#123;tiger.arr&#125;</span>`</span>);<span class="comment">//父类实例属性：1,2,3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类原型属性：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(tiger.address)&#125;</span>`</span>);<span class="comment">//父类原型属性：&#123;&quot;location&quot;:&quot;山里&quot;&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类实例属性：<span class="subst">$&#123;tiger.age&#125;</span>`</span>);<span class="comment">//子类实例属性：10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类原型属性：<span class="subst">$&#123;tiger.say()&#125;</span>`</span>);<span class="comment">//子类原型属性：说话</span></span><br></pre></td></tr></table></figure><h3 id="方法二：利用自定义createObject"><a href="#方法二：利用自定义createObject" class="headerlink" title="方法二：利用自定义createObject"></a>方法二：利用自定义createObject</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">address</span> = &#123;<span class="attr">location</span>:<span class="string">&quot;山里&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Tiger</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">        <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createObject</span>(<span class="params">parentPrototype</span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = parentPrototype;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Tiger</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title function_">createObject</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    <span class="title class_">Tiger</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;说话&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tiger = <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类实例属性：<span class="subst">$&#123;tiger.arr&#125;</span>`</span>);<span class="comment">//父类实例属性：1,2,3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类原型属性：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(tiger.address)&#125;</span>`</span>);<span class="comment">//父类原型属性：&#123;&quot;location&quot;:&quot;山里&quot;&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类实例属性：<span class="subst">$&#123;tiger.age&#125;</span>`</span>);<span class="comment">//子类实例属性：10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类原型属性：<span class="subst">$&#123;tiger.say()&#125;</span>`</span>);<span class="comment">//子类原型属性：说话</span></span><br></pre></td></tr></table></figure><h3 id="方式三：利用ES6-Class-extends"><a href="#方式三：利用ES6-Class-extends" class="headerlink" title="方式三：利用ES6 Class extends"></a>方式三：利用ES6 Class extends</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        address = &#123;<span class="attr">location</span>:<span class="string">&quot;山里&quot;</span>&#125;;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">           <span class="variable language_">super</span>(name);</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;说话&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tiger = <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类实例属性：<span class="subst">$&#123;tiger.arr&#125;</span>`</span>);<span class="comment">//父类实例属性：1,2,3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类原型属性：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(tiger.address)&#125;</span>`</span>);<span class="comment">//父类原型属性：&#123;&quot;location&quot;:&quot;山里&quot;&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类实例属性：<span class="subst">$&#123;tiger.age&#125;</span>`</span>);<span class="comment">//子类实例属性：10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类原型属性：<span class="subst">$&#123;tiger.say()&#125;</span>`</span>);<span class="comment">//子类原型属性：说话</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>推荐使用es6的class来进行继承（注意：继承链不宜过长，否则会导致性能问题。更多细节：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a>）</li><li>不推荐通过改变类型原型的<strong>proto</strong>指向的方式（兼容性不好，而且将 <code>__proto__</code> 设置为非对象的值会静默失败，不会抛出错误。更多细节：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a>）</li></ul><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a></li></ul><blockquote><p>以上：如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;常用继承方式&lt;ul&gt;
&lt;li&gt;方式一：调整类型原型的 &lt;strong&gt;proto&lt;/strong&gt; 、 Object.setPrototypeOf 、Object.create&lt;/li&gt;
&lt;li&gt;方法二：利用自定义createObject&lt;/li&gt;
&lt;li&gt;方式三：利用ES6 Class extends&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JS基础" scheme="https://yanxuewen.cn/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="继承" scheme="https://yanxuewen.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>屏蔽：键盘按键、鼠标点击事件</title>
    <link href="https://yanxuewen.cn/2022/11/13/JS/PreventEvent/"/>
    <id>https://yanxuewen.cn/2022/11/13/JS/PreventEvent/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>屏蔽-键盘按键</li><li>屏蔽-鼠标点击</li><li>屏蔽-BackSpace</li></ul><span id="more"></span><h3 id="屏蔽-键盘按键"><a href="#屏蔽-键盘按键" class="headerlink" title="屏蔽-键盘按键"></a>屏蔽-键盘按键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//添加按键监听</span><br><span class="line">window.addEventListener(&#x27;keydown&#x27;, this.onKeyDown,true);</span><br><span class="line"></span><br><span class="line">//移除按键监听</span><br><span class="line">window.removeEventListener(&quot;keydown&quot;,this.onKeyDown,true);</span><br><span class="line"></span><br><span class="line">onKeyDown(val)&#123;</span><br><span class="line">    console.log(&#x27;按下&#x27; + val.key);</span><br><span class="line">    val.preventDefault();</span><br><span class="line">    val.stopPropagation();</span><br><span class="line">    val.cancelBubble = true;</span><br><span class="line">    window.event.returnValue = false;</span><br><span class="line">    window.event.preventDefault();</span><br><span class="line">    window.event.stopPropagation();</span><br><span class="line">    window.event.cancelBubble = true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏蔽-鼠标点击"><a href="#屏蔽-鼠标点击" class="headerlink" title="屏蔽-鼠标点击"></a>屏蔽-鼠标点击</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//添加鼠标点击监听</span><br><span class="line">window.addEventListener(&#x27;mousedown&#x27;,this.onClick,true);</span><br><span class="line"></span><br><span class="line">//移除鼠标点击监听</span><br><span class="line">window.removeEventListener(&#x27;mousedown&#x27;,this.onClick,true);</span><br><span class="line"></span><br><span class="line">//which: 1-左键 2-中键 3-右键</span><br><span class="line">onClick(val)&#123;</span><br><span class="line">    console.error(&#x27;点击&#x27; + val.which);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏蔽-BackSpace"><a href="#屏蔽-BackSpace" class="headerlink" title="屏蔽-BackSpace"></a>屏蔽-BackSpace</h3><p>在IE页面跳转过程中，按BackSpace退格键默认返回上此浏览页，导致路由中断引起(Vue)页面卡死，所以需要在IE中屏蔽掉BackSpce退格键，但是在输入框中则不屏蔽。</p><ul><li>preventBackSpce.js： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">export const banBackSpace = (e) =&gt; &#123;</span><br><span class="line">  let ev = e || window.event</span><br><span class="line">  // 各种浏览器下获取事件对象</span><br><span class="line">  let obj = ev.relatedTarget || ev.srcElement || ev.target || ev.currentTarget</span><br><span class="line">  // 按下Backspace键</span><br><span class="line">  if (ev.keyCode === 8) &#123;</span><br><span class="line">    // 标签名称</span><br><span class="line">    let tagName = obj.nodeName.toLowerCase();</span><br><span class="line">    // 如果标签不是input或者textarea则阻止Backspace</span><br><span class="line">    if (tagName !== &#x27;input&#x27; &amp;&amp; tagName !== &#x27;textarea&#x27;) &#123;</span><br><span class="line">      return stopIt(ev)</span><br><span class="line">    &#125;</span><br><span class="line">    let tagType = obj.type.toLowerCase() // 标签类型</span><br><span class="line">    // input标签除了下面几种类型，全部阻止Backspace</span><br><span class="line">    if (tagName === &#x27;input&#x27; &amp;&amp; (tagType !== &#x27;text&#x27; &amp;&amp; tagType !== &#x27;textarea&#x27; &amp;&amp; tagType !== &#x27;password&#x27;)) &#123;</span><br><span class="line">      return stopIt(ev)</span><br><span class="line">    &#125;</span><br><span class="line">    // input或者textarea输入框如果不可编辑则阻止Backspace</span><br><span class="line">    if ((tagName === &#x27;input&#x27; || tagName === &#x27;textarea&#x27;) &amp;&amp; (obj.readOnly === true || obj.disabled === true)) &#123;</span><br><span class="line">      return stopIt(ev)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stopIt(ev) &#123;</span><br><span class="line">  if (ev.preventDefault) &#123;</span><br><span class="line">    // preventDefault()方法阻止元素发生默认的行为</span><br><span class="line">    ev.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">  if (ev.returnValue) &#123;</span><br><span class="line">    // IE浏览器下用window.event.returnValue = false;实现阻止元素发生默认的行为</span><br><span class="line">  &#125;</span><br><span class="line">  return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用方法：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 在需要使用的Vue页面引入组件(一般在main.vue中添加)</span><br><span class="line">import &#123;banBackSpace&#125; from &quot;@/util/preventBackspace&quot;;</span><br><span class="line"></span><br><span class="line">2. mounted 钩子函数挂载事件</span><br><span class="line">document.onkeypress = banBackSpace;</span><br><span class="line">document.onkeydown = banBackSpace;</span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;屏蔽-键盘按键&lt;/li&gt;
&lt;li&gt;屏蔽-鼠标点击&lt;/li&gt;
&lt;li&gt;屏蔽-BackSpace&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="H5" scheme="https://yanxuewen.cn/categories/H5/"/>
    
    
    <category term="事件屏蔽" scheme="https://yanxuewen.cn/tags/%E4%BA%8B%E4%BB%B6%E5%B1%8F%E8%94%BD/"/>
    
  </entry>
  
  <entry>
    <title>响应式根基：Object.defineProperty 与 Proxy 拦截区别</title>
    <link href="https://yanxuewen.cn/2022/11/13/JS/principle-learn-01/"/>
    <id>https://yanxuewen.cn/2022/11/13/JS/principle-learn-01/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h2><ul><li>Object.defineProperty 拦截测试</li><li>Proxy 拦截测试</li><li>总结</li></ul><hr><blockquote><p>假如你熟悉Vue，同时好奇心比较强，你肯定会想知道Vue是如何实现响应式的，要了解响应式原理就需要我们了解Object.defineProperty 和 Proxy 这两个API。针对这两个API编写对应的测试例子看看情况如何。</p></blockquote><span id="more"></span><h2 id="Object-defineProperty-拦截测试"><a href="#Object-defineProperty-拦截测试" class="headerlink" title="Object.defineProperty 拦截测试"></a>Object.defineProperty 拦截测试</h2><hr><h3 id="公共代码"><a href="#公共代码" class="headerlink" title="公共代码"></a>公共代码</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hero = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;赵云&#x27;</span>,</span><br><span class="line">        <span class="attr">hp</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">sp</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">equipment</span>: [<span class="string">&#x27;马&#x27;</span>, <span class="string">&#x27;长枪&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(hero).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> internalValue = hero[key]</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(hero, key, &#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting key &quot;<span class="subst">$&#123;key&#125;</span>&quot;: <span class="subst">$&#123;internalValue&#125;</span>`</span>)</span><br><span class="line">                <span class="keyword">return</span> internalValue</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setting key &quot;<span class="subst">$&#123;key&#125;</span>&quot;: <span class="subst">$&#123;internalValue&#125;</span> -&gt; <span class="subst">$&#123;newValue&#125;</span>`</span>)</span><br><span class="line">                internalValue = newValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="测试1：修改对象-string类型字段，拦截测试"><a href="#测试1：修改对象-string类型字段，拦截测试" class="headerlink" title="测试1：修改对象-string类型字段，拦截测试"></a>测试1：修改对象-string类型字段，拦截测试</h3><ul><li><p>code：</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-string类型字段，拦截测试------&quot;</span>);</span><br><span class="line">hero.<span class="property">name</span> = <span class="string">&quot;吕布&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果：<span class="subst">$&#123;hero.name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出结果：</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717175153.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717175153.png"></p></li><li><p>结论：<strong>对象-普通字段修改，可以被get set拦截</strong></p></li></ul><h3 id="测试2：修改对象-数组类型字段，新增元素，拦截测试"><a href="#测试2：修改对象-数组类型字段，新增元素，拦截测试" class="headerlink" title="测试2：修改对象-数组类型字段，新增元素，拦截测试"></a>测试2：修改对象-数组类型字段，新增元素，拦截测试</h3><ul><li><p>code：</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-数组类型字段，新增元素，拦截测试------&quot;</span>);</span><br><span class="line">hero.<span class="property">equipment</span>.<span class="title function_">push</span>(<span class="string">&quot;盔甲&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;hero.equipment&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出结果：</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181404.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181404.png"></p></li><li><p>结论：<strong>对象-数组字段新增元素,可以被get拦截，无法被set拦截</strong></p></li></ul><h3 id="测试3：修改对象-添加字段，拦截测试"><a href="#测试3：修改对象-添加字段，拦截测试" class="headerlink" title="测试3：修改对象-添加字段，拦截测试"></a>测试3：修改对象-添加字段，拦截测试</h3><ul><li><p>code</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-添加字段，拦截测试------&quot;</span>);</span><br><span class="line">hero.<span class="property">age</span> = <span class="number">23</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;hero.age&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181932.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717181932.png"></p></li><li><p>结论：<strong>对象-添加字段,无法被get set拦截</strong></p></li></ul><h3 id="测试4：修改对象-删除字段，拦截测试"><a href="#测试4：修改对象-删除字段，拦截测试" class="headerlink" title="测试4：修改对象-删除字段，拦截测试"></a>测试4：修改对象-删除字段，拦截测试</h3><ul><li><p>code</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-删除字段，拦截测试------&quot;</span>);</span><br><span class="line"><span class="keyword">delete</span> hero.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;hero.name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717182115.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717182115.png"></p></li><li><p>结论</p></li></ul><h3 id="测试5：修改数组类型字段，新增元素，拦截测试"><a href="#测试5：修改数组类型字段，新增元素，拦截测试" class="headerlink" title="测试5：修改数组类型字段，新增元素，拦截测试"></a>测试5：修改数组类型字段，新增元素，拦截测试</h3><ul><li><p>code</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(hero.<span class="property">equipment</span>, <span class="string">&#x27;push&#x27;</span>, &#123;</span><br><span class="line">        <span class="title function_">value</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`value <span class="subst">$&#123;<span class="variable language_">this</span>&#125;</span> -  <span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>]&#125;</span>`</span>)</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">length</span>] = <span class="variable language_">arguments</span>[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;---------------第二部分：对象-数组value拦截测试-----------------------&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：数组类型字段，新增元素，拦截测试------&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前 equipment： <span class="subst">$&#123;hero.equipment&#125;</span>`</span>);</span><br><span class="line">hero.<span class="property">equipment</span>.<span class="title function_">push</span>(<span class="string">&quot;盔甲&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新增[盔甲]后 equipment： <span class="subst">$&#123;hero.equipment&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185253.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185253.png"></p></li><li><p>结论：<strong>可以利用value 拦截到对象-数组字段元素删减</strong></p></li></ul><h2 id="Proxy拦截测试"><a href="#Proxy拦截测试" class="headerlink" title="Proxy拦截测试"></a>Proxy拦截测试</h2><hr><h3 id="公共代码："><a href="#公共代码：" class="headerlink" title="公共代码："></a>公共代码：</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hero = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;赵云&#x27;</span>,</span><br><span class="line">        <span class="attr">hp</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">sp</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">equipment</span>: [<span class="string">&#x27;马&#x27;</span>, <span class="string">&#x27;长枪&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting key &quot;<span class="subst">$&#123;key&#125;</span>&quot;: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> oldValue = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line">        <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setting key &quot;<span class="subst">$&#123;key&#125;</span>&quot;: <span class="subst">$&#123;oldValue&#125;</span> -&gt; <span class="subst">$&#123;value&#125;</span>  result:<span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> heroProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(hero, handler);</span><br></pre></td></tr></table></figure><h3 id="测试1：修改对象string类型字段，拦截测试"><a href="#测试1：修改对象string类型字段，拦截测试" class="headerlink" title="测试1：修改对象string类型字段，拦截测试"></a>测试1：修改对象string类型字段，拦截测试</h3><ul><li><p>code</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象string类型字段，拦截测试------&quot;</span>);</span><br><span class="line">heroProxy.<span class="property">name</span> = <span class="string">&quot;吕布&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果：<span class="subst">$&#123;heroProxy.name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184434.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184434.png"></p></li><li><p>结论：<strong>对象-普通字段修改，可以被get set拦截</strong></p></li></ul><h3 id="测试2：修改对象数组类型字段，新增元素，拦截测试"><a href="#测试2：修改对象数组类型字段，新增元素，拦截测试" class="headerlink" title="测试2：修改对象数组类型字段，新增元素，拦截测试"></a>测试2：修改对象数组类型字段，新增元素，拦截测试</h3><ul><li><p>code</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象数组类型字段，新增元素，拦截测试------&quot;</span>);</span><br><span class="line">heroProxy.<span class="property">equipment</span>.<span class="title function_">push</span>(<span class="string">&quot;盔甲&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;heroProxy.equipment&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184544.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184544.png"></p></li><li><p>结论：<strong>对象-数组字段新增元素,可以被get拦截，无法被set拦截</strong></p></li></ul><h3 id="测试3：修改对象-添加字段，拦截测试-1"><a href="#测试3：修改对象-添加字段，拦截测试-1" class="headerlink" title="测试3：修改对象-添加字段，拦截测试"></a>测试3：修改对象-添加字段，拦截测试</h3><ul><li><p>code</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-添加字段，拦截测试------&quot;</span>);</span><br><span class="line">heroProxy.<span class="property">age</span> = <span class="number">23</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;heroProxy.age&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184736.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717184736.png"></p></li><li><p>结论：<strong>对象-添加字段,可以被set拦截</strong></p></li></ul><h3 id="测试4：修改对象-删除字段，拦截测试-1"><a href="#测试4：修改对象-删除字段，拦截测试-1" class="headerlink" title="测试4：修改对象-删除字段，拦截测试"></a>测试4：修改对象-删除字段，拦截测试</h3><ul><li><p>code</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象-删除字段，拦截测试------&quot;</span>);</span><br><span class="line"><span class="keyword">delete</span> heroProxy.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更改后结果： <span class="subst">$&#123;heroProxy.name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185008.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185008.png"></p></li><li><p>结论：<strong>对象-删除字段,可以被get拦截</strong></p></li></ul><h3 id="测试5：修改：对象数组类型字段"><a href="#测试5：修改：对象数组类型字段" class="headerlink" title="测试5：修改：对象数组类型字段"></a>测试5：修改：对象数组类型字段</h3><ul><li><p>code</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> heroProxyArray = <span class="keyword">new</span> <span class="title class_">Proxy</span>(hero.<span class="property">equipment</span>, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------修改：对象数组类型字段，新增元素，拦截测试------&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前 equipment：`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heroProxyArray);</span><br><span class="line"></span><br><span class="line">heroProxyArray.<span class="title function_">push</span>(<span class="string">&quot;匕首&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新增[匕首]后 equipment：`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heroProxyArray);</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185209.png" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210717185209.png"></p></li><li><p>结论：<strong>利用proxy 即可轻松拦截数组变化</strong></p></li></ul><hr><blockquote><p>demo 源码：<a href="https://github.com/yxw007/vue-principle-learn/tree/master/Proxy%26Reflect">vue-principle-learn</a><br>后续我会把vue原理相关的学习资料和demo都会更新到此仓库，欢迎star收藏~</p></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>Object.defineProperty<ul><li>缺点1：只能遍历对象已存在的属性，进行get set拦截，无法针对新增、删除元素进行拦截</li><li>缺点2：针对array 拦截，需要拦截push、shift、pop、unshift等，拦截操作复杂</li></ul></li><li>Proxy<ul><li>优势1：新增、删减字段都能轻松拦截</li><li>优势2：针对array 拦截，跟object 属性get set一样拦截，无需特殊处理</li></ul></li></ul><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/60126477">深入实践 ES6 Proxy &amp; Reflect</a></li><li><a href="https://stackoverflow.com/questions/5100376/how-to-watch-for-array-changes">how-to-watch-for-array-changes</a></li></ul><blockquote><p>以上：如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Object.defineProperty 拦截测试&lt;/li&gt;
&lt;li&gt;Proxy 拦截测试&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;假如你熟悉Vue，同时好奇心比较强，你肯定会想知道Vue是如何实现响应式的，要了解响应式原理就需要我们了解Object.defineProperty 和 Proxy 这两个API。针对这两个API编写对应的测试例子看看情况如何。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="响应式原理" scheme="https://yanxuewen.cn/categories/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="Object.defineProperty" scheme="https://yanxuewen.cn/tags/Object-defineProperty/"/>
    
    <category term="Proxy" scheme="https://yanxuewen.cn/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>响应式核心原理</title>
    <link href="https://yanxuewen.cn/2022/11/13/JS/principle-learn-02/"/>
    <id>https://yanxuewen.cn/2022/11/13/JS/principle-learn-02/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>核心原理：流转图</li><li>流转步骤：讲解&amp;疑问解答</li></ul><hr><blockquote><p>由于Vue3 Reactive源码涉及的代码较多，给初学者学习带来一定的门槛，所以尤大讲解的最核心的响应式demo来讲解响应式核心原理实现</p></blockquote><span id="more"></span><h2 id="核心原理-流转图"><a href="#核心原理-流转图" class="headerlink" title="核心原理-流转图"></a>核心原理-流转图</h2><hr><p><img data-src="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210726223603.jpg" alt="https://cdn.jsdelivr.net/gh/yxw007/BlogPicBed@master/img/20210726223603.jpg"></p><h3 id="流转步骤讲解"><a href="#流转步骤讲解" class="headerlink" title="流转步骤讲解"></a>流转步骤讲解</h3><ul><li>第1步：利用Proxy 封装代理响应式对象</li><li>第2步：巧妙利用Javascript是单线程执行特性，用watchEffect包装一层调用，让activeUpdate暂存匿名函数。</li><li>第3步：执行匿名函数，让匿名函数访问到的对象属性，触发对象的get 拦截</li><li>第4、5、6步：get拦截到的属性访问，创建依赖跟踪对象dep，然后利用dep搜集依赖匿名函数</li><li>第7、8步：set拦截到属性设置，获取属性对应的依赖对象dep，然后调用之前搜集的依赖匿名函数</li></ul><hr><h3 id="疑问解答："><a href="#疑问解答：" class="headerlink" title="疑问解答："></a>疑问解答：</h3><ul><li>为啥要用proxy拦截? ( 请阅读：<a href="https://yanxuewen.cn/2021/07/17/principle-learn-01/">响应式根基：Object.defineProperty 与 Proxy 拦截区别</a> )</li><li>为啥要用WeakMap？<ul><li>原因：可被垃圾回收器自动回收，而Map不会被垃圾回收器自动回收，需要手动清理。否则会造成内存泄漏</li></ul></li><li>为啥要用Reflect获取对象属性和设置对象属性？<ul><li>原因1：保证不管存不存在原型链继承，都能保存操作正确。</li><li>原因2：语义更明确，避免异常抛出等</li></ul></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>watchEffect : 暂存当前匿名函数</li><li>proxy：对象访问拦截</li><li>dep：依赖收集</li></ul><blockquote><p>demo 源码：<a href="https://github.com/yxw007/vue-principle-learn/blob/master/vue-3-min/reactivity/reactivity.html">vue-principle-learn</a></p><p>为了方便记牢响应式原理，记住这3个角色便于以后快速回忆起响应式原理。</p></blockquote><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.bilibili.com/video/BV1rC4y187Vw">【课程】Vue 3 Deep Dive with Evan You 【中英字幕】- Vue Mastery</a></li></ul><blockquote><p>以上：如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;核心原理：流转图&lt;/li&gt;
&lt;li&gt;流转步骤：讲解&amp;amp;疑问解答&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;由于Vue3 Reactive源码涉及的代码较多，给初学者学习带来一定的门槛，所以尤大讲解的最核心的响应式demo来讲解响应式核心原理实现&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="响应式原理" scheme="https://yanxuewen.cn/categories/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="Proxy" scheme="https://yanxuewen.cn/tags/Proxy/"/>
    
    <category term="watchEffect" scheme="https://yanxuewen.cn/tags/watchEffect/"/>
    
    <category term="dep" scheme="https://yanxuewen.cn/tags/dep/"/>
    
    <category term="Reflect" scheme="https://yanxuewen.cn/tags/Reflect/"/>
    
  </entry>
  
  <entry>
    <title>创建通用JS公共模块并发布至npm</title>
    <link href="https://yanxuewen.cn/2022/11/13/Library/Web04/"/>
    <id>https://yanxuewen.cn/2022/11/13/Library/Web04/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>创建：JS公共模块</li><li>打包：使用rollup 打包公共模块</li><li>发布：js公共模块至verdaccio平台</li><li>发布：js公共模块至npm平台</li></ul><span id="more"></span><hr><h3 id="如何创建JS公共模块"><a href="#如何创建JS公共模块" class="headerlink" title="如何创建JS公共模块"></a>如何创建JS公共模块</h3><blockquote><p>由于代码有点多就不贴代码了，直接去代码仓库看吧  <a href="https://github.com/aa4790139/JSCommonUtils">传输门</a></p></blockquote><hr><h3 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h3><ul><li>简介：<blockquote><p>Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。</p></blockquote></li><li>使用起因：<blockquote><p>公共相关的js文件想弄成单独的一个模块，方便后续开发使用，而不是不停的copy 和paste，所以就去了解怎么样把js公共相关js 打包成一个模块。</p></blockquote></li><li>安装  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -g rollup</span><br></pre></td></tr></table></figure></li><li>创建配置文件  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// rollup.config.js</span><br><span class="line">import json from &#x27;rollup-plugin-json&#x27;;</span><br><span class="line">import babel from &#x27;rollup-plugin-babel&#x27;;</span><br><span class="line">import &#123;uglify&#125; from &#x27;rollup-plugin-uglify&#x27;;</span><br><span class="line">import &#123;version&#125; from &#x27;../package.json&#x27;;</span><br><span class="line">import multiEntry from &quot;rollup-plugin-multi-entry&quot;;</span><br><span class="line">import &#123;terser&#125; from &quot;rollup-plugin-terser&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    input: &#x27;src/*.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        /*输出公共库路径*/</span><br><span class="line">        file: &#x27;lib/index.js&#x27;,</span><br><span class="line">        /*配置：UMD 通用定义模块，支持前端端跨平台模块化*/</span><br><span class="line">        format: &#x27;umd&#x27;,</span><br><span class="line">        name: &#x27;JSCommonUtils&#x27;,</span><br><span class="line">        /*压缩和混淆js*/</span><br><span class="line">        plugins: [terser(), uglify()],</span><br><span class="line">        /*JS前缀: 添加库相关信息*/</span><br><span class="line">        banner: &#x27;/* JSCommonUtils version &#x27; + version + &#x27; */&#x27;,</span><br><span class="line">        /*JS尾部: 添加个人相关信息*/</span><br><span class="line">        footer: &#x27;/* follow me on github aa4790139 */&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        json(),</span><br><span class="line">        babel(&#123;</span><br><span class="line">            /*过滤node_modules编译*/</span><br><span class="line">            exclude: &#x27;node_modules/**&#x27;</span><br><span class="line">        &#125;),</span><br><span class="line">        /*允许多输入源*/</span><br><span class="line">        multiEntry()</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="verdaccio"><a href="#verdaccio" class="headerlink" title="verdaccio"></a>verdaccio</h3><ul><li>简介： 开源轻量的npm私服包管理平台</li><li>使用起因：<blockquote><p>创建好自己的js公共模块时，我们需要在浏览器和Node.js 环境中测试，有了verdaccio 就非常方便我们测试了。而不是去不停npm本地公共模块搞得非常蛋疼，而且很容易出问题，所以为了简单和方便我们使用verdaccio 搞个私有仓库，方便我们模拟安装使用。</p></blockquote></li><li>安装   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -g verdaccio</span><br></pre></td></tr></table></figure></li><li>启动  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verdaccio</span><br></pre></td></tr></table></figure></li></ul><h3 id="发布至verdaccio平台"><a href="#发布至verdaccio平台" class="headerlink" title="发布至verdaccio平台"></a>发布至verdaccio平台</h3><ul><li>常用命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//1. 添加用户</span><br><span class="line">npm adduser --registry http://localhost:4873</span><br><span class="line">//2. 发布至私有仓库位置</span><br><span class="line">npm publish --registry http://localhost:4873</span><br><span class="line">// 撤回发布刚发布包</span><br><span class="line">npm unpublish --force --registry http://localhost:4873 </span><br><span class="line">// 撤回发布的指定包</span><br><span class="line">npm unpublish package_name  --force --registry http://localhost:4873</span><br></pre></td></tr></table></figure></li><li>效果图<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210303144737.png" alt=""></li></ul><h3 id="发布至npm平台"><a href="#发布至npm平台" class="headerlink" title="发布至npm平台"></a>发布至npm平台</h3><ul><li><p>创建.npmignore 文件，过滤掉无需上传的文件和目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">node_modules/*</span><br><span class="line">src/</span><br><span class="line">build/</span><br><span class="line">.babelrc</span><br><span class="line">.gitignore</span><br><span class="line">package-lock.json</span><br><span class="line">pnpm-lock.yaml</span><br><span class="line">!node_modules/crc32</span><br><span class="line">!node_modules/deflate-js</span><br></pre></td></tr></table></figure><blockquote><p>提示: .npmignore文件内容，需要忽略的文件和目录写前面，需要排除忽略的文件或目录前加!写后面</p></blockquote></li><li><p>效果图<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20210303144716.png" alt=""></p></li></ul><hr><h4 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h4><ul><li><a href="https://verdaccio.org/docs/en/installation">verdaccio 官网</a></li><li><a href="https://fe.rualc.com/note/npm-verdaccio.html#npm-install">verdaccio 搭建配置</a></li><li><a href="https://www.rollupjs.com/guide/tools">rollup.js 中文文档</a></li><li><a href="https://github.com/Godiswill/blog/issues/6">rollup 官网打包实践</a></li><li><a href="https://chenshenhai.github.io/rollupjs-note/">Rollup.js 实战学习笔记</a></li><li><a href="https://stackoverflow.com/questions/48092647/npmignore-ignore-whole-folder-except-given-file-types">.npmignore: ignore whole folder except given file types</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建：JS公共模块&lt;/li&gt;
&lt;li&gt;打包：使用rollup 打包公共模块&lt;/li&gt;
&lt;li&gt;发布：js公共模块至verdaccio平台&lt;/li&gt;
&lt;li&gt;发布：js公共模块至npm平台&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="模块化" scheme="https://yanxuewen.cn/categories/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
    
    <category term="UMD" scheme="https://yanxuewen.cn/tags/UMD/"/>
    
    <category term="rollup" scheme="https://yanxuewen.cn/tags/rollup/"/>
    
    <category term="verdaccio" scheme="https://yanxuewen.cn/tags/verdaccio/"/>
    
    <category term="npm" scheme="https://yanxuewen.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Web性能优化</title>
    <link href="https://yanxuewen.cn/2022/11/13/Optimization/Web03/"/>
    <id>https://yanxuewen.cn/2022/11/13/Optimization/Web03/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>工具层面</li><li>Vue代码层面</li><li>Webpack层面</li><li>Web技术层面</li></ul><blockquote><p>性能优化对于每一个工程师都是必定要面对的问题，相信大部分人平常发现什么点可以优化，就优化什么样的点，没有全面仔细梳理汇总过知识点，导致别人问我们也不能很全面的回答上来，可能当时只能回答想到的一些零碎的点，这样给人的印象就很不好，所以我查阅相关资料，以及自己的一些经验汇总出如下脑图，方面日后别人问起时，我们脑子里面能快速呈现一幅图，然后把关联知识都说出来。</p></blockquote><span id="more"></span><p><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master/img/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.jpg" alt=""></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote><p>如果你发现有我没有列出来的优化点，欢迎给我留言，我再更新这个导图</p></blockquote><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://juejin.cn/post/6844903913410314247#heading-22">Vue 项目性能优化 — 实践指南（网上最全 / 详细）</a></li><li><a href="https://yanxuewen.cn/2020/12/30/WebBuild01/#more">Web构建优化</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;工具层面&lt;/li&gt;
&lt;li&gt;Vue代码层面&lt;/li&gt;
&lt;li&gt;Webpack层面&lt;/li&gt;
&lt;li&gt;Web技术层面&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;性能优化对于每一个工程师都是必定要面对的问题，相信大部分人平常发现什么点可以优化，就优化什么样的点，没有全面仔细梳理汇总过知识点，导致别人问我们也不能很全面的回答上来，可能当时只能回答想到的一些零碎的点，这样给人的印象就很不好，所以我查阅相关资料，以及自己的一些经验汇总出如下脑图，方面日后别人问起时，我们脑子里面能快速呈现一幅图，然后把关联知识都说出来。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="性能优化" scheme="https://yanxuewen.cn/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="Vue" scheme="https://yanxuewen.cn/tags/Vue/"/>
    
    <category term="WebPack" scheme="https://yanxuewen.cn/tags/WebPack/"/>
    
  </entry>
  
  <entry>
    <title>Web构建优化</title>
    <link href="https://yanxuewen.cn/2022/11/13/Optimization/WebBuild01/"/>
    <id>https://yanxuewen.cn/2022/11/13/Optimization/WebBuild01/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>DllPlugin 和 DllReferencePlugin 简介</li><li>如何使用DllPlugin打包，及DllReferencePlugin如何引用dll</li><li>构建优化效果</li><li>SplitChunks </li><li>Demo源码工程</li></ul><span id="more"></span><hr><h3 id="DllPlugin-和-DllReferencePlugin-简介"><a href="#DllPlugin-和-DllReferencePlugin-简介" class="headerlink" title="DllPlugin 和 DllReferencePlugin 简介"></a>DllPlugin 和 DllReferencePlugin 简介</h3><ul><li>DllPlugin: <blockquote><p>这个插件是在一个额外的独立的 webpack 设置中创建一个只有 dll 的 bundle(dll-only-bundle)。 这个插件会生成一个名为 manifest.json 的文件，这个文件是用来让 DLLReferencePlugin 映射到相关的依赖上去的。</p></blockquote></li><li>DllReferencePlugin:<blockquote><p>此插件配置在 webpack 的主配置文件中，此插件会把 dll-only-bundles 引用到需要的预编译的依赖中</p></blockquote></li><li>通俗点讲：<blockquote><p>DllPlugin 插件负责把第三方公共库，打包进一个独立的dll库中。最后项目打包时DllReferencePlugin 通过manifest.json 来引用dll的公共库，避免项目每次构建时都将第三库和业务代码进行重复打包。</p></blockquote></li><li>优点：<ul><li>提升打包构建速度</li><li>公共js文件配置CDN，避免掉重复下载公共库js文件</li></ul></li></ul><hr><h3 id="如何使用DllPlugin打包，及DllReferencePlugin如何引用dll"><a href="#如何使用DllPlugin打包，及DllReferencePlugin如何引用dll" class="headerlink" title="如何使用DllPlugin打包，及DllReferencePlugin如何引用dll"></a>如何使用DllPlugin打包，及DllReferencePlugin如何引用dll</h3><ul><li>DllPlugin 配置需要打包第三方库至dll中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//webpack.dll.config.js</span><br><span class="line"></span><br><span class="line">const DllPlugin = require(&#x27;webpack/lib/DllPlugin&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">var packageJsonContent = fs.readFileSync(path.resolve(__dirname, &#x27;../package.json&#x27;));</span><br><span class="line">var packageJson = JSON.parse(packageJsonContent);</span><br><span class="line"></span><br><span class="line">var dependencies = Object.keys(packageJson.dependencies);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        vendor: dependencies</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &#x27;../dist&#x27;),</span><br><span class="line">        filename: &#x27;vendor.bundle.js&#x27;,</span><br><span class="line">        library: &#x27;vendor_lib&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new DllPlugin(&#123;</span><br><span class="line">            context: __dirname,</span><br><span class="line">            name: &#x27;vendor_lib&#x27;,</span><br><span class="line">            /* 生成manifest文件输出的位置和文件名称 */</span><br><span class="line">            path: path.resolve(__dirname, &#x27;../dist/vendor-manifest.json&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>DllReferencePlugin如何引用dll</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//webpack.config.js 中 plugins添加以下代码</span><br><span class="line"></span><br><span class="line">new DllReferencePlugin(&#123;</span><br><span class="line">            manifest: require(path.resolve(__dirname, &#x27;../dist/vendor-manifest.json&#x27;))</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><hr><h3 id="构建优化效果"><a href="#构建优化效果" class="headerlink" title="构建优化效果"></a>构建优化效果</h3><blockquote><p>简单demo，未抽离公共库打包时间7572ms，抽离公共库打包时间2315ms，打包速度快2倍多<br><img data-src="https://cdn.jsdelivr.net/gh/aa4790139/BlogPicBed@master//img/20201230131323.png" alt=""></p></blockquote><hr><h3 id="SplitChunks"><a href="#SplitChunks" class="headerlink" title="SplitChunks"></a>SplitChunks</h3><ul><li>简介：Webpack中一个提取或分离代码的插件，主要作用是提取公共代码，防止代码被重复打包，拆分过大的js文件，合并零散的js文件，可配置</li><li>配置：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//webpack.dll.config.js中optimization 中新增如下配置</span><br><span class="line">splitChunks: &#123;</span><br><span class="line">            chunks: &quot;async&quot;,</span><br><span class="line">            minSize: 30000,</span><br><span class="line">            minChunks: 1,</span><br><span class="line">            maxAsyncRequests: 5,</span><br><span class="line">            maxInitialRequests: 3,</span><br><span class="line">            automaticNameDelimiter: &#x27;~&#x27;,</span><br><span class="line">            name: true,</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendors: &#123;</span><br><span class="line">                    test: /[\\/]node_modules[\\/]/,</span><br><span class="line">                    priority: -10</span><br><span class="line">                &#125;,</span><br><span class="line">                default: &#123;</span><br><span class="line">                    minChunks: 2,</span><br><span class="line">                    priority: -20,</span><br><span class="line">                    reuseExistingChunk: true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Demo源码工程"><a href="#Demo源码工程" class="headerlink" title="Demo源码工程"></a>Demo源码工程</h3><ul><li>访问地址：<a href="https://github.com/aa4790139/webpack4_confuse_demo">https://github.com/aa4790139/webpack4_confuse_demo</a></li></ul><hr><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><blockquote><p>由于对于公共库抽离和分割包过大优化打包，我只是试探性的去了解和测试。如果你还有什么更好的优化构建方法或者建议，欢迎给我留言。感谢~</p></blockquote><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://www.cnblogs.com/tugenhua0707/p/9520780.html">深入浅出的webpack构建工具—-DllPlugin DllReferencePlugin提高构建速度(七)</a></li><li><a href="https://webpack.docschina.org/plugins/split-chunks-plugin/#optimizationsplitchunks">SplitChunksPlugin 使用说明</a></li><li><a href="https://zhuanlan.zhihu.com/p/152097785">Webpack之SplitChunks插件用法详解</a></li><li><a href="https://imweb.io/topic/5b66dd601402769b60847149">webpack 4 Code Splitting 的 splitChunks 配置探索</a></li></ul><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DllPlugin 和 DllReferencePlugin 简介&lt;/li&gt;
&lt;li&gt;如何使用DllPlugin打包，及DllReferencePlugin如何引用dll&lt;/li&gt;
&lt;li&gt;构建优化效果&lt;/li&gt;
&lt;li&gt;SplitChunks &lt;/li&gt;
&lt;li&gt;Demo源码工程&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="webpack" scheme="https://yanxuewen.cn/categories/webpack/"/>
    
    
    <category term="DllPlugin" scheme="https://yanxuewen.cn/tags/DllPlugin/"/>
    
    <category term="DllReferencePlugin" scheme="https://yanxuewen.cn/tags/DllReferencePlugin/"/>
    
    <category term="打包优化" scheme="https://yanxuewen.cn/tags/%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Python-01：Python与C# 基本语法区别</title>
    <link href="https://yanxuewen.cn/2022/11/13/Python/Python01/"/>
    <id>https://yanxuewen.cn/2022/11/13/Python/Python01/</id>
    <published>2022-11-13T12:47:42.953Z</published>
    <updated>2022-11-13T12:47:42.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要内容"><a href="#概要内容" class="headerlink" title="概要内容"></a>概要内容</h3><ul><li>Python 与 C# 基本语法区别</li><li>具体语法示例</li></ul><span id="more"></span><h3 id="最明显的区别"><a href="#最明显的区别" class="headerlink" title="最明显的区别"></a>最明显的区别</h3><ol><li>Python if、for、while等 包裹代码块不是用{}，而是使用”:”和 换行缩进</li><li>Python 弱类型语言，同时每句话结束后无需加分号”;”，与JAVAScript 类似</li></ol><h3 id="具体语法区别："><a href="#具体语法区别：" class="headerlink" title="具体语法区别："></a>具体语法区别：</h3><ul><li>if<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C#：</span><br><span class="line">if(条件)&#123;</span><br><span class="line">    print(&quot;xxx&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">if 条件:</span><br><span class="line">    print(&quot;xxx&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>for<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C#:</span><br><span class="line">var list = new List&lt;int&gt;()&#123;1, 2, 3&#125;;</span><br><span class="line">foreach(n : list)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">list = &#123;1, 2, 3&#125;</span><br><span class="line">for n in list:</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure></li><li>强制类型转换<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C# </span><br><span class="line">var num = &quot;12&quot;;</span><br><span class="line">int n = (int)num</span><br><span class="line"></span><br><span class="line">Python</span><br><span class="line">num = &quot;12&quot;</span><br><span class="line">n = int(num)</span><br></pre></td></tr></table></figure></li><li><p>数组切片： 其实就是copy出数组中的指定区域元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listnames = [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">listnames[start_index:end_index] </span><br><span class="line">(注意：copy出来的集合为[start_index,end_index)之前的元素</span><br></pre></td></tr></table></figure></li><li><p>函数及注释说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C#：</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 测试函数</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public string test(string username)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;hello &quot; + username);</span><br><span class="line">    return username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">def test(username):</span><br><span class="line">    &quot;&quot;&quot;测试函数&quot;&quot;&quot;</span><br><span class="line">    print(&quot;hello &quot; + username)</span><br><span class="line">    return username.title()</span><br></pre></td></tr></table></figure></li><li><p>传递任意数量的实参：*实参名 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C#：无对应语法</span><br><span class="line"></span><br><span class="line">Python</span><br><span class="line">def make_pizza(*toppings): </span><br><span class="line">    &quot;&quot;&quot;打印顾客点的所有配料&quot;&quot;&quot; </span><br><span class="line">    print(toppings)</span><br><span class="line"></span><br><span class="line"># 任意数量实参, 如果是键值对，请使用**双星号，比如：</span><br><span class="line">def build_profile(first,last,**user_info):</span><br><span class="line">    for key, value in user_info.items(): </span><br><span class="line">        print(&quot;key=&quot; + key + &quot;value=&quot; + value)</span><br></pre></td></tr></table></figure><blockquote><p>注意：任意数量实参只能有一个，并且只能放在函数最后一个参数的位置</p></blockquote></li><li><p>模块导入：类似java 在一个类文件中，导入另外一个文件类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">C#: 使用userspace 引入空间，既可以直接使用空间中的类</span><br><span class="line">one.cs：内容如下</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">namespace onens </span><br><span class="line">&#123;</span><br><span class="line">    public class One</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">two.cs：内容如下</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">using onens</span><br><span class="line">namespace twons</span><br><span class="line">&#123;</span><br><span class="line">    public class Two</span><br><span class="line">    &#123;</span><br><span class="line">        public Two()</span><br><span class="line">        &#123;</span><br><span class="line">            var one = new One()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python: 导出模块后，就可以通过模块名称访问其中的所有方法</span><br><span class="line">OneModule.py：内容如下</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">def one(name, address):</span><br><span class="line">    print(name + &quot;&quot; + address)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">TwoModule.py：内容如下</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">import OneModule</span><br><span class="line">def two():</span><br><span class="line">    OneModule.one(&quot;potter&quot;,&quot;sz&quot;)</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li><li><p>导入特定函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C#: 没有导出特定函数一说，只有using namespace的内容 或者说import dll中的方法，比如：</span><br><span class="line">[DllImport(&quot;User32.DLL&quot;)]</span><br><span class="line">public static extern IntPtr GetActiveWindow();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Python：</span><br><span class="line">from module_name import function_name1，function_name2...</span><br><span class="line"># 使用as给导入函数取别名</span><br><span class="line">from module_name import fuction_name as fn</span><br><span class="line"># 使用as给导入模块取别名</span><br><span class="line">import module_name as mn</span><br><span class="line"># 使用*号，导入模块所有函数</span><br><span class="line">from module_name import *</span><br></pre></td></tr></table></figure></li><li>类<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br><span class="line">C#: </span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public Test(string name,string address)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Python: __init__ 就是构造方法, self是自动传递的</span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self, name, address):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.address = address</span><br><span class="line">    def hello(self):</span><br><span class="line">        print(&quot;hello&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>继承<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">C#：</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">class Car</span><br><span class="line">&#123;</span><br><span class="line">    private string make;</span><br><span class="line">    private string model;</span><br><span class="line">    private string year;</span><br><span class="line">    public Car(string make, string model, string year)</span><br><span class="line">    &#123;</span><br><span class="line">        this.make = make;</span><br><span class="line">        this.model = model;</span><br><span class="line">        this.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    public virtual void Run() </span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">class ElectricCar : Car</span><br><span class="line">&#123;</span><br><span class="line">    private string makeAddress;</span><br><span class="line">    public ElectricCar(string makeAddress, string make, string model ,string year) : base(make, model,year)</span><br><span class="line">    &#123;</span><br><span class="line">        this.makeAddress = makeAddress;</span><br><span class="line">    &#125;</span><br><span class="line">    public override void Run()</span><br><span class="line">    &#123;</span><br><span class="line">        base.Run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python:</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">class Car():</span><br><span class="line">    def __init__(self,make,model,year):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">    def run():</span><br><span class="line">        print(&quot;run&quot;)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">class ElectricCar(Car):</span><br><span class="line">    def __init__(self,make,model,year):</span><br><span class="line">        super().__init__(make,model,year)</span><br><span class="line">    def run()</span><br><span class="line">        ***子类重写父类方法，同名即可***</span><br><span class="line">        print(&quot;ElectricCar run&quot;)</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li><li>导入类：(格式：from module_name import class,class)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from car import Car</span><br><span class="line">my_new_car = Car(&#x27;audi&#x27;, &#x27;a4&#x27;, 2016)</span><br></pre></td></tr></table></figure></li><li>文件读写<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">C#: </span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">1. 读取整个文件</span><br><span class="line">using (FileStream fs = File.Open(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))</span><br><span class="line">&#123;</span><br><span class="line">    StreamReader sr = new StreamReader(fs);</span><br><span class="line">    strContent = sr.ReadToEnd();</span><br><span class="line">    sr.Close();</span><br><span class="line">    fs.Close();</span><br><span class="line">&#125;</span><br><span class="line">2. 逐行读取文件</span><br><span class="line">using (StreamReader sr = new StreamReader(filepath))</span><br><span class="line">&#123;</span><br><span class="line">    String line;</span><br><span class="line">    while((line=sr.ReadLine())!=null)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">3. 写入文件</span><br><span class="line">using (FileStream fs = File.Open(filepath, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))</span><br><span class="line">&#123;</span><br><span class="line">    StreamWriter sw = new StreamWriter(fs);</span><br><span class="line">    sw.WriteLine(content);</span><br><span class="line">    sw.Flush();</span><br><span class="line">    sw.Close();</span><br><span class="line">    fs.Close();</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python:</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">1.读取整个文件，使用rstrip过滤掉前后空格</span><br><span class="line">with open(&#x27;pi_digits.txt&#x27;) as file_object: </span><br><span class="line">    contents = file_object.read() </span><br><span class="line">    print(contents.rstrip())</span><br><span class="line">2. 逐行读取文件</span><br><span class="line">with open(&#x27;pi_digits.txt&#x27;) as file_object: </span><br><span class="line">    for line in file_object: </span><br><span class="line">    print(line.rstrip())</span><br><span class="line">3. 写入文件：&#x27;w&#x27;、&#x27;r&#x27;、&#x27;a&#x27; 分别代表&#x27;写&#x27;、&#x27;读&#x27;、&#x27;追加&#x27;</span><br><span class="line">filename = &#x27;programming.txt&#x27; </span><br><span class="line">with open(filename, &#x27;w&#x27;) as file_object: </span><br><span class="line">    file_object.write(&quot;I love programming.&quot;)</span><br></pre></td></tr></table></figure></li><li>存取数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C#：其实就是文件写和读</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python: </span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">1. 存：</span><br><span class="line">import json </span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line">with open(filename, &#x27;w&#x27;) as f_obj: </span><br><span class="line">    json.dump(numbers, f_obj)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">2. 取</span><br><span class="line">import json </span><br><span class="line">with open(filename, &#x27;r&#x27;) as f_obj:</span><br><span class="line">    print(json.load(f_obj))</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li><li>异常<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">C#：</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">int r = 0;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    r = 5/0</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;出现异常&quot;);</span><br><span class="line">&#125;</span><br><span class="line">finally</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;try最后执行代码&quot;);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Python：</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">try:</span><br><span class="line">    r = 5/0</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    raise Exception(&quot;抛出异常：除数不能为0&quot;)</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    print(&quot;异常打印：文件找不到&quot;)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;其他异常&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;无异常，打印此句&quot;)</span><br><span class="line">finally:</span><br><span class="line">    print(&quot;最后打印此句&quot;)</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">1. else 缩进后代码，相当于把这部分代码放到try-except中或者取消缩进放到最后一样，没啥特别的</span><br><span class="line">2. except 不带具体异常，就相当于C#的catch(Exception)</span><br><span class="line">3. raise 相当于C#的throw</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li><li>lambda<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C#：</span><br><span class="line">格式：(arguments) =&gt; &#123; expression &#125;;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">Func&lt;int, int&gt; func = (x) =&gt; &#123; return x + 5; &#125;;</span><br><span class="line">Console.WriteLine(&quot;&quot; + func(5));</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">格式：lambda arguments : expression</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">func = lambda a : a + 10</span><br><span class="line">print(func(5))</span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li><li>API <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Python: (注意：使用前请使用pip install requests 安装requests模块)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">import requests</span><br><span class="line">url = &#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(&quot;Status code:&quot;, response.status_code)</span><br><span class="line"># 将API响应存储在一个变量中</span><br><span class="line">response_dict = response.json()</span><br><span class="line">print(&quot;Total repositories:&quot;, response_dict[&#x27;total_count&#x27;])</span><br><span class="line"># 用完记得关闭，否则下次运行会报：远程主机强迫关闭了一个现有的连接</span><br><span class="line">response.close()</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概要内容&quot;&gt;&lt;a href=&quot;#概要内容&quot; class=&quot;headerlink&quot; title=&quot;概要内容&quot;&gt;&lt;/a&gt;概要内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Python 与 C# 基本语法区别&lt;/li&gt;
&lt;li&gt;具体语法示例&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://yanxuewen.cn/tags/Python/"/>
    
  </entry>
  
</feed>
